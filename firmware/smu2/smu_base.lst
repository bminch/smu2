
smu_base.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	28 5c 00    	nop       
Disassembly of section .aivt._AltAMP1Interrupt:

000001e2 <.aivt._AltAMP1Interrupt>:
 1e2:	28 5c 00    	nop       
Disassembly of section .aivt._AltAMP2Interrupt:

000001e4 <.aivt._AltAMP2Interrupt>:
 1e4:	28 5c 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	28 5c 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	28 5c 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	28 5c 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	28 5c 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	28 5c 00    	nop       
Disassembly of section .aivt._AltDAC1Interrupt:

000001b0 <.aivt._AltDAC1Interrupt>:
 1b0:	28 5c 00    	nop       
Disassembly of section .aivt._AltDAC2Interrupt:

000001b2 <.aivt._AltDAC2Interrupt>:
 1b2:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA0Interrupt:

0000011c <.aivt._AltDMA0Interrupt>:
 11c:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA1Interrupt:

00000130 <.aivt._AltDMA1Interrupt>:
 130:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA2Interrupt:

00000144 <.aivt._AltDMA2Interrupt>:
 144:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA3Interrupt:

0000015c <.aivt._AltDMA3Interrupt>:
 15c:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA4Interrupt:

00000170 <.aivt._AltDMA4Interrupt>:
 170:	28 5c 00    	nop       
Disassembly of section .aivt._AltDMA5Interrupt:

0000018e <.aivt._AltDMA5Interrupt>:
 18e:	28 5c 00    	nop       
Disassembly of section .aivt._AltFSTInterrupt:

000001e8 <.aivt._AltFSTInterrupt>:
 1e8:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	28 5c 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	28 5c 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	28 5c 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	28 5c 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	28 5c 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	28 5c 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt101:

000001de <.aivt._AltInterrupt101>:
 1de:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt102:

000001e0 <.aivt._AltInterrupt102>:
 1e0:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt107:

000001ea <.aivt._AltInterrupt107>:
 1ea:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt108:

000001ec <.aivt._AltInterrupt108>:
 1ec:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt109:

000001ee <.aivt._AltInterrupt109>:
 1ee:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt110:

000001f0 <.aivt._AltInterrupt110>:
 1f0:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt111:

000001f2 <.aivt._AltInterrupt111>:
 1f2:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt112:

000001f4 <.aivt._AltInterrupt112>:
 1f4:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt113:

000001f6 <.aivt._AltInterrupt113>:
 1f6:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt114:

000001f8 <.aivt._AltInterrupt114>:
 1f8:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt115:

000001fa <.aivt._AltInterrupt115>:
 1fa:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt116:

000001fc <.aivt._AltInterrupt116>:
 1fc:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt84:

000001bc <.aivt._AltInterrupt84>:
 1bc:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt85:

000001be <.aivt._AltInterrupt85>:
 1be:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt90:

000001c8 <.aivt._AltInterrupt90>:
 1c8:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt91:

000001ca <.aivt._AltInterrupt91>:
 1ca:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt94:

000001d0 <.aivt._AltInterrupt94>:
 1d0:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt95:

000001d2 <.aivt._AltInterrupt95>:
 1d2:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt96:

000001d4 <.aivt._AltInterrupt96>:
 1d4:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt97:

000001d6 <.aivt._AltInterrupt97>:
 1d6:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt98:

000001d8 <.aivt._AltInterrupt98>:
 1d8:	28 5c 00    	nop       
Disassembly of section .aivt._AltInterrupt99:

000001da <.aivt._AltInterrupt99>:
 1da:	28 5c 00    	nop       
Disassembly of section .aivt._AltJTAGInterrupt:

000001fe <.aivt._AltJTAGInterrupt>:
 1fe:	28 5c 00    	nop       
Disassembly of section .aivt._AltLCDInterrupt:

000001dc <.aivt._AltLCDInterrupt>:
 1dc:	28 5c 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	28 5c 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	28 5c 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	28 5c 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	28 5c 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	28 5c 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	28 5c 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	28 5c 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	28 5c 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	28 5c 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	28 5c 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	28 5c 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	28 5c 00    	nop       
Disassembly of section .aivt._AltSDA1Interrupt:

000001e6 <.aivt._AltSDA1Interrupt>:
 1e6:	28 5c 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	28 5c 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	28 5c 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	28 5c 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	28 5c 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	28 5c 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	28 5c 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	28 5c 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	28 5c 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	28 5c 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	28 5c 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	28 5c 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	28 5c 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	28 5c 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	28 5c 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	28 5c 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	28 5c 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	28 5c 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	28 5c 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	28 5c 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	28 5c 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	28 5c 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	28 5c 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	28 5c 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	28 5c 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	28 5c 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	40 11 04    	goto      0x1140 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001140 <__reset>:
    1140:	0f 70 21    	mov.w     #0x1700, w15
    1142:	0e 7f 22    	mov.w     #0x27f0, w14
    1144:	0e 01 88    	mov.w     w14, 0x20
    1146:	00 00 00    	nop       
    1148:	00 00 20    	mov.w     #0x0, w0
    114a:	00 00 e0    	cp0.w     w0
    114c:	02 00 32    	bra       Z, 0x1152 <CORCON_RESET>
    114e:	00 01 20    	mov.w     #0x10, w0
    1150:	20 02 88    	mov.w     w0, 0x44

00001152 <CORCON_RESET>:
    1152:	14 00 07    	rcall     0x117c <__psv_init>
    1154:	55 01 07    	rcall     0x1400 <__crt_start_mode> <__crt_start_mode_normal>
    1156:	00 00 e0    	cp0.w     w0
    1158:	03 00 3a    	bra       NZ, 0x1160 <L11>
    115a:	00 9a 25    	mov.w     #0x59a0, w0
    115c:	01 00 20    	mov.w     #0x0, w1
    115e:	02 00 37    	bra       0x1164 <L21>

00001160 <L11>:
    1160:	00 00 20    	mov.w     #0x0, w0
    1162:	01 00 20    	mov.w     #0x0, w1

00001164 <L21>:
    1164:	81 0f 70    	ior.w     w0, w1, [w15]
    1166:	01 00 32    	bra       Z, 0x116a <L12>
    1168:	14 00 07    	rcall     0x1192 <__data_init> <__data_init_da>

0000116a <L12>:
    116a:	00 00 20    	mov.w     #0x0, w0
    116c:	00 00 e0    	cp0.w     w0
    116e:	02 00 32    	bra       Z, 0x1174 <L13>
    1170:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x1134>
    1172:	00 00 00 

00001174 <L13>:
    1174:	12 5c 02    	call      0x5c12 <_main>
    1176:	00 00 00 
    1178:	00 40 da    	break     
    117a:	00 00 fe    	reset     

0000117c <__psv_init>:
    117c:	44 40 a9    	bclr.b    0x44, #0x2
    117e:	00 2d 20    	mov.w     #0x2d0, w0
    1180:	00 00 e0    	cp0.w     w0
    1182:	03 00 32    	bra       Z, 0x118a <L14>
    1184:	00 20 20    	mov.w     #0x200, w0
    1186:	90 01 88    	mov.w     w0, 0x32
    1188:	44 40 a8    	bset.b    0x44, #0x2

0000118a <L14>:
    118a:	00 00 06    	return    

0000118c <__long_indirect_call>:
    118c:	8a 1f 78    	mov.w     w10, [w15++]
    118e:	8b 1f 78    	mov.w     w11, [w15++]
    1190:	00 00 06    	return    

00001192 <__data_init>:
    1192:	a1 02 88    	mov.w     w1, 0x54
    1194:	80 04 78    	mov.w     w0, w9
    1196:	00 00 eb    	clr.w     w0
    1198:	1f 00 37    	bra       0x11d8 <L41>

0000119a <L11>:
    119a:	e2 84 44    	add.w     w9, #0x2, w9
    119c:	54 a0 b4    	addc.w    0x54
    119e:	99 05 ba    	tblrdl.w  [w9], w11
    11a0:	e2 84 44    	add.w     w9, #0x2, w9
    11a2:	54 a0 b4    	addc.w    0x54
    11a4:	99 06 ba    	tblrdl.w  [w9], w13
    11a6:	e2 84 44    	add.w     w9, #0x2, w9
    11a8:	54 a0 b4    	addc.w    0x54
    11aa:	00 06 eb    	clr.w     w12
    11ac:	47 6f de    	lsr.w     w13, #0x7, w14
    11ae:	fd 07 b2    	and.w     #0x7f, w13
    11b0:	ae 01 88    	mov.w     w14, 0x34
    11b2:	63 6c e1    	cp.b      w13, #0x3
    11b4:	03 00 3a    	bra       NZ, 0x11bc <L21>
    11b6:	ea ff 07    	rcall     0x118c <__long_indirect_call>
    11b8:	00 00 eb    	clr.w     w0
    11ba:	0e 00 37    	bra       0x11d8 <L41>

000011bc <L21>:
    11bc:	60 6c e1    	cp.b      w13, #0x0
    11be:	08 00 3a    	bra       NZ, 0x11d0 <L22>

000011c0 <L91>:
    11c0:	00 4d eb    	clr.b     [w10]
    11c2:	0a 05 e8    	inc.w     w10, w10
    11c4:	02 00 39    	bra       NC, 0x11ca <L81>
    11c6:	34 20 ec    	inc.w     0x34
    11c8:	0a f0 a0    	bset.w    w10, #0xf

000011ca <L81>:
    11ca:	8b 05 e9    	dec.w     w11, w11
    11cc:	f9 ff 3e    	bra       GTU, 0x11c0 <L91>
    11ce:	04 00 37    	bra       0x11d8 <L41>

000011d0 <L22>:
    11d0:	61 68 e1    	cp.w      w13, #0x1
    11d2:	01 00 32    	bra       Z, 0x11d6 <L31>
    11d4:	00 86 eb    	setm.w    w12

000011d6 <L31>:
    11d6:	0b 00 07    	rcall     0x11ee <L13> <__memcpyd3extended>

000011d8 <L41>:
    11d8:	19 c7 ba    	tblrdh.b  [w9], w14
    11da:	19 05 ba    	tblrdl.w  [w9], w10
    11dc:	0e 04 e0    	cp0.b     w14
    11de:	03 00 3a    	bra       NZ, 0x11e6 <L12>
    11e0:	0a 00 e0    	cp0.w     w10
    11e2:	db ff 3a    	bra       NZ, 0x119a <L11>
    11e4:	00 00 06    	return    

000011e6 <L12>:
    11e6:	fe 07 b2    	and.w     #0x7f, w14
    11e8:	ae 02 88    	mov.w     w14, 0x54
    11ea:	8a 04 78    	mov.w     w10, w9
    11ec:	f5 ff 37    	bra       0x11d8 <L41>

000011ee <L13>:
    11ee:	0c d0 a3    	btst.c    w12, #0xd
    11f0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11f2:	1c 00 39    	bra       NC, 0x122c <L23>
    11f4:	89 02 78    	mov.w     w9, w5
    11f6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11f8:	0a 05 e8    	inc.w     w10, w10
    11fa:	02 00 39    	bra       NC, 0x1200 <L32>
    11fc:	34 20 ec    	inc.w     0x34
    11fe:	0a f0 a0    	bset.w    w10, #0xf

00001200 <L32>:
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	0f 00 32    	bra       Z, 0x1222 <L42>
    1204:	25 4d ba    	tblrdl.b  [w5--], [w10]
    1206:	0a 05 e8    	inc.w     w10, w10
    1208:	02 00 39    	bra       NC, 0x120e <L33>
    120a:	34 20 ec    	inc.w     0x34
    120c:	0a f0 a0    	bset.w    w10, #0xf

0000120e <L33>:
    120e:	8b 05 e9    	dec.w     w11, w11
    1210:	08 00 32    	bra       Z, 0x1222 <L42>
    1212:	0c 00 e0    	cp0.w     w12
    1214:	06 00 32    	bra       Z, 0x1222 <L42>
    1216:	15 cd ba    	tblrdh.b  [w5], [w10]
    1218:	0a 05 e8    	inc.w     w10, w10
    121a:	02 00 39    	bra       NC, 0x1220 <L34> <_RXbuf>
    121c:	34 20 ec    	inc.w     0x34
    121e:	0a f0 a0    	bset.w    w10, #0xf

00001220 <L34>:
    1220:	8b 05 e9    	dec.w     w11, w11

00001222 <L42>:
    1222:	89 84 e8    	inc2.w    w9, w9
    1224:	54 a0 b4    	addc.w    0x54
    1226:	0b 00 e0    	cp0.w     w11
    1228:	e2 ff 3a    	bra       NZ, 0x11ee <L13> <__memcpyd3extended>
    122a:	00 00 06    	return    

0000122c <L23>:
    122c:	99 02 ba    	tblrdl.w  [w9], w5
    122e:	05 5d 78    	mov.b     w5, [w10++]
    1230:	8b 05 e9    	dec.w     w11, w11
    1232:	f7 ff 32    	bra       Z, 0x1222 <L42>
    1234:	c8 2a de    	lsr.w     w5, #0x8, w5
    1236:	05 5d 78    	mov.b     w5, [w10++]
    1238:	8b 05 e9    	dec.w     w11, w11
    123a:	f3 ff 32    	bra       Z, 0x1222 <L42>
    123c:	0c 00 e0    	cp0.w     w12
    123e:	f1 ff 32    	bra       Z, 0x1222 <L42>
    1240:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1242:	ee ff 37    	bra       0x1220 <L34> <_RXbuf>

00001244 <.handle>:
    1244:	be 55 04    	goto      0x55be <_cdc_setup_callback>
    1246:	00 00 00 
    1248:	5e 57 04    	goto      0x575e <_cdc_rx_service>
    124a:	00 00 00 
    124c:	e8 56 04    	goto      0x56e8 <_cdc_tx_service>
    124e:	00 00 00 
    1250:	c8 5b 04    	goto      0x5bc8 <.LFE29>
    1252:	00 00 00 
    1254:	66 35 04    	goto      0x3566 <_parser_disconnected>
    1256:	00 00 00 
    1258:	9e 38 04    	goto      0x389e <_parser_forwarding>
    125a:	00 00 00 
    125c:	f0 57 04    	goto      0x57f0 <_cdc_putc>
    125e:	00 00 00 
    1260:	5e 58 04    	goto      0x585e <_cdc_puts>
    1262:	00 00 00 
    1264:	cc 36 04    	goto      0x36cc <_parser_connected>
    1266:	00 00 00 
    1268:	ca 42 04    	goto      0x42ca <_ble_putc>
    126a:	00 00 00 
    126c:	e0 42 04    	goto      0x42e0 <_ble_puts>
    126e:	00 00 00 
    1270:	98 1a 04    	goto      0x1a98 <_ui_handler>
    1272:	00 00 00 
    1274:	fe 1c 04    	goto      0x1cfe <_pwr_handler>
    1276:	00 00 00 
    1278:	fa 1d 04    	goto      0x1dfa <_dac10_handler>
    127a:	00 00 00 
    127c:	58 1f 04    	goto      0x1f58 <_dac16_handler>
    127e:	00 00 00 
    1280:	a2 21 04    	goto      0x21a2 <_adc18_handler>
    1282:	00 00 00 
    1284:	94 23 04    	goto      0x2394 <_mode_handler>
    1286:	00 00 00 
    1288:	b2 2d 04    	goto      0x2db2 <_digout_handler>
    128a:	00 00 00 
    128c:	2c 31 04    	goto      0x312c <_ble_handler>
    128e:	00 00 00 
    1290:	3c 32 04    	goto      0x323c <_flash_handler>
    1292:	00 00 00 
    1294:	ea 1a 04    	goto      0x1aea <_led1_handler>
    1296:	00 00 00 
    1298:	74 1b 04    	goto      0x1b74 <_led1Q_handler>
    129a:	00 00 00 
    129c:	94 1b 04    	goto      0x1b94 <_led2_handler>
    129e:	00 00 00 
    12a0:	18 1c 04    	goto      0x1c18 <_led2Q_handler>
    12a2:	00 00 00 
    12a4:	36 1c 04    	goto      0x1c36 <_led3_handler>
    12a6:	00 00 00 
    12a8:	be 1c 04    	goto      0x1cbe <_led3Q_handler>
    12aa:	00 00 00 
    12ac:	dc 1c 04    	goto      0x1cdc <_sw1Q_handler>
    12ae:	00 00 00 
    12b0:	50 1d 04    	goto      0x1d50 <_ena12V_handler>
    12b2:	00 00 00 
    12b4:	da 1d 04    	goto      0x1dda <_ena12VQ_handler>
    12b6:	00 00 00 
    12b8:	4c 1e 04    	goto      0x1e4c <_dac10_dac1_handler>
    12ba:	00 00 00 
    12bc:	7e 1e 04    	goto      0x1e7e <_dac10_dac1Q_handler>
    12be:	00 00 00 
    12c0:	98 1e 04    	goto      0x1e98 <_dac10_dac2_handler>
    12c2:	00 00 00 
    12c4:	ca 1e 04    	goto      0x1eca <_dac10_dac2Q_handler>
    12c6:	00 00 00 
    12c8:	e4 1e 04    	goto      0x1ee4 <_dac10_diff_handler>
    12ca:	00 00 00 
    12cc:	38 1f 04    	goto      0x1f38 <_dac10_diffQ_handler>
    12ce:	00 00 00 
    12d0:	aa 1f 04    	goto      0x1faa <_dac16_dac0_handler>
    12d2:	00 00 00 
    12d4:	d8 1f 04    	goto      0x1fd8 <_dac16_dac0Q_handler>
    12d6:	00 00 00 
    12d8:	f2 1f 04    	goto      0x1ff2 <_dac16_dac1_handler>
    12da:	00 00 00 
    12dc:	20 20 04    	goto      0x2020 <_dac16_dac1Q_handler>
    12de:	00 00 00 
    12e0:	3a 20 04    	goto      0x203a <_dac16_dac2_handler>
    12e2:	00 00 00 
    12e4:	68 20 04    	goto      0x2068 <_dac16_dac2Q_handler>
    12e6:	00 00 00 
    12e8:	82 20 04    	goto      0x2082 <_dac16_dac3_handler>
    12ea:	00 00 00 
    12ec:	b0 20 04    	goto      0x20b0 <_dac16_dac3Q_handler>
    12ee:	00 00 00 
    12f0:	ca 20 04    	goto      0x20ca <_dac16_ch1_handler>
    12f2:	00 00 00 
    12f4:	0a 21 04    	goto      0x210a <_dac16_ch1Q_handler>
    12f6:	00 00 00 
    12f8:	36 21 04    	goto      0x2136 <_dac16_ch2_handler>
    12fa:	00 00 00 
    12fc:	76 21 04    	goto      0x2176 <_dac16_ch2Q_handler>
    12fe:	00 00 00 
    1300:	f4 21 04    	goto      0x21f4 <_adc18_ch1Q_handler>
    1302:	00 00 00 
    1304:	28 22 04    	goto      0x2228 <_adc18_ch2Q_handler>
    1306:	00 00 00 
    1308:	5c 22 04    	goto      0x225c <_adc18_ch1avgQ_handler>
    130a:	00 00 00 
    130c:	90 22 04    	goto      0x2290 <_adc18_ch2avgQ_handler>
    130e:	00 00 00 
    1310:	c4 22 04    	goto      0x22c4 <_adc18_bothQ_handler>
    1312:	00 00 00 
    1314:	2c 23 04    	goto      0x232c <_adc18_bothavgQ_handler>
    1316:	00 00 00 
    1318:	e6 23 04    	goto      0x23e6 <_portd_handler>
    131a:	00 00 00 
    131c:	20 24 04    	goto      0x2420 <_portdQ_handler>
    131e:	00 00 00 
    1320:	3e 24 04    	goto      0x243e <_rd0_handler>
    1322:	00 00 00 
    1324:	c2 24 04    	goto      0x24c2 <_rd0Q_handler>
    1326:	00 00 00 
    1328:	e0 24 04    	goto      0x24e0 <_rd1_handler>
    132a:	00 00 00 
    132c:	68 25 04    	goto      0x2568 <_rd1Q_handler>
    132e:	00 00 00 
    1330:	86 25 04    	goto      0x2586 <_rd2_handler>
    1332:	00 00 00 
    1334:	0e 26 04    	goto      0x260e <_rd2Q_handler>
    1336:	00 00 00 
    1338:	2c 26 04    	goto      0x262c <_rd3_handler>
    133a:	00 00 00 
    133c:	b4 26 04    	goto      0x26b4 <_rd3Q_handler>
    133e:	00 00 00 
    1340:	d2 26 04    	goto      0x26d2 <_rd4_handler>
    1342:	00 00 00 
    1344:	5a 27 04    	goto      0x275a <_rd4Q_handler>
    1346:	00 00 00 
    1348:	78 27 04    	goto      0x2778 <_rd5_handler>
    134a:	00 00 00 
    134c:	02 28 04    	goto      0x2802 <_rd5Q_handler>
    134e:	00 00 00 
    1350:	22 28 04    	goto      0x2822 <_rd6_handler>
    1352:	00 00 00 
    1354:	ac 28 04    	goto      0x28ac <_rd6Q_handler>
    1356:	00 00 00 
    1358:	cc 28 04    	goto      0x28cc <_porte_handler>
    135a:	00 00 00 
    135c:	06 29 04    	goto      0x2906 <_porteQ_handler>
    135e:	00 00 00 
    1360:	24 29 04    	goto      0x2924 <_re0_handler>
    1362:	00 00 00 
    1364:	a8 29 04    	goto      0x29a8 <_re0Q_handler>
    1366:	00 00 00 
    1368:	c6 29 04    	goto      0x29c6 <_re1_handler>
    136a:	00 00 00 
    136c:	4e 2a 04    	goto      0x2a4e <_re1Q_handler>
    136e:	00 00 00 
    1370:	6c 2a 04    	goto      0x2a6c <_re2_handler>
    1372:	00 00 00 
    1374:	f4 2a 04    	goto      0x2af4 <_re2Q_handler>
    1376:	00 00 00 
    1378:	12 2b 04    	goto      0x2b12 <_re3_handler>
    137a:	00 00 00 
    137c:	9a 2b 04    	goto      0x2b9a <_re3Q_handler>
    137e:	00 00 00 
    1380:	b8 2b 04    	goto      0x2bb8 <_re4_handler>
    1382:	00 00 00 
    1384:	40 2c 04    	goto      0x2c40 <_re4Q_handler>
    1386:	00 00 00 
    1388:	5e 2c 04    	goto      0x2c5e <_re5_handler>
    138a:	00 00 00 
    138c:	e8 2c 04    	goto      0x2ce8 <_re5Q_handler>
    138e:	00 00 00 
    1390:	08 2d 04    	goto      0x2d08 <_re6_handler>
    1392:	00 00 00 
    1394:	92 2d 04    	goto      0x2d92 <_re6Q_handler>
    1396:	00 00 00 
    1398:	04 2e 04    	goto      0x2e04 <_set_handler>
    139a:	00 00 00 
    139c:	20 2e 04    	goto      0x2e20 <_clear_handler>
    139e:	00 00 00 
    13a0:	3c 2e 04    	goto      0x2e3c <_toggle_handler>
    13a2:	00 00 00 
    13a4:	58 2e 04    	goto      0x2e58 <_write_handler>
    13a6:	00 00 00 
    13a8:	98 2e 04    	goto      0x2e98 <_read_handler>
    13aa:	00 00 00 
    13ac:	c0 2e 04    	goto      0x2ec0 <_od_handler>
    13ae:	00 00 00 
    13b0:	00 2f 04    	goto      0x2f00 <_odQ_handler>
    13b2:	00 00 00 
    13b4:	28 2f 04    	goto      0x2f28 <_digout_mode_handler>
    13b6:	00 00 00 
    13b8:	68 2f 04    	goto      0x2f68 <_digout_modeQ_handler>
    13ba:	00 00 00 
    13bc:	90 2f 04    	goto      0x2f90 <_period_handler>
    13be:	00 00 00 
    13c0:	d0 2f 04    	goto      0x2fd0 <_periodQ_handler>
    13c2:	00 00 00 
    13c4:	f8 2f 04    	goto      0x2ff8 <_duty_handler>
    13c6:	00 00 00 
    13c8:	38 30 04    	goto      0x3038 <_dutyQ_handler>
    13ca:	00 00 00 
    13cc:	60 30 04    	goto      0x3060 <_width_handler>
    13ce:	00 00 00 
    13d0:	a0 30 04    	goto      0x30a0 <_widthQ_handler>
    13d2:	00 00 00 
    13d4:	c8 30 04    	goto      0x30c8 <_timer1period_handler>
    13d6:	00 00 00 
    13d8:	08 31 04    	goto      0x3108 <_timer1periodQ_handler>
    13da:	00 00 00 
    13dc:	7e 31 04    	goto      0x317e <_ble_reset_handler>
    13de:	00 00 00 
    13e0:	08 32 04    	goto      0x3208 <_ble_resetQ_handler>
    13e2:	00 00 00 
    13e4:	28 32 04    	goto      0x3228 <_ble_forward_handler>
    13e6:	00 00 00 
    13e8:	8e 32 04    	goto      0x328e <_flash_erase_handler>
    13ea:	00 00 00 
    13ec:	f8 32 04    	goto      0x32f8 <_flash_read_handler>
    13ee:	00 00 00 
    13f0:	e6 33 04    	goto      0x33e6 <_flash_write_handler>
    13f2:	00 00 00 
    13f4:	70 55 04    	goto      0x5570 <_cdc_set_line_coding_out_callback>
    13f6:	00 00 00 
    13f8:	2c 45 04    	goto      0x452c <_usb_set_address_callback>
    13fa:	00 00 00 
    13fc:	e8 4c 04    	goto      0x4ce8 <_usb_send_data_packet>
    13fe:	00 00 00 

00001400 <__crt_start_mode>:
    1400:	00 00 05    	retlw.w   #0x0, w0

00001402 <___divsi3>:
    1402:	83 9f 68    	xor.w     w1, w3, [w15++]
    1404:	01 00 e0    	cp0.w     w1
    1406:	02 00 3d    	bra       GE, 0x140c <divtestb>
    1408:	60 00 10    	subr.w    w0, #0x0, w0
    140a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000140c <divtestb>:
    140c:	03 00 e0    	cp0.w     w3
    140e:	02 00 3d    	bra       GE, 0x1414 <calcquot>
    1410:	60 01 11    	subr.w    w2, #0x0, w2
    1412:	e0 81 19    	subbr.w   w3, #0x0, w3

00001414 <calcquot>:
    1414:	05 00 07    	rcall     0x1420 <___udivsi3> <.L0> <.L0> <.L0>
    1416:	4f 00 e0    	cp0.w     [--w15]
    1418:	02 00 3b    	bra       NN, 0x141e <returnq>
    141a:	60 00 10    	subr.w    w0, #0x0, w0
    141c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000141e <returnq>:
    141e:	00 00 06    	return    

00001420 <___udivsi3>:
    1420:	60 22 b8    	mul.uu    w4, #0x0, w4
    1422:	06 02 20    	mov.w     #0x20, w6

00001424 <nextbit>:
    1424:	00 00 d0    	sl.w      w0, w0
    1426:	81 80 d2    	rlc.w     w1, w1
    1428:	04 82 d2    	rlc.w     w4, w4
    142a:	85 82 d2    	rlc.w     w5, w5
    142c:	00 00 a0    	bset.w    w0, #0x0
    142e:	02 02 52    	sub.w     w4, w2, w4
    1430:	83 82 5a    	subb.w    w5, w3, w5
    1432:	03 00 31    	bra       C, 0x143a <iterate>
    1434:	02 02 42    	add.w     w4, w2, w4
    1436:	83 82 4a    	addc.w    w5, w3, w5
    1438:	00 00 a1    	bclr.w    w0, #0x0

0000143a <iterate>:
    143a:	06 03 e9    	dec.w     w6, w6
    143c:	f3 ff 3a    	bra       NZ, 0x1424 <nextbit>
    143e:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x134>:
    1000:	40 11 04    	goto      0x1140 <__reset>
    1002:	00 00 00 
    1004:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	72 5b 04    	goto      0x5b72 <__U1RXInterrupt>
    1046:	00 00 00 
    1048:	10 5b 04    	goto      0x5b10 <__U1TXInterrupt>
    104a:	00 00 00 
    104c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    110a:	00 00 00 
    110c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    110e:	00 00 00 
    1110:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1112:	00 00 00 
    1114:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1116:	00 00 00 
    1118:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    111a:	00 00 00 
    111c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    111e:	00 00 00 
    1120:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1122:	00 00 00 
    1124:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1126:	00 00 00 
    1128:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    112a:	00 00 00 
    112c:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    112e:	00 00 00 
    1130:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1132:	00 00 00 

00001134 <__DEFAULT_VECTOR>:
    1134:	28 5c 04    	goto      0x5c28 <__DefaultInterrupt>
    1136:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	34 11 00    	nop       
  10:	34 11 00    	nop       
  12:	34 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	28 10 00    	nop       
  1e:	2c 10 00    	nop       
  20:	30 10 00    	nop       
  22:	34 10 00    	nop       
  24:	38 10 00    	nop       
  26:	3c 10 00    	nop       
  28:	40 10 00    	nop       
  2a:	44 10 00    	nop       
  2c:	48 10 00    	nop       
  2e:	4c 10 00    	nop       
  30:	50 10 00    	nop       
  32:	34 11 00    	nop       
  34:	54 10 00    	nop       
  36:	58 10 00    	nop       
  38:	5c 10 00    	nop       
  3a:	60 10 00    	nop       
  3c:	64 10 00    	nop       
  3e:	34 11 00    	nop       
  40:	68 10 00    	nop       
  42:	6c 10 00    	nop       
  44:	70 10 00    	nop       
  46:	74 10 00    	nop       
  48:	78 10 00    	nop       
  4a:	7c 10 00    	nop       
  4c:	80 10 00    	nop       
  4e:	84 10 00    	nop       
  50:	88 10 00    	nop       
  52:	8c 10 00    	nop       
  54:	90 10 00    	nop       
  56:	94 10 00    	nop       
  58:	34 11 00    	nop       
  5a:	34 11 00    	nop       
  5c:	98 10 00    	nop       
  5e:	9c 10 00    	nop       
  60:	a0 10 00    	nop       
  62:	a4 10 00    	nop       
  64:	a8 10 00    	nop       
  66:	ac 10 00    	nop       
  68:	b0 10 00    	nop       
  6a:	b4 10 00    	nop       
  6c:	b8 10 00    	nop       
  6e:	bc 10 00    	nop       
  70:	c0 10 00    	nop       
  72:	34 11 00    	nop       
  74:	34 11 00    	nop       
  76:	c4 10 00    	nop       
  78:	c8 10 00    	nop       
  7a:	34 11 00    	nop       
  7c:	34 11 00    	nop       
  7e:	cc 10 00    	nop       
  80:	d0 10 00    	nop       
  82:	34 11 00    	nop       
  84:	34 11 00    	nop       
  86:	34 11 00    	nop       
  88:	34 11 00    	nop       
  8a:	34 11 00    	nop       
  8c:	34 11 00    	nop       
  8e:	d4 10 00    	nop       
  90:	d8 10 00    	nop       
  92:	34 11 00    	nop       
  94:	34 11 00    	nop       
  96:	dc 10 00    	nop       
  98:	e0 10 00    	nop       
  9a:	e4 10 00    	nop       
  9c:	34 11 00    	nop       
  9e:	34 11 00    	nop       
  a0:	34 11 00    	nop       
  a2:	34 11 00    	nop       
  a4:	e8 10 00    	nop       
  a6:	34 11 00    	nop       
  a8:	34 11 00    	nop       
  aa:	34 11 00    	nop       
  ac:	34 11 00    	nop       
  ae:	ec 10 00    	nop       
  b0:	f0 10 00    	nop       
  b2:	f4 10 00    	nop       
  b4:	34 11 00    	nop       
  b6:	f8 10 00    	nop       
  b8:	fc 10 00    	nop       
  ba:	00 11 00    	nop       
  bc:	34 11 00    	nop       
  be:	34 11 00    	nop       
  c0:	04 11 00    	nop       
  c2:	08 11 00    	nop       
  c4:	0c 11 00    	nop       
  c6:	10 11 00    	nop       
  c8:	34 11 00    	nop       
  ca:	34 11 00    	nop       
  cc:	14 11 00    	nop       
  ce:	18 11 00    	nop       
  d0:	34 11 00    	nop       
  d2:	34 11 00    	nop       
  d4:	34 11 00    	nop       
  d6:	34 11 00    	nop       
  d8:	34 11 00    	nop       
  da:	34 11 00    	nop       
  dc:	1c 11 00    	nop       
  de:	34 11 00    	nop       
  e0:	34 11 00    	nop       
  e2:	20 11 00    	nop       
  e4:	24 11 00    	nop       
  e6:	28 11 00    	nop       
  e8:	2c 11 00    	nop       
  ea:	34 11 00    	nop       
  ec:	34 11 00    	nop       
  ee:	34 11 00    	nop       
  f0:	34 11 00    	nop       
  f2:	34 11 00    	nop       
  f4:	34 11 00    	nop       
  f6:	34 11 00    	nop       
  f8:	34 11 00    	nop       
  fa:	34 11 00    	nop       
  fc:	34 11 00    	nop       
  fe:	30 11 00    	nop       
Disassembly of section .const:

00009440 <.LC0>:
    9440:	55 49       	.word 0x4955
    9442:	00 50       	.word 0x5000

00009443 <.LC1>:
    9443:	00 00       	.word 0
    9445:	00 00       	.word 0

00009447 <.LC2>:
    9447:	00 00       	.word 0
    9449:	00 00       	.word 0
    944b:	00 00       	.word 0

0000944d <.LC3>:
    944d:	00 00       	.word 0
    944f:	00 00       	.word 0
    9451:	00 00       	.word 0

00009453 <.LC4>:
    9453:	00 00       	.word 0
    9455:	00 00       	.word 0
    9457:	00 00       	.word 0

00009459 <.LC5>:
    9459:	00 00       	.word 0
    945b:	00 00       	.word 0
	...

0000945e <.LC6>:
    945e:	44 49       	.word 0x4944
    9460:	47 4f       	.word 0x4f47
    9462:	55 54       	.word 0x5455
    9464:	00 42       	.word 0x4200

00009465 <.LC7>:
    9465:	00 00       	.word 0
    9467:	00 00       	.word 0

00009469 <.LC8>:
    9469:	00 00       	.word 0
    946b:	00 00       	.word 0
    946d:	00 00       	.word 0

0000946f <.LC9>:
    946f:	00 00       	.word 0
    9471:	00 00       	.word 0
	...

00009474 <.LC10>:
    9474:	4c 45       	.word 0x454c
    9476:	44 31       	.word 0x3144
    9478:	3f 00       	.word 0x3f

0000947a <.LC11>:
    947a:	4c 45       	.word 0x454c
    947c:	44 32       	.word 0x3244
    947e:	00 4c       	.word 0x4c00

0000947f <.LC12>:
    947f:	00 00       	.word 0
    9481:	00 00       	.word 0
    9483:	00 00       	.word 0

00009485 <.LC13>:
    9485:	00 00       	.word 0
    9487:	00 00       	.word 0
	...

0000948a <.LC14>:
    948a:	4c 45       	.word 0x454c
    948c:	44 33       	.word 0x3344
    948e:	3f 00       	.word 0x3f

00009490 <.LC15>:
    9490:	53 57       	.word 0x5753
    9492:	31 3f       	.word 0x3f31
    9494:	00 45       	.word 0x4500

00009495 <.LC16>:
    9495:	00 00       	.word 0
    9497:	00 00       	.word 0
    9499:	00 00       	.word 0
	...

0000949c <.LC17>:
    949c:	45 4e       	.word 0x4e45
    949e:	41 31       	.word 0x3141
    94a0:	32 56       	.word 0x5632
    94a2:	3f 00       	.word 0x3f

000094a4 <.LC18>:
    94a4:	44 41       	.word 0x4144
    94a6:	43 31       	.word 0x3143
    94a8:	00 44       	.word 0x4400

000094a9 <.LC19>:
    94a9:	00 00       	.word 0
    94ab:	00 00       	.word 0
    94ad:	00 00       	.word 0

000094af <.LC20>:
    94af:	00 00       	.word 0
    94b1:	00 00       	.word 0
	...

000094b4 <.LC21>:
    94b4:	44 41       	.word 0x4144
    94b6:	43 32       	.word 0x3243
    94b8:	3f 00       	.word 0x3f

000094ba <.LC22>:
    94ba:	44 49       	.word 0x4944
    94bc:	46 46       	.word 0x4646
    94be:	00 44       	.word 0x4400

000094bf <.LC23>:
    94bf:	00 00       	.word 0
    94c1:	00 00       	.word 0
    94c3:	00 00       	.word 0

000094c5 <.LC24>:
    94c5:	00 00       	.word 0
    94c7:	00 00       	.word 0
	...

000094ca <.LC25>:
    94ca:	44 41       	.word 0x4144
    94cc:	43 30       	.word 0x3043
    94ce:	3f 00       	.word 0x3f

000094d0 <.LC26>:
    94d0:	44 41       	.word 0x4144
    94d2:	43 33       	.word 0x3343
    94d4:	00 44       	.word 0x4400

000094d5 <.LC27>:
    94d5:	00 00       	.word 0
    94d7:	00 00       	.word 0
    94d9:	00 00       	.word 0

000094db <.LC28>:
    94db:	00 00       	.word 0
    94dd:	00 00       	.word 0

000094df <.LC29>:
    94df:	00 00       	.word 0
    94e1:	00 00       	.word 0
	...

000094e4 <.LC30>:
    94e4:	43 48       	.word 0x4843
    94e6:	32 00       	.word 0x32

000094e8 <.LC31>:
    94e8:	43 48       	.word 0x4843
    94ea:	32 3f       	.word 0x3f32
    94ec:	00 43       	.word 0x4300

000094ed <.LC32>:
    94ed:	00 00       	.word 0
    94ef:	00 00       	.word 0
    94f1:	00 00       	.word 0
    94f3:	00 00       	.word 0

000094f5 <.LC33>:
    94f5:	00 00       	.word 0
    94f7:	00 00       	.word 0
    94f9:	00 00       	.word 0
    94fb:	00 00       	.word 0

000094fd <.LC34>:
    94fd:	00 00       	.word 0
    94ff:	00 00       	.word 0
    9501:	00 00       	.word 0

00009503 <.LC35>:
    9503:	00 00       	.word 0
    9505:	00 00       	.word 0
    9507:	00 00       	.word 0
    9509:	00 00       	.word 0
	...

0000950c <.LC36>:
    950c:	50 4f       	.word 0x4f50
    950e:	52 54       	.word 0x5452
    9510:	44 00       	.word 0x44

00009512 <.LC37>:
    9512:	50 4f       	.word 0x4f50
    9514:	52 54       	.word 0x5452
    9516:	44 3f       	.word 0x3f44
    9518:	00 52       	.word 0x5200

00009519 <.LC38>:
    9519:	00 00       	.word 0
    951b:	00 00       	.word 0

0000951d <.LC39>:
    951d:	00 00       	.word 0
    951f:	00 00       	.word 0
	...

00009522 <.LC40>:
    9522:	52 44       	.word 0x4452
    9524:	31 00       	.word 0x31

00009526 <.LC41>:
    9526:	52 44       	.word 0x4452
    9528:	31 3f       	.word 0x3f31
    952a:	00 52       	.word 0x5200

0000952b <.LC42>:
    952b:	00 00       	.word 0
    952d:	00 00       	.word 0

0000952f <.LC43>:
    952f:	00 00       	.word 0
    9531:	00 00       	.word 0
	...

00009534 <.LC44>:
    9534:	52 44       	.word 0x4452
    9536:	33 00       	.word 0x33

00009538 <.LC45>:
    9538:	52 44       	.word 0x4452
    953a:	33 3f       	.word 0x3f33
    953c:	00 52       	.word 0x5200

0000953d <.LC46>:
    953d:	00 00       	.word 0
    953f:	00 00       	.word 0

00009541 <.LC47>:
    9541:	00 00       	.word 0
    9543:	00 00       	.word 0
	...

00009546 <.LC48>:
    9546:	52 44       	.word 0x4452
    9548:	35 00       	.word 0x35

0000954a <.LC49>:
    954a:	52 44       	.word 0x4452
    954c:	35 3f       	.word 0x3f35
    954e:	00 52       	.word 0x5200

0000954f <.LC50>:
    954f:	00 00       	.word 0
    9551:	00 00       	.word 0

00009553 <.LC51>:
    9553:	00 00       	.word 0
    9555:	00 00       	.word 0
	...

00009558 <.LC52>:
    9558:	50 4f       	.word 0x4f50
    955a:	52 54       	.word 0x5452
    955c:	45 00       	.word 0x45

0000955e <.LC53>:
    955e:	50 4f       	.word 0x4f50
    9560:	52 54       	.word 0x5452
    9562:	45 3f       	.word 0x3f45
    9564:	00 52       	.word 0x5200

00009565 <.LC54>:
    9565:	00 00       	.word 0
    9567:	00 00       	.word 0

00009569 <.LC55>:
    9569:	00 00       	.word 0
    956b:	00 00       	.word 0
	...

0000956e <.LC56>:
    956e:	52 45       	.word 0x4552
    9570:	31 00       	.word 0x31

00009572 <.LC57>:
    9572:	52 45       	.word 0x4552
    9574:	31 3f       	.word 0x3f31
    9576:	00 52       	.word 0x5200

00009577 <.LC58>:
    9577:	00 00       	.word 0
    9579:	00 00       	.word 0

0000957b <.LC59>:
    957b:	00 00       	.word 0
    957d:	00 00       	.word 0
	...

00009580 <.LC60>:
    9580:	52 45       	.word 0x4552
    9582:	33 00       	.word 0x33

00009584 <.LC61>:
    9584:	52 45       	.word 0x4552
    9586:	33 3f       	.word 0x3f33
    9588:	00 52       	.word 0x5200

00009589 <.LC62>:
    9589:	00 00       	.word 0
    958b:	00 00       	.word 0

0000958d <.LC63>:
    958d:	00 00       	.word 0
    958f:	00 00       	.word 0
	...

00009592 <.LC64>:
    9592:	52 45       	.word 0x4552
    9594:	35 00       	.word 0x35

00009596 <.LC65>:
    9596:	52 45       	.word 0x4552
    9598:	35 3f       	.word 0x3f35
    959a:	00 52       	.word 0x5200

0000959b <.LC66>:
    959b:	00 00       	.word 0
    959d:	00 00       	.word 0

0000959f <.LC67>:
    959f:	00 00       	.word 0
    95a1:	00 00       	.word 0
	...

000095a4 <.LC68>:
    95a4:	53 45       	.word 0x4553
    95a6:	54 00       	.word 0x54

000095a8 <.LC69>:
    95a8:	43 4c       	.word 0x4c43
    95aa:	45 41       	.word 0x4145
    95ac:	52 00       	.word 0x52

000095ae <.LC70>:
    95ae:	54 4f       	.word 0x4f54
    95b0:	47 47       	.word 0x4747
    95b2:	4c 45       	.word 0x454c
    95b4:	00 57       	.word 0x5700

000095b5 <.LC71>:
    95b5:	00 00       	.word 0
    95b7:	00 00       	.word 0
    95b9:	00 00       	.word 0

000095bb <.LC72>:
    95bb:	00 00       	.word 0
    95bd:	00 00       	.word 0
	...

000095c0 <.LC73>:
    95c0:	4f 44       	.word 0x444f
    95c2:	00 4f       	.word 0x4f00

000095c3 <.LC74>:
    95c3:	00 00       	.word 0
    95c5:	00 00       	.word 0

000095c7 <.LC75>:
    95c7:	00 00       	.word 0
    95c9:	00 00       	.word 0
    95cb:	00 00       	.word 0

000095cd <.LC76>:
    95cd:	00 00       	.word 0
    95cf:	00 00       	.word 0
    95d1:	00 00       	.word 0
	...

000095d4 <.LC77>:
    95d4:	50 45       	.word 0x4550
    95d6:	52 49       	.word 0x4952
    95d8:	4f 44       	.word 0x444f
    95da:	3f 00       	.word 0x3f

000095dc <.LC78>:
    95dc:	44 55       	.word 0x5544
    95de:	54 59       	.word 0x5954
    95e0:	00 44       	.word 0x4400

000095e1 <.LC79>:
    95e1:	00 00       	.word 0
    95e3:	00 00       	.word 0
    95e5:	00 00       	.word 0

000095e7 <.LC80>:
    95e7:	00 00       	.word 0
    95e9:	00 00       	.word 0
    95eb:	00 00       	.word 0

000095ed <.LC81>:
    95ed:	00 00       	.word 0
    95ef:	00 00       	.word 0
    95f1:	00 00       	.word 0
	...

000095f4 <.LC82>:
    95f4:	54 31       	.word 0x3154
    95f6:	50 45       	.word 0x4550
    95f8:	52 49       	.word 0x4952
    95fa:	4f 44       	.word 0x444f
    95fc:	00 54       	.word 0x5400

000095fd <.LC83>:
    95fd:	00 00       	.word 0
    95ff:	00 00       	.word 0
    9601:	00 00       	.word 0
    9603:	00 00       	.word 0
    9605:	00 00       	.word 0

00009607 <.LC84>:
    9607:	00 00       	.word 0
    9609:	00 00       	.word 0
    960b:	00 00       	.word 0

0000960d <.LC85>:
    960d:	00 00       	.word 0
    960f:	00 00       	.word 0
    9611:	00 00       	.word 0
	...

00009614 <.LC86>:
    9614:	46 4f       	.word 0x4f46
    9616:	52 57       	.word 0x5752
    9618:	41 52       	.word 0x5241
    961a:	44 00       	.word 0x44

0000961c <.LC87>:
    961c:	45 52       	.word 0x5245
    961e:	41 53       	.word 0x5341
    9620:	45 00       	.word 0x45

00009622 <.LC88>:
    9622:	3a 2c       	.word 0x2c3a
    9624:	20 00       	.word 0x20

00009626 <.LC89>:
    9626:	4f 4e       	.word 0x4e4f
    9628:	00 4f       	.word 0x4f00

00009629 <.LC90>:
    9629:	00 00       	.word 0
    962b:	00 00       	.word 0

0000962d <.LC91>:
    962d:	00 00       	.word 0
    962f:	00 00       	.word 0
    9631:	00 00       	.word 0
	...

00009634 <.LC92>:
    9634:	31 0d       	.word 0xd31
    9636:	0a 00       	.word 0xa

00009638 <.LC93>:
    9638:	30 0d       	.word 0xd30
    963a:	0a 00       	.word 0xa

0000963c <.LC94>:
    963c:	0d 0a       	.word 0xa0d
    963e:	00 2c       	.word 0x2c00

0000963f <.LC95>:
    963f:	00 00       	.word 0
	...

00009642 <.LC96>:
    9642:	25 53       	.word 0x5325
    9644:	54 52       	.word 0x5254
    9646:	45 41       	.word 0x4145
    9648:	4d 5f       	.word 0x5f4d
    964a:	4f 50       	.word 0x504f
    964c:	45 4e       	.word 0x4e45
    964e:	25 00       	.word 0x25

00009650 <.LC97>:
    9650:	25 44       	.word 0x4425
    9652:	49 53       	.word 0x5349
    9654:	43 4f       	.word 0x4f43
    9656:	4e 4e       	.word 0x4e4e
    9658:	45 43       	.word 0x4345
    965a:	54 25       	.word 0x2554
    965c:	00 00       	.word 0

0000965e <_Device>:
    965e:	12 01       	.word 0x112
    9660:	00 02       	.word 0x200
    9662:	02 00       	.word 0x2
    9664:	00 40       	.word 0x4000
    9666:	66 66       	.word 0x6666
    9668:	c2 cd       	.word 0xcdc2
    966a:	00 00       	.word 0
    966c:	01 02       	.word 0x201
    966e:	00 01       	.word 0x100

00009670 <_Configuration1>:
    9670:	09 02       	.word 0x209
    9672:	43 00       	.word 0x43
    9674:	02 01       	.word 0x102
    9676:	00 a0       	.word 0xa000
    9678:	32 09       	.word 0x932
    967a:	04 00       	.word 0x4
    967c:	00 01       	.word 0x100
    967e:	02 02       	.word 0x202
    9680:	00 00       	.word 0
    9682:	05 24       	.word 0x2405
    9684:	00 10       	.word 0x1000
    9686:	01 04       	.word 0x401
    9688:	24 02       	.word 0x224
    968a:	02 05       	.word 0x502
    968c:	24 06       	.word 0x624
    968e:	00 01       	.word 0x100
    9690:	05 24       	.word 0x2405
    9692:	01 01       	.word 0x101
    9694:	01 07       	.word 0x701
    9696:	05 81       	.word 0x8105
    9698:	03 0a       	.word 0xa03
    969a:	00 40       	.word 0x4000
    969c:	09 04       	.word 0x409
    969e:	01 00       	.word 0x1
    96a0:	02 0a       	.word 0xa02
    96a2:	00 00       	.word 0
    96a4:	00 07       	.word 0x700
    96a6:	05 02       	.word 0x205
    96a8:	02 40       	.word 0x4002
    96aa:	00 00       	.word 0
    96ac:	07 05       	.word 0x507
    96ae:	82 02       	.word 0x282
    96b0:	40 00       	.word 0x40
    96b2:	00 00       	.word 0

000096b4 <_Configurations>:
    96b4:	70 96       	.word 0x9670

000096b6 <_String0>:
    96b6:	04 03       	.word 0x304
    96b8:	09 04       	.word 0x409

000096ba <_String1>:
    96ba:	1a 03       	.word 0x31a
    96bc:	4f 00       	.word 0x4f
    96be:	6c 00       	.word 0x6c
    96c0:	69 00       	.word 0x69
    96c2:	6e 00       	.word 0x6e
    96c4:	20 00       	.word 0x20
    96c6:	43 00       	.word 0x43
    96c8:	6f 00       	.word 0x6f
    96ca:	6c 00       	.word 0x6c
    96cc:	6c 00       	.word 0x6c
    96ce:	65 00       	.word 0x65
    96d0:	67 00       	.word 0x67
    96d2:	65 00       	.word 0x65

000096d4 <_String2>:
    96d4:	36 03       	.word 0x336
    96d6:	50 00       	.word 0x50
    96d8:	49 00       	.word 0x49
    96da:	43 00       	.word 0x43
    96dc:	32 00       	.word 0x32
    96de:	34 00       	.word 0x34
    96e0:	46 00       	.word 0x46
    96e2:	4a 00       	.word 0x4a
    96e4:	31 00       	.word 0x31
    96e6:	32 00       	.word 0x32
    96e8:	38 00       	.word 0x38
    96ea:	47 00       	.word 0x47
    96ec:	43 00       	.word 0x43
    96ee:	30 00       	.word 0x30
    96f0:	30 00       	.word 0x30
    96f2:	36 00       	.word 0x36
    96f4:	20 00       	.word 0x20
    96f6:	43 00       	.word 0x43
    96f8:	44 00       	.word 0x44
    96fa:	43 00       	.word 0x43
    96fc:	20 00       	.word 0x20
    96fe:	44 00       	.word 0x44
    9700:	65 00       	.word 0x65
    9702:	76 00       	.word 0x76
    9704:	69 00       	.word 0x69
    9706:	63 00       	.word 0x63
    9708:	65 00       	.word 0x65

0000970a <_Strings>:
    970a:	b6 96       	.word 0x96b6
    970c:	ba 96       	.word 0x96ba
    970e:	d4 96       	.word 0x96d4
Disassembly of section .text:

00001710 <_str2hex>:
                                  { "WRITE", flash_write_handler }};

#define FLASH_TABLE_ENTRIES     sizeof(flash_table) / sizeof(DISPATCH_ENTRY_T)

int16_t str2hex(char *str, uint16_t *num) {
    1710:	04 00 fa    	lnk       #0x4
    1712:	00 0f 78    	mov.w     w0, [w14]
    1714:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    1716:	1e 00 78    	mov.w     [w14], w0
    1718:	00 00 e0    	cp0.w     w0
    171a:	04 00 3a    	bra       NZ, 0x1724 <.L12>
        return -1;
    171c:	00 80 eb    	setm.w    w0
    171e:	5a 00 37    	bra       0x17d4 <.L3>

00001720 <.L5>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    1720:	1e 0f e8    	inc.w     [w14], [w14]
    1722:	01 00 37    	bra       0x1726 <.L4>

00001724 <.L12>:
    1724:	00 00 00    	nop       

00001726 <.L4>:
    1726:	1e 00 78    	mov.w     [w14], w0
    1728:	90 40 78    	mov.b     [w0], w1
    172a:	00 c2 b3    	mov.b     #0x20, w0
    172c:	80 cf 50    	sub.b     w1, w0, [w15]
    172e:	f8 ff 32    	bra       Z, 0x1720 <.L5>
    1730:	1e 00 78    	mov.w     [w14], w0
    1732:	10 40 78    	mov.b     [w0], w0
    1734:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    1736:	f4 ff 32    	bra       Z, 0x1720 <.L5>

    *num = 0;
    1738:	1e 00 90    	mov.w     [w14+2], w0
    173a:	80 00 eb    	clr.w     w1
    173c:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    173e:	45 00 37    	bra       0x17ca <.L6>

00001740 <.L11>:
        if ((*str >= '0') && (*str <= '9'))
    1740:	1e 00 78    	mov.w     [w14], w0
    1742:	90 40 78    	mov.b     [w0], w1
    1744:	f0 c2 b3    	mov.b     #0x2f, w0
    1746:	80 cf 50    	sub.b     w1, w0, [w15]
    1748:	11 00 34    	bra       LE, 0x176c <.L7>
    174a:	1e 00 78    	mov.w     [w14], w0
    174c:	90 40 78    	mov.b     [w0], w1
    174e:	90 c3 b3    	mov.b     #0x39, w0
    1750:	80 cf 50    	sub.b     w1, w0, [w15]
    1752:	0c 00 3c    	bra       GT, 0x176c <.L7>
            *num = (*num << 4) + (*str - '0');
    1754:	1e 00 90    	mov.w     [w14+2], w0
    1756:	10 00 78    	mov.w     [w0], w0
    1758:	c4 00 dd    	sl.w      w0, #0x4, w1
    175a:	1e 00 78    	mov.w     [w14], w0
    175c:	10 40 78    	mov.b     [w0], w0
    175e:	00 00 fb    	se        w0, w0
    1760:	00 80 40    	add.w     w1, w0, w0
    1762:	01 fd 2f    	mov.w     #0xffd0, w1
    1764:	80 80 40    	add.w     w1, w0, w1
    1766:	1e 00 90    	mov.w     [w14+2], w0
    1768:	01 08 78    	mov.w     w1, [w0]
    176a:	2e 00 37    	bra       0x17c8 <.L8>

0000176c <.L7>:
        else if ((*str >= 'a') && (*str <= 'f'))
    176c:	1e 00 78    	mov.w     [w14], w0
    176e:	90 40 78    	mov.b     [w0], w1
    1770:	00 c6 b3    	mov.b     #0x60, w0
    1772:	80 cf 50    	sub.b     w1, w0, [w15]
    1774:	11 00 34    	bra       LE, 0x1798 <.L9>
    1776:	1e 00 78    	mov.w     [w14], w0
    1778:	90 40 78    	mov.b     [w0], w1
    177a:	60 c6 b3    	mov.b     #0x66, w0
    177c:	80 cf 50    	sub.b     w1, w0, [w15]
    177e:	0c 00 3c    	bra       GT, 0x1798 <.L9>
            *num = (*num << 4) + 10 + (*str - 'a');
    1780:	1e 00 90    	mov.w     [w14+2], w0
    1782:	10 00 78    	mov.w     [w0], w0
    1784:	c4 00 dd    	sl.w      w0, #0x4, w1
    1786:	1e 00 78    	mov.w     [w14], w0
    1788:	10 40 78    	mov.b     [w0], w0
    178a:	00 00 fb    	se        w0, w0
    178c:	00 80 40    	add.w     w1, w0, w0
    178e:	91 fa 2f    	mov.w     #0xffa9, w1
    1790:	80 80 40    	add.w     w1, w0, w1
    1792:	1e 00 90    	mov.w     [w14+2], w0
    1794:	01 08 78    	mov.w     w1, [w0]
    1796:	18 00 37    	bra       0x17c8 <.L8>

00001798 <.L9>:
        else if ((*str >= 'A') && (*str <= 'F'))
    1798:	1e 00 78    	mov.w     [w14], w0
    179a:	90 40 78    	mov.b     [w0], w1
    179c:	00 c4 b3    	mov.b     #0x40, w0
    179e:	80 cf 50    	sub.b     w1, w0, [w15]
    17a0:	11 00 34    	bra       LE, 0x17c4 <.L10>
    17a2:	1e 00 78    	mov.w     [w14], w0
    17a4:	90 40 78    	mov.b     [w0], w1
    17a6:	60 c4 b3    	mov.b     #0x46, w0
    17a8:	80 cf 50    	sub.b     w1, w0, [w15]
    17aa:	0c 00 3c    	bra       GT, 0x17c4 <.L10>
            *num = (*num << 4) + 10 + (*str - 'A');
    17ac:	1e 00 90    	mov.w     [w14+2], w0
    17ae:	10 00 78    	mov.w     [w0], w0
    17b0:	c4 00 dd    	sl.w      w0, #0x4, w1
    17b2:	1e 00 78    	mov.w     [w14], w0
    17b4:	10 40 78    	mov.b     [w0], w0
    17b6:	00 00 fb    	se        w0, w0
    17b8:	00 80 40    	add.w     w1, w0, w0
    17ba:	91 fc 2f    	mov.w     #0xffc9, w1
    17bc:	80 80 40    	add.w     w1, w0, w1
    17be:	1e 00 90    	mov.w     [w14+2], w0
    17c0:	01 08 78    	mov.w     w1, [w0]
    17c2:	02 00 37    	bra       0x17c8 <.L8>

000017c4 <.L10>:
        else
            return -1;
    17c4:	00 80 eb    	setm.w    w0
    17c6:	06 00 37    	bra       0x17d4 <.L3>

000017c8 <.L8>:
        str++;
    17c8:	1e 0f e8    	inc.w     [w14], [w14]

000017ca <.L6>:
    17ca:	1e 00 78    	mov.w     [w14], w0
    17cc:	10 40 78    	mov.b     [w0], w0
    17ce:	00 04 e0    	cp0.b     w0
    17d0:	b7 ff 3a    	bra       NZ, 0x1740 <.L11>
    }
    return 0;
    17d2:	00 00 eb    	clr.w     w0

000017d4 <.L3>:
}
    17d4:	00 80 fa    	ulnk      
    17d6:	00 00 06    	return    

000017d8 <_str2num>:

int16_t str2num(char *str, uint16_t *num) {
    17d8:	04 00 fa    	lnk       #0x4
    17da:	00 0f 78    	mov.w     w0, [w14]
    17dc:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    17de:	1e 00 78    	mov.w     [w14], w0
    17e0:	00 00 e0    	cp0.w     w0
    17e2:	04 00 3a    	bra       NZ, 0x17ec <.L21>
        return -1;
    17e4:	00 80 eb    	setm.w    w0
    17e6:	2f 00 37    	bra       0x1846 <.L15>

000017e8 <.L17>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    17e8:	1e 0f e8    	inc.w     [w14], [w14]
    17ea:	01 00 37    	bra       0x17ee <.L16>

000017ec <.L21>:
    17ec:	00 00 00    	nop       

000017ee <.L16>:
    17ee:	1e 00 78    	mov.w     [w14], w0
    17f0:	90 40 78    	mov.b     [w0], w1
    17f2:	00 c2 b3    	mov.b     #0x20, w0
    17f4:	80 cf 50    	sub.b     w1, w0, [w15]
    17f6:	f8 ff 32    	bra       Z, 0x17e8 <.L17>
    17f8:	1e 00 78    	mov.w     [w14], w0
    17fa:	10 40 78    	mov.b     [w0], w0
    17fc:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    17fe:	f4 ff 32    	bra       Z, 0x17e8 <.L17>

    *num = 0;
    1800:	1e 00 90    	mov.w     [w14+2], w0
    1802:	80 00 eb    	clr.w     w1
    1804:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    1806:	1a 00 37    	bra       0x183c <.L18>

00001808 <.L20>:
        if ((*str >= '0') && (*str <= '9'))
    1808:	1e 00 78    	mov.w     [w14], w0
    180a:	90 40 78    	mov.b     [w0], w1
    180c:	f0 c2 b3    	mov.b     #0x2f, w0
    180e:	80 cf 50    	sub.b     w1, w0, [w15]
    1810:	13 00 34    	bra       LE, 0x1838 <.L19>
    1812:	1e 00 78    	mov.w     [w14], w0
    1814:	90 40 78    	mov.b     [w0], w1
    1816:	90 c3 b3    	mov.b     #0x39, w0
    1818:	80 cf 50    	sub.b     w1, w0, [w15]
    181a:	0e 00 3c    	bra       GT, 0x1838 <.L19>
            *num = *num * 10 + (*str - '0');
    181c:	1e 00 90    	mov.w     [w14+2], w0
    181e:	10 00 78    	mov.w     [w0], w0
    1820:	6a 00 b9    	mul.su    w0, #0xa, w0
    1822:	80 00 78    	mov.w     w0, w1
    1824:	1e 00 78    	mov.w     [w14], w0
    1826:	10 40 78    	mov.b     [w0], w0
    1828:	00 00 fb    	se        w0, w0
    182a:	00 80 40    	add.w     w1, w0, w0
    182c:	01 fd 2f    	mov.w     #0xffd0, w1
    182e:	80 80 40    	add.w     w1, w0, w1
    1830:	1e 00 90    	mov.w     [w14+2], w0
    1832:	01 08 78    	mov.w     w1, [w0]
        else
            return -1;
        str++;
    1834:	1e 0f e8    	inc.w     [w14], [w14]
    1836:	02 00 37    	bra       0x183c <.L18>

00001838 <.L19>:
    1838:	00 80 eb    	setm.w    w0
    183a:	05 00 37    	bra       0x1846 <.L15>

0000183c <.L18>:
    183c:	1e 00 78    	mov.w     [w14], w0
    183e:	10 40 78    	mov.b     [w0], w0
    1840:	00 04 e0    	cp0.b     w0
    1842:	e2 ff 3a    	bra       NZ, 0x1808 <.L20>
    }
    return 0;
    1844:	00 00 eb    	clr.w     w0

00001846 <.L15>:
}
    1846:	00 80 fa    	ulnk      
    1848:	00 00 06    	return    

0000184a <_hex2str>:

void hex2str(uint16_t num, char *str) {
    184a:	08 00 fa    	lnk       #0x8
    184c:	20 07 98    	mov.w     w0, [w14+4]
    184e:	31 07 98    	mov.w     w1, [w14+6]
    uint16_t digit, i;

    for (i = 0; i < 4; i++) {
    1850:	00 00 eb    	clr.w     w0
    1852:	00 0f 78    	mov.w     w0, [w14]
    1854:	1a 00 37    	bra       0x188a <.L23>

00001856 <.L26>:
        digit = num >> 12;
    1856:	2e 00 90    	mov.w     [w14+4], w0
    1858:	4c 00 de    	lsr.w     w0, #0xc, w0
    185a:	10 07 98    	mov.w     w0, [w14+2]
        if (digit < 10)
    185c:	1e 00 90    	mov.w     [w14+2], w0
    185e:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1860:	07 00 3e    	bra       GTU, 0x1870 <.L24>
            *str = '0' + (uint8_t)digit;
    1862:	1e 00 90    	mov.w     [w14+2], w0
    1864:	00 40 78    	mov.b     w0, w0
    1866:	00 43 b0    	add.b     #0x30, w0
    1868:	80 40 78    	mov.b     w0, w1
    186a:	3e 00 90    	mov.w     [w14+6], w0
    186c:	01 48 78    	mov.b     w1, [w0]
    186e:	06 00 37    	bra       0x187c <.L25>

00001870 <.L24>:
        else
            *str = 'A' + (uint8_t)digit - 10;
    1870:	1e 00 90    	mov.w     [w14+2], w0
    1872:	00 40 78    	mov.b     w0, w0
    1874:	70 43 b0    	add.b     #0x37, w0
    1876:	80 40 78    	mov.b     w0, w1
    1878:	3e 00 90    	mov.w     [w14+6], w0
    187a:	01 48 78    	mov.b     w1, [w0]

0000187c <.L25>:
        str++;
    187c:	3e 00 90    	mov.w     [w14+6], w0
    187e:	00 00 e8    	inc.w     w0, w0
    1880:	30 07 98    	mov.w     w0, [w14+6]
        num = (num & 0x0FFF) << 4;
    1882:	2e 00 90    	mov.w     [w14+4], w0
    1884:	44 00 dd    	sl.w      w0, #0x4, w0
    1886:	20 07 98    	mov.w     w0, [w14+4]
    1888:	1e 0f e8    	inc.w     [w14], [w14]

0000188a <.L23>:
    188a:	1e 00 78    	mov.w     [w14], w0
    188c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    188e:	e3 ff 36    	bra       LEU, 0x1856 <.L26>
    }
    *str = '\0';
    1890:	3e 00 90    	mov.w     [w14+6], w0
    1892:	80 40 eb    	clr.b     w1
    1894:	01 48 78    	mov.b     w1, [w0]
}
    1896:	00 80 fa    	ulnk      
    1898:	00 00 06    	return    

0000189a <_hex2str_alt>:

void hex2str_alt(uint16_t num, char *str) {
    189a:	0a 00 fa    	lnk       #0xa
    189c:	30 07 98    	mov.w     w0, [w14+6]
    189e:	41 07 98    	mov.w     w1, [w14+8]
    uint16_t digit, i, hit_nonzero_digit = FALSE;
    18a0:	00 00 eb    	clr.w     w0
    18a2:	10 07 98    	mov.w     w0, [w14+2]

    for (i = 0; i < 4; i++) {
    18a4:	00 00 eb    	clr.w     w0
    18a6:	00 0f 78    	mov.w     w0, [w14]
    18a8:	25 00 37    	bra       0x18f4 <.L28>

000018aa <.L34>:
        digit = num >> 12;
    18aa:	3e 00 90    	mov.w     [w14+6], w0
    18ac:	4c 00 de    	lsr.w     w0, #0xc, w0
    18ae:	20 07 98    	mov.w     w0, [w14+4]
        if (digit)
    18b0:	2e 00 90    	mov.w     [w14+4], w0
    18b2:	00 00 e0    	cp0.w     w0
    18b4:	02 00 32    	bra       Z, 0x18ba <.L29>
            hit_nonzero_digit = TRUE;
    18b6:	10 00 20    	mov.w     #0x1, w0
    18b8:	10 07 98    	mov.w     w0, [w14+2]

000018ba <.L29>:
        if ((hit_nonzero_digit) || (i == 3)) {
    18ba:	1e 00 90    	mov.w     [w14+2], w0
    18bc:	00 00 e0    	cp0.w     w0
    18be:	03 00 3a    	bra       NZ, 0x18c6 <.L30>
    18c0:	1e 00 78    	mov.w     [w14], w0
    18c2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18c4:	13 00 3a    	bra       NZ, 0x18ec <.L31>

000018c6 <.L30>:
            if (digit < 10)
    18c6:	2e 00 90    	mov.w     [w14+4], w0
    18c8:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    18ca:	07 00 3e    	bra       GTU, 0x18da <.L32>
                *str = '0' + (uint8_t)digit;
    18cc:	2e 00 90    	mov.w     [w14+4], w0
    18ce:	00 40 78    	mov.b     w0, w0
    18d0:	00 43 b0    	add.b     #0x30, w0
    18d2:	80 40 78    	mov.b     w0, w1
    18d4:	4e 00 90    	mov.w     [w14+8], w0
    18d6:	01 48 78    	mov.b     w1, [w0]
    18d8:	06 00 37    	bra       0x18e6 <.L33>

000018da <.L32>:
            else
                *str = 'A' + (uint8_t)digit - 10;
    18da:	2e 00 90    	mov.w     [w14+4], w0
    18dc:	00 40 78    	mov.b     w0, w0
    18de:	70 43 b0    	add.b     #0x37, w0
    18e0:	80 40 78    	mov.b     w0, w1
    18e2:	4e 00 90    	mov.w     [w14+8], w0
    18e4:	01 48 78    	mov.b     w1, [w0]

000018e6 <.L33>:
            str++;
    18e6:	4e 00 90    	mov.w     [w14+8], w0
    18e8:	00 00 e8    	inc.w     w0, w0
    18ea:	40 07 98    	mov.w     w0, [w14+8]

000018ec <.L31>:
        }
        num = (num & 0x0FFF) << 4;
    18ec:	3e 00 90    	mov.w     [w14+6], w0
    18ee:	44 00 dd    	sl.w      w0, #0x4, w0
    18f0:	30 07 98    	mov.w     w0, [w14+6]
    18f2:	1e 0f e8    	inc.w     [w14], [w14]

000018f4 <.L28>:
    18f4:	1e 00 78    	mov.w     [w14], w0
    18f6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18f8:	d8 ff 36    	bra       LEU, 0x18aa <.L34>
    }
    *str = '\0';
    18fa:	4e 00 90    	mov.w     [w14+8], w0
    18fc:	80 40 eb    	clr.b     w1
    18fe:	01 48 78    	mov.b     w1, [w0]
}
    1900:	00 80 fa    	ulnk      
    1902:	00 00 06    	return    

00001904 <_str_cmp>:

int16_t str_cmp(char *str1, char *str2) {
    1904:	04 00 fa    	lnk       #0x4
    1906:	00 0f 78    	mov.w     w0, [w14]
    1908:	11 07 98    	mov.w     w1, [w14+2]
    while ((*str1) && (*str1 == *str2)) {
    190a:	04 00 37    	bra       0x1914 <.L36>

0000190c <.L38>:
        str1++;
    190c:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    190e:	1e 00 90    	mov.w     [w14+2], w0
    1910:	00 00 e8    	inc.w     w0, w0
    1912:	10 07 98    	mov.w     w0, [w14+2]

00001914 <.L36>:
    1914:	1e 00 78    	mov.w     [w14], w0
    1916:	10 40 78    	mov.b     [w0], w0
    1918:	00 04 e0    	cp0.b     w0
    191a:	06 00 32    	bra       Z, 0x1928 <.L37>
    191c:	1e 00 78    	mov.w     [w14], w0
    191e:	90 40 78    	mov.b     [w0], w1
    1920:	1e 00 90    	mov.w     [w14+2], w0
    1922:	10 40 78    	mov.b     [w0], w0
    1924:	80 cf 50    	sub.b     w1, w0, [w15]
    1926:	f2 ff 32    	bra       Z, 0x190c <.L38>

00001928 <.L37>:
    }

    if (*str1 == *str2)
    1928:	1e 00 78    	mov.w     [w14], w0
    192a:	90 40 78    	mov.b     [w0], w1
    192c:	1e 00 90    	mov.w     [w14+2], w0
    192e:	10 40 78    	mov.b     [w0], w0
    1930:	80 cf 50    	sub.b     w1, w0, [w15]
    1932:	02 00 3a    	bra       NZ, 0x1938 <.L39>
        return 0;
    1934:	00 00 eb    	clr.w     w0
    1936:	09 00 37    	bra       0x194a <.L40>

00001938 <.L39>:
    else if (*str1 < *str2)
    1938:	1e 00 78    	mov.w     [w14], w0
    193a:	90 40 78    	mov.b     [w0], w1
    193c:	1e 00 90    	mov.w     [w14+2], w0
    193e:	10 40 78    	mov.b     [w0], w0
    1940:	80 cf 50    	sub.b     w1, w0, [w15]
    1942:	02 00 3d    	bra       GE, 0x1948 <.L41>
        return -1;
    1944:	00 80 eb    	setm.w    w0
    1946:	01 00 37    	bra       0x194a <.L40>

00001948 <.L41>:
    else
        return 1;
    1948:	10 00 20    	mov.w     #0x1, w0

0000194a <.L40>:
}
    194a:	00 80 fa    	ulnk      
    194c:	00 00 06    	return    

0000194e <_str_ncmp>:

int16_t str_ncmp(char *str1, char *str2, uint16_t n) {
    194e:	06 00 fa    	lnk       #0x6
    1950:	00 0f 78    	mov.w     w0, [w14]
    1952:	11 07 98    	mov.w     w1, [w14+2]
    1954:	22 07 98    	mov.w     w2, [w14+4]
    if (n == 0)
    1956:	2e 00 90    	mov.w     [w14+4], w0
    1958:	00 00 e0    	cp0.w     w0
    195a:	07 00 3a    	bra       NZ, 0x196a <.L50>
        return 0;
    195c:	00 00 eb    	clr.w     w0
    195e:	2b 00 37    	bra       0x19b6 <.L44>

00001960 <.L47>:

    while ((*str1) && (*str2) && (*str1 == *str2) && (--n)) {
        str1++;
    1960:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    1962:	1e 00 90    	mov.w     [w14+2], w0
    1964:	00 00 e8    	inc.w     w0, w0
    1966:	10 07 98    	mov.w     w0, [w14+2]
    1968:	01 00 37    	bra       0x196c <.L45>

0000196a <.L50>:
    196a:	00 00 00    	nop       

0000196c <.L45>:
    196c:	1e 00 78    	mov.w     [w14], w0
    196e:	10 40 78    	mov.b     [w0], w0
    1970:	00 04 e0    	cp0.b     w0
    1972:	10 00 32    	bra       Z, 0x1994 <.L46>
    1974:	1e 00 90    	mov.w     [w14+2], w0
    1976:	10 40 78    	mov.b     [w0], w0
    1978:	00 04 e0    	cp0.b     w0
    197a:	0c 00 32    	bra       Z, 0x1994 <.L46>
    197c:	1e 00 78    	mov.w     [w14], w0
    197e:	90 40 78    	mov.b     [w0], w1
    1980:	1e 00 90    	mov.w     [w14+2], w0
    1982:	10 40 78    	mov.b     [w0], w0
    1984:	80 cf 50    	sub.b     w1, w0, [w15]
    1986:	06 00 3a    	bra       NZ, 0x1994 <.L46>
    1988:	2e 00 90    	mov.w     [w14+4], w0
    198a:	00 00 e9    	dec.w     w0, w0
    198c:	20 07 98    	mov.w     w0, [w14+4]
    198e:	2e 00 90    	mov.w     [w14+4], w0
    1990:	00 00 e0    	cp0.w     w0
    1992:	e6 ff 3a    	bra       NZ, 0x1960 <.L47>

00001994 <.L46>:
    }

    if (*str1 == *str2)
    1994:	1e 00 78    	mov.w     [w14], w0
    1996:	90 40 78    	mov.b     [w0], w1
    1998:	1e 00 90    	mov.w     [w14+2], w0
    199a:	10 40 78    	mov.b     [w0], w0
    199c:	80 cf 50    	sub.b     w1, w0, [w15]
    199e:	02 00 3a    	bra       NZ, 0x19a4 <.L48>
        return 0;
    19a0:	00 00 eb    	clr.w     w0
    19a2:	09 00 37    	bra       0x19b6 <.L44>

000019a4 <.L48>:
    else if (*str1 < *str2)
    19a4:	1e 00 78    	mov.w     [w14], w0
    19a6:	90 40 78    	mov.b     [w0], w1
    19a8:	1e 00 90    	mov.w     [w14+2], w0
    19aa:	10 40 78    	mov.b     [w0], w0
    19ac:	80 cf 50    	sub.b     w1, w0, [w15]
    19ae:	02 00 3d    	bra       GE, 0x19b4 <.L49>
        return -1;
    19b0:	00 80 eb    	setm.w    w0
    19b2:	01 00 37    	bra       0x19b6 <.L44>

000019b4 <.L49>:
    else
        return 1;
    19b4:	10 00 20    	mov.w     #0x1, w0

000019b6 <.L44>:
}
    19b6:	00 80 fa    	ulnk      
    19b8:	00 00 06    	return    

000019ba <_str_tok_r>:

char *str_tok_r(char *str, char *delim, char **save_str) {
    19ba:	0c 00 fa    	lnk       #0xc
    19bc:	30 07 98    	mov.w     w0, [w14+6]
    19be:	41 07 98    	mov.w     w1, [w14+8]
    19c0:	52 07 98    	mov.w     w2, [w14+10]
    char *spos, *dpos, *token_start;

    if (!(str) && !(*save_str)) 
    19c2:	3e 00 90    	mov.w     [w14+6], w0
    19c4:	00 00 e0    	cp0.w     w0
    19c6:	06 00 3a    	bra       NZ, 0x19d4 <.L52>
    19c8:	5e 00 90    	mov.w     [w14+10], w0
    19ca:	10 00 78    	mov.w     [w0], w0
    19cc:	00 00 e0    	cp0.w     w0
    19ce:	02 00 3a    	bra       NZ, 0x19d4 <.L52>
        return (char *)NULL;
    19d0:	00 00 eb    	clr.w     w0
    19d2:	60 00 37    	bra       0x1a94 <.L53>

000019d4 <.L52>:

    // Find the first non-delimiter character in the string
    for (spos = (str) ? str : *save_str; *spos; spos++) {
    19d4:	3e 00 90    	mov.w     [w14+6], w0
    19d6:	00 00 e0    	cp0.w     w0
    19d8:	03 00 3a    	bra       NZ, 0x19e0 <.L54>
    19da:	5e 00 90    	mov.w     [w14+10], w0
    19dc:	10 00 78    	mov.w     [w0], w0
    19de:	01 00 37    	bra       0x19e2 <.L55>

000019e0 <.L54>:
    19e0:	3e 00 90    	mov.w     [w14+6], w0

000019e2 <.L55>:
    19e2:	00 0f 78    	mov.w     w0, [w14]
    19e4:	17 00 37    	bra       0x1a14 <.L56>

000019e6 <.L63>:
        for (dpos = delim; *dpos; dpos++) {
    19e6:	ce 00 90    	mov.w     [w14+8], w1
    19e8:	11 07 98    	mov.w     w1, [w14+2]
    19ea:	09 00 37    	bra       0x19fe <.L57>

000019ec <.L60>:
            if (*spos == *dpos)
    19ec:	1e 00 78    	mov.w     [w14], w0
    19ee:	90 40 78    	mov.b     [w0], w1
    19f0:	1e 00 90    	mov.w     [w14+2], w0
    19f2:	10 40 78    	mov.b     [w0], w0
    19f4:	80 cf 50    	sub.b     w1, w0, [w15]
    19f6:	08 00 32    	bra       Z, 0x1a08 <.L75>
    19f8:	1e 00 90    	mov.w     [w14+2], w0
    19fa:	00 00 e8    	inc.w     w0, w0
    19fc:	10 07 98    	mov.w     w0, [w14+2]

000019fe <.L57>:
    19fe:	1e 00 90    	mov.w     [w14+2], w0
    1a00:	10 40 78    	mov.b     [w0], w0
    1a02:	00 04 e0    	cp0.b     w0
    1a04:	f3 ff 3a    	bra       NZ, 0x19ec <.L60>
    1a06:	01 00 37    	bra       0x1a0a <.L59>

00001a08 <.L75>:
                break;
    1a08:	00 00 00    	nop       

00001a0a <.L59>:
        }
        if (*dpos == '\0')
    1a0a:	1e 00 90    	mov.w     [w14+2], w0
    1a0c:	10 40 78    	mov.b     [w0], w0
    1a0e:	00 04 e0    	cp0.b     w0
    1a10:	06 00 32    	bra       Z, 0x1a1e <.L76>
    1a12:	1e 0f e8    	inc.w     [w14], [w14]

00001a14 <.L56>:
    1a14:	1e 00 78    	mov.w     [w14], w0
    1a16:	10 40 78    	mov.b     [w0], w0
    1a18:	00 04 e0    	cp0.b     w0
    1a1a:	e5 ff 3a    	bra       NZ, 0x19e6 <.L63>
    1a1c:	01 00 37    	bra       0x1a20 <.L62>

00001a1e <.L76>:
            break;
    1a1e:	00 00 00    	nop       

00001a20 <.L62>:
    }
    if (*spos)
    1a20:	1e 00 78    	mov.w     [w14], w0
    1a22:	10 40 78    	mov.b     [w0], w0
    1a24:	00 04 e0    	cp0.b     w0
    1a26:	03 00 32    	bra       Z, 0x1a2e <.L64>
        token_start = spos;
    1a28:	9e 00 78    	mov.w     [w14], w1
    1a2a:	21 07 98    	mov.w     w1, [w14+4]
    else {
        *save_str = (char *)NULL;
        return (char *)NULL;
    }

    // Find the first delimiter character in the string
    for (; *spos; spos++) {
    1a2c:	1e 00 37    	bra       0x1a6a <.L65>

00001a2e <.L64>:
    1a2e:	5e 00 90    	mov.w     [w14+10], w0
    1a30:	80 00 eb    	clr.w     w1
    1a32:	01 08 78    	mov.w     w1, [w0]
    1a34:	00 00 eb    	clr.w     w0
    1a36:	2e 00 37    	bra       0x1a94 <.L53>

00001a38 <.L72>:
        for (dpos = delim; *dpos; dpos++) {
    1a38:	ce 00 90    	mov.w     [w14+8], w1
    1a3a:	11 07 98    	mov.w     w1, [w14+2]
    1a3c:	09 00 37    	bra       0x1a50 <.L66>

00001a3e <.L69>:
            if (*spos == *dpos)
    1a3e:	1e 00 78    	mov.w     [w14], w0
    1a40:	90 40 78    	mov.b     [w0], w1
    1a42:	1e 00 90    	mov.w     [w14+2], w0
    1a44:	10 40 78    	mov.b     [w0], w0
    1a46:	80 cf 50    	sub.b     w1, w0, [w15]
    1a48:	08 00 32    	bra       Z, 0x1a5a <.L77>
    1a4a:	1e 00 90    	mov.w     [w14+2], w0
    1a4c:	00 00 e8    	inc.w     w0, w0
    1a4e:	10 07 98    	mov.w     w0, [w14+2]

00001a50 <.L66>:
    1a50:	1e 00 90    	mov.w     [w14+2], w0
    1a52:	10 40 78    	mov.b     [w0], w0
    1a54:	00 04 e0    	cp0.b     w0
    1a56:	f3 ff 3a    	bra       NZ, 0x1a3e <.L69>
    1a58:	01 00 37    	bra       0x1a5c <.L68>

00001a5a <.L77>:
                break;
    1a5a:	00 00 00    	nop       

00001a5c <.L68>:
        }
        if (*spos == *dpos)
    1a5c:	1e 00 78    	mov.w     [w14], w0
    1a5e:	90 40 78    	mov.b     [w0], w1
    1a60:	1e 00 90    	mov.w     [w14+2], w0
    1a62:	10 40 78    	mov.b     [w0], w0
    1a64:	80 cf 50    	sub.b     w1, w0, [w15]
    1a66:	06 00 32    	bra       Z, 0x1a74 <.L78>
    1a68:	1e 0f e8    	inc.w     [w14], [w14]

00001a6a <.L65>:
    1a6a:	1e 00 78    	mov.w     [w14], w0
    1a6c:	10 40 78    	mov.b     [w0], w0
    1a6e:	00 04 e0    	cp0.b     w0
    1a70:	e3 ff 3a    	bra       NZ, 0x1a38 <.L72>
    1a72:	01 00 37    	bra       0x1a76 <.L71>

00001a74 <.L78>:
            break;
    1a74:	00 00 00    	nop       

00001a76 <.L71>:
    }
    if (*spos) {
    1a76:	1e 00 78    	mov.w     [w14], w0
    1a78:	10 40 78    	mov.b     [w0], w0
    1a7a:	00 04 e0    	cp0.b     w0
    1a7c:	07 00 32    	bra       Z, 0x1a8c <.L73>
        *spos = '\0';
    1a7e:	1e 00 78    	mov.w     [w14], w0
    1a80:	80 40 eb    	clr.b     w1
    1a82:	01 48 78    	mov.b     w1, [w0]
        *save_str = spos + 1;
    1a84:	9e 00 e8    	inc.w     [w14], w1
    1a86:	5e 00 90    	mov.w     [w14+10], w0
    1a88:	01 08 78    	mov.w     w1, [w0]
    1a8a:	03 00 37    	bra       0x1a92 <.L74>

00001a8c <.L73>:
    } else {
        *save_str = (char *)NULL;
    1a8c:	5e 00 90    	mov.w     [w14+10], w0
    1a8e:	80 00 eb    	clr.w     w1
    1a90:	01 08 78    	mov.w     w1, [w0]

00001a92 <.L74>:
    }

    return token_start;
    1a92:	2e 00 90    	mov.w     [w14+4], w0

00001a94 <.L53>:
}
    1a94:	00 80 fa    	ulnk      
    1a96:	00 00 06    	return    

00001a98 <_ui_handler>:

// UI commands
void ui_handler(char *args) {
    1a98:	08 00 fa    	lnk       #0x8
    1a9a:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1a9c:	00 00 eb    	clr.w     w0
    1a9e:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1aa0:	64 00 47    	add.w     w14, #0x4, w0
    1aa2:	00 01 78    	mov.w     w0, w2
    1aa4:	21 62 29    	mov.w     #0x9622, w1
    1aa6:	3e 00 90    	mov.w     [w14+6], w0
    1aa8:	88 ff 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1aaa:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1aac:	1e 00 90    	mov.w     [w14+2], w0
    1aae:	00 00 e0    	cp0.w     w0
    1ab0:	1a 00 32    	bra       Z, 0x1ae6 <.L79>
        for (i = 0; i < UI_TABLE_ENTRIES; i++) {
    1ab2:	00 00 eb    	clr.w     w0
    1ab4:	00 0f 78    	mov.w     w0, [w14]
    1ab6:	14 00 37    	bra       0x1ae0 <.L81>

00001ab8 <.L83>:
            if (str_cmp(command, ui_table[i].command) == 0) {
    1ab8:	1e 00 78    	mov.w     [w14], w0
    1aba:	c2 00 dd    	sl.w      w0, #0x2, w1
    1abc:	40 34 21    	mov.w     #0x1344, w0
    1abe:	00 80 40    	add.w     w1, w0, w0
    1ac0:	10 00 78    	mov.w     [w0], w0
    1ac2:	80 00 78    	mov.w     w0, w1
    1ac4:	1e 00 90    	mov.w     [w14+2], w0
    1ac6:	1e ff 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1ac8:	00 00 e0    	cp0.w     w0
    1aca:	09 00 3a    	bra       NZ, 0x1ade <.L82>
                ui_table[i].handler(remainder);
    1acc:	1e 00 78    	mov.w     [w14], w0
    1ace:	42 00 dd    	sl.w      w0, #0x2, w0
    1ad0:	80 80 e8    	inc2.w    w0, w1
    1ad2:	40 34 21    	mov.w     #0x1344, w0
    1ad4:	00 80 40    	add.w     w1, w0, w0
    1ad6:	90 00 78    	mov.w     [w0], w1
    1ad8:	2e 00 90    	mov.w     [w14+4], w0
    1ada:	01 00 01    	call      w1
                break;
    1adc:	04 00 37    	bra       0x1ae6 <.L79>

00001ade <.L82>:
    1ade:	1e 0f e8    	inc.w     [w14], [w14]

00001ae0 <.L81>:
    1ae0:	1e 00 78    	mov.w     [w14], w0
    1ae2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1ae4:	e9 ff 36    	bra       LEU, 0x1ab8 <.L83>

00001ae6 <.L79>:
            }
        }
    }
}
    1ae6:	00 80 fa    	ulnk      
    1ae8:	00 00 06    	return    

00001aea <_led1_handler>:

void led1_handler(char *args) {
    1aea:	08 00 fa    	lnk       #0x8
    1aec:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1aee:	00 00 eb    	clr.w     w0
    1af0:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1af2:	0e 80 e8    	inc2.w    w14, w0
    1af4:	00 01 78    	mov.w     w0, w2
    1af6:	21 62 29    	mov.w     #0x9622, w1
    1af8:	3e 00 90    	mov.w     [w14+6], w0
    1afa:	5f ff 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1afc:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1afe:	1e 00 78    	mov.w     [w14], w0
    1b00:	00 00 e0    	cp0.w     w0
    1b02:	36 00 32    	bra       Z, 0x1b70 <.L84>
        if (str_cmp(token, "ON") == 0) {
    1b04:	61 62 29    	mov.w     #0x9626, w1
    1b06:	1e 00 78    	mov.w     [w14], w0
    1b08:	fd fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1b0a:	00 00 e0    	cp0.w     w0
    1b0c:	02 00 3a    	bra       NZ, 0x1b12 <.L86>
            LED1 = 0;
    1b0e:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1b10:	2f 00 37    	bra       0x1b70 <.L84>

00001b12 <.L86>:
        } else if (str_cmp(token, "OFF") == 0) {
    1b12:	91 62 29    	mov.w     #0x9629, w1
    1b14:	1e 00 78    	mov.w     [w14], w0
    1b16:	f6 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1b18:	00 00 e0    	cp0.w     w0
    1b1a:	02 00 3a    	bra       NZ, 0x1b20 <.L87>
            LED1 = 1;
    1b1c:	dc e2 a8    	bset.b    0x2dc, #0x7
    1b1e:	28 00 37    	bra       0x1b70 <.L84>

00001b20 <.L87>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1b20:	d1 62 29    	mov.w     #0x962d, w1
    1b22:	1e 00 78    	mov.w     [w14], w0
    1b24:	ef fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1b26:	00 00 e0    	cp0.w     w0
    1b28:	10 00 3a    	bra       NZ, 0x1b4a <.L88>
            LED1 = !LED1;
    1b2a:	e1 16 80    	mov.w     0x2dc, w1
    1b2c:	00 08 20    	mov.w     #0x80, w0
    1b2e:	00 80 60    	and.w     w1, w0, w0
    1b30:	00 f0 a7    	btsc.w    w0, #0xf
    1b32:	00 00 ea    	neg.w     w0, w0
    1b34:	00 00 e9    	dec.w     w0, w0
    1b36:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b38:	00 40 78    	mov.b     w0, w0
    1b3a:	00 80 fb    	ze        w0, w0
    1b3c:	61 00 60    	and.w     w0, #0x1, w0
    1b3e:	47 00 dd    	sl.w      w0, #0x7, w0
    1b40:	e1 16 80    	mov.w     0x2dc, w1
    1b42:	01 70 a1    	bclr.w    w1, #0x7
    1b44:	01 00 70    	ior.w     w0, w1, w0
    1b46:	e0 16 88    	mov.w     w0, 0x2dc
    1b48:	13 00 37    	bra       0x1b70 <.L84>

00001b4a <.L88>:
        } else if (str2hex(token, &val) == 0) {
    1b4a:	64 00 47    	add.w     w14, #0x4, w0
    1b4c:	80 00 78    	mov.w     w0, w1
    1b4e:	1e 00 78    	mov.w     [w14], w0
    1b50:	df fd 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1b52:	00 00 e0    	cp0.w     w0
    1b54:	0d 00 3a    	bra       NZ, 0x1b70 <.L84>
            LED1 = (val) ? 1 : 0;
    1b56:	2e 00 90    	mov.w     [w14+4], w0
    1b58:	00 f0 a7    	btsc.w    w0, #0xf
    1b5a:	00 00 ea    	neg.w     w0, w0
    1b5c:	00 00 ea    	neg.w     w0, w0
    1b5e:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b60:	00 40 78    	mov.b     w0, w0
    1b62:	00 80 fb    	ze        w0, w0
    1b64:	61 00 60    	and.w     w0, #0x1, w0
    1b66:	47 00 dd    	sl.w      w0, #0x7, w0
    1b68:	e1 16 80    	mov.w     0x2dc, w1
    1b6a:	01 70 a1    	bclr.w    w1, #0x7
    1b6c:	01 00 70    	ior.w     w0, w1, w0
    1b6e:	e0 16 88    	mov.w     w0, 0x2dc

00001b70 <.L84>:
        }
    }
}
    1b70:	00 80 fa    	ulnk      
    1b72:	00 00 06    	return    

00001b74 <_led1Q_handler>:

void led1Q_handler(char *args) {
    1b74:	02 00 fa    	lnk       #0x2
    1b76:	00 0f 78    	mov.w     w0, [w14]
    if (LED1 == 1)
    1b78:	e1 16 80    	mov.w     0x2dc, w1
    1b7a:	00 08 20    	mov.w     #0x80, w0
    1b7c:	00 80 60    	and.w     w1, w0, w0
    1b7e:	00 00 e0    	cp0.w     w0
    1b80:	04 00 32    	bra       Z, 0x1b8a <.L90>
        parser_puts("1\r\n");
    1b82:	11 42 80    	mov.w     0x842, w1
    1b84:	40 63 29    	mov.w     #0x9634, w0
    1b86:	01 00 01    	call      w1
    1b88:	03 00 37    	bra       0x1b90 <.L89>

00001b8a <.L90>:
    else
        parser_puts("0\r\n");
    1b8a:	11 42 80    	mov.w     0x842, w1
    1b8c:	80 63 29    	mov.w     #0x9638, w0
    1b8e:	01 00 01    	call      w1

00001b90 <.L89>:
}
    1b90:	00 80 fa    	ulnk      
    1b92:	00 00 06    	return    

00001b94 <_led2_handler>:

void led2_handler(char *args) {
    1b94:	08 00 fa    	lnk       #0x8
    1b96:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1b98:	00 00 eb    	clr.w     w0
    1b9a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1b9c:	0e 80 e8    	inc2.w    w14, w0
    1b9e:	00 01 78    	mov.w     w0, w2
    1ba0:	21 62 29    	mov.w     #0x9622, w1
    1ba2:	3e 00 90    	mov.w     [w14+6], w0
    1ba4:	0a ff 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1ba6:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1ba8:	1e 00 78    	mov.w     [w14], w0
    1baa:	00 00 e0    	cp0.w     w0
    1bac:	33 00 32    	bra       Z, 0x1c14 <.L92>
        if (str_cmp(token, "ON") == 0) {
    1bae:	61 62 29    	mov.w     #0x9626, w1
    1bb0:	1e 00 78    	mov.w     [w14], w0
    1bb2:	a8 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1bb4:	00 00 e0    	cp0.w     w0
    1bb6:	02 00 3a    	bra       NZ, 0x1bbc <.L94>
            LED2 = 0;
    1bb8:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1bba:	2c 00 37    	bra       0x1c14 <.L92>

00001bbc <.L94>:
        } else if (str_cmp(token, "OFF") == 0) {
    1bbc:	91 62 29    	mov.w     #0x9629, w1
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	a1 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1bc2:	00 00 e0    	cp0.w     w0
    1bc4:	02 00 3a    	bra       NZ, 0x1bca <.L95>
            LED2 = 1;
    1bc6:	ec 02 a8    	bset.b    0x2ec, #0x0
    1bc8:	25 00 37    	bra       0x1c14 <.L92>

00001bca <.L95>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1bca:	d1 62 29    	mov.w     #0x962d, w1
    1bcc:	1e 00 78    	mov.w     [w14], w0
    1bce:	9a fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1bd0:	00 00 e0    	cp0.w     w0
    1bd2:	0e 00 3a    	bra       NZ, 0x1bf0 <.L96>
            LED2 = !LED2;
    1bd4:	60 17 80    	mov.w     0x2ec, w0
    1bd6:	61 00 60    	and.w     w0, #0x1, w0
    1bd8:	00 f0 a7    	btsc.w    w0, #0xf
    1bda:	00 00 ea    	neg.w     w0, w0
    1bdc:	00 00 e9    	dec.w     w0, w0
    1bde:	4f 00 de    	lsr.w     w0, #0xf, w0
    1be0:	00 40 78    	mov.b     w0, w0
    1be2:	00 80 fb    	ze        w0, w0
    1be4:	61 00 60    	and.w     w0, #0x1, w0
    1be6:	61 17 80    	mov.w     0x2ec, w1
    1be8:	01 00 a1    	bclr.w    w1, #0x0
    1bea:	01 00 70    	ior.w     w0, w1, w0
    1bec:	60 17 88    	mov.w     w0, 0x2ec
    1bee:	12 00 37    	bra       0x1c14 <.L92>

00001bf0 <.L96>:
        } else if (str2hex(token, &val) == 0) {
    1bf0:	64 00 47    	add.w     w14, #0x4, w0
    1bf2:	80 00 78    	mov.w     w0, w1
    1bf4:	1e 00 78    	mov.w     [w14], w0
    1bf6:	8c fd 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1bf8:	00 00 e0    	cp0.w     w0
    1bfa:	0c 00 3a    	bra       NZ, 0x1c14 <.L92>
            LED2 = (val) ? 1 : 0;
    1bfc:	2e 00 90    	mov.w     [w14+4], w0
    1bfe:	00 f0 a7    	btsc.w    w0, #0xf
    1c00:	00 00 ea    	neg.w     w0, w0
    1c02:	00 00 ea    	neg.w     w0, w0
    1c04:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c06:	00 40 78    	mov.b     w0, w0
    1c08:	00 80 fb    	ze        w0, w0
    1c0a:	61 00 60    	and.w     w0, #0x1, w0
    1c0c:	61 17 80    	mov.w     0x2ec, w1
    1c0e:	01 00 a1    	bclr.w    w1, #0x0
    1c10:	01 00 70    	ior.w     w0, w1, w0
    1c12:	60 17 88    	mov.w     w0, 0x2ec

00001c14 <.L92>:
        }
    }
}
    1c14:	00 80 fa    	ulnk      
    1c16:	00 00 06    	return    

00001c18 <_led2Q_handler>:

void led2Q_handler(char *args) {
    1c18:	02 00 fa    	lnk       #0x2
    1c1a:	00 0f 78    	mov.w     w0, [w14]
    if (LED2 == 1)
    1c1c:	60 17 80    	mov.w     0x2ec, w0
    1c1e:	61 00 60    	and.w     w0, #0x1, w0
    1c20:	00 00 e0    	cp0.w     w0
    1c22:	04 00 32    	bra       Z, 0x1c2c <.L98>
        parser_puts("1\r\n");
    1c24:	11 42 80    	mov.w     0x842, w1
    1c26:	40 63 29    	mov.w     #0x9634, w0
    1c28:	01 00 01    	call      w1
    1c2a:	03 00 37    	bra       0x1c32 <.L97>

00001c2c <.L98>:
    else
        parser_puts("0\r\n");
    1c2c:	11 42 80    	mov.w     0x842, w1
    1c2e:	80 63 29    	mov.w     #0x9638, w0
    1c30:	01 00 01    	call      w1

00001c32 <.L97>:
}
    1c32:	00 80 fa    	ulnk      
    1c34:	00 00 06    	return    

00001c36 <_led3_handler>:

void led3_handler(char *args) {
    1c36:	08 00 fa    	lnk       #0x8
    1c38:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1c3a:	00 00 eb    	clr.w     w0
    1c3c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1c3e:	0e 80 e8    	inc2.w    w14, w0
    1c40:	00 01 78    	mov.w     w0, w2
    1c42:	21 62 29    	mov.w     #0x9622, w1
    1c44:	3e 00 90    	mov.w     [w14+6], w0
    1c46:	b9 fe 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1c48:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1c4a:	1e 00 78    	mov.w     [w14], w0
    1c4c:	00 00 e0    	cp0.w     w0
    1c4e:	35 00 32    	bra       Z, 0x1cba <.L100>
        if (str_cmp(token, "ON") == 0) {
    1c50:	61 62 29    	mov.w     #0x9626, w1
    1c52:	1e 00 78    	mov.w     [w14], w0
    1c54:	57 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1c56:	00 00 e0    	cp0.w     w0
    1c58:	02 00 3a    	bra       NZ, 0x1c5e <.L102>
            LED3 = 0;
    1c5a:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1c5c:	2e 00 37    	bra       0x1cba <.L100>

00001c5e <.L102>:
        } else if (str_cmp(token, "OFF") == 0) {
    1c5e:	91 62 29    	mov.w     #0x9629, w1
    1c60:	1e 00 78    	mov.w     [w14], w0
    1c62:	50 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1c64:	00 00 e0    	cp0.w     w0
    1c66:	02 00 3a    	bra       NZ, 0x1c6c <.L103>
            LED3 = 1;
    1c68:	ec 22 a8    	bset.b    0x2ec, #0x1
    1c6a:	27 00 37    	bra       0x1cba <.L100>

00001c6c <.L103>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1c6c:	d1 62 29    	mov.w     #0x962d, w1
    1c6e:	1e 00 78    	mov.w     [w14], w0
    1c70:	49 fe 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1c72:	00 00 e0    	cp0.w     w0
    1c74:	0f 00 3a    	bra       NZ, 0x1c94 <.L104>
            LED3 = !LED3;
    1c76:	60 17 80    	mov.w     0x2ec, w0
    1c78:	62 00 60    	and.w     w0, #0x2, w0
    1c7a:	00 f0 a7    	btsc.w    w0, #0xf
    1c7c:	00 00 ea    	neg.w     w0, w0
    1c7e:	00 00 e9    	dec.w     w0, w0
    1c80:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c82:	00 40 78    	mov.b     w0, w0
    1c84:	00 80 fb    	ze        w0, w0
    1c86:	61 00 60    	and.w     w0, #0x1, w0
    1c88:	00 00 40    	add.w     w0, w0, w0
    1c8a:	61 17 80    	mov.w     0x2ec, w1
    1c8c:	01 10 a1    	bclr.w    w1, #0x1
    1c8e:	01 00 70    	ior.w     w0, w1, w0
    1c90:	60 17 88    	mov.w     w0, 0x2ec
    1c92:	13 00 37    	bra       0x1cba <.L100>

00001c94 <.L104>:
        } else if (str2hex(token, &val) == 0) {
    1c94:	64 00 47    	add.w     w14, #0x4, w0
    1c96:	80 00 78    	mov.w     w0, w1
    1c98:	1e 00 78    	mov.w     [w14], w0
    1c9a:	3a fd 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1c9c:	00 00 e0    	cp0.w     w0
    1c9e:	0d 00 3a    	bra       NZ, 0x1cba <.L100>
            LED3 = (val) ? 1 : 0;
    1ca0:	2e 00 90    	mov.w     [w14+4], w0
    1ca2:	00 f0 a7    	btsc.w    w0, #0xf
    1ca4:	00 00 ea    	neg.w     w0, w0
    1ca6:	00 00 ea    	neg.w     w0, w0
    1ca8:	4f 00 de    	lsr.w     w0, #0xf, w0
    1caa:	00 40 78    	mov.b     w0, w0
    1cac:	00 80 fb    	ze        w0, w0
    1cae:	61 00 60    	and.w     w0, #0x1, w0
    1cb0:	00 00 40    	add.w     w0, w0, w0
    1cb2:	61 17 80    	mov.w     0x2ec, w1
    1cb4:	01 10 a1    	bclr.w    w1, #0x1
    1cb6:	01 00 70    	ior.w     w0, w1, w0
    1cb8:	60 17 88    	mov.w     w0, 0x2ec

00001cba <.L100>:
        }
    }
}
    1cba:	00 80 fa    	ulnk      
    1cbc:	00 00 06    	return    

00001cbe <_led3Q_handler>:

void led3Q_handler(char *args) {
    1cbe:	02 00 fa    	lnk       #0x2
    1cc0:	00 0f 78    	mov.w     w0, [w14]
    if (LED3 == 1)
    1cc2:	60 17 80    	mov.w     0x2ec, w0
    1cc4:	62 00 60    	and.w     w0, #0x2, w0
    1cc6:	00 00 e0    	cp0.w     w0
    1cc8:	04 00 32    	bra       Z, 0x1cd2 <.L106>
        parser_puts("1\r\n");
    1cca:	11 42 80    	mov.w     0x842, w1
    1ccc:	40 63 29    	mov.w     #0x9634, w0
    1cce:	01 00 01    	call      w1
    1cd0:	03 00 37    	bra       0x1cd8 <.L105>

00001cd2 <.L106>:
    else
        parser_puts("0\r\n");
    1cd2:	11 42 80    	mov.w     0x842, w1
    1cd4:	80 63 29    	mov.w     #0x9638, w0
    1cd6:	01 00 01    	call      w1

00001cd8 <.L105>:
}
    1cd8:	00 80 fa    	ulnk      
    1cda:	00 00 06    	return    

00001cdc <_sw1Q_handler>:

void sw1Q_handler(char *args) {
    1cdc:	02 00 fa    	lnk       #0x2
    1cde:	00 0f 78    	mov.w     w0, [w14]
    parser_putc((SW1) ? '1' : '0');
    1ce0:	01 42 80    	mov.w     0x840, w1
    1ce2:	92 16 80    	mov.w     0x2d2, w2
    1ce4:	00 00 28    	mov.w     #0x8000, w0
    1ce6:	00 00 61    	and.w     w2, w0, w0
    1ce8:	00 00 e0    	cp0.w     w0
    1cea:	02 00 32    	bra       Z, 0x1cf0 <.L109>
    1cec:	10 c3 b3    	mov.b     #0x31, w0
    1cee:	01 00 37    	bra       0x1cf2 <.L110>

00001cf0 <.L109>:
    1cf0:	00 c3 b3    	mov.b     #0x30, w0

00001cf2 <.L110>:
    1cf2:	01 00 01    	call      w1
    parser_puts("\r\n");
    1cf4:	11 42 80    	mov.w     0x842, w1
    1cf6:	c0 63 29    	mov.w     #0x963c, w0
    1cf8:	01 00 01    	call      w1
}
    1cfa:	00 80 fa    	ulnk      
    1cfc:	00 00 06    	return    

00001cfe <_pwr_handler>:

// PWR commands
void pwr_handler(char *args) {
    1cfe:	08 00 fa    	lnk       #0x8
    1d00:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1d02:	00 00 eb    	clr.w     w0
    1d04:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1d06:	64 00 47    	add.w     w14, #0x4, w0
    1d08:	00 01 78    	mov.w     w0, w2
    1d0a:	21 62 29    	mov.w     #0x9622, w1
    1d0c:	3e 00 90    	mov.w     [w14+6], w0
    1d0e:	55 fe 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1d10:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1d12:	1e 00 90    	mov.w     [w14+2], w0
    1d14:	00 00 e0    	cp0.w     w0
    1d16:	1a 00 32    	bra       Z, 0x1d4c <.L111>
        for (i = 0; i < PWR_TABLE_ENTRIES; i++) {
    1d18:	00 00 eb    	clr.w     w0
    1d1a:	00 0f 78    	mov.w     w0, [w14]
    1d1c:	14 00 37    	bra       0x1d46 <.L113>

00001d1e <.L115>:
            if (str_cmp(command, pwr_table[i].command) == 0) {
    1d1e:	1e 00 78    	mov.w     [w14], w0
    1d20:	c2 00 dd    	sl.w      w0, #0x2, w1
    1d22:	00 36 21    	mov.w     #0x1360, w0
    1d24:	00 80 40    	add.w     w1, w0, w0
    1d26:	10 00 78    	mov.w     [w0], w0
    1d28:	80 00 78    	mov.w     w0, w1
    1d2a:	1e 00 90    	mov.w     [w14+2], w0
    1d2c:	eb fd 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1d2e:	00 00 e0    	cp0.w     w0
    1d30:	09 00 3a    	bra       NZ, 0x1d44 <.L114>
                pwr_table[i].handler(remainder);
    1d32:	1e 00 78    	mov.w     [w14], w0
    1d34:	42 00 dd    	sl.w      w0, #0x2, w0
    1d36:	80 80 e8    	inc2.w    w0, w1
    1d38:	00 36 21    	mov.w     #0x1360, w0
    1d3a:	00 80 40    	add.w     w1, w0, w0
    1d3c:	90 00 78    	mov.w     [w0], w1
    1d3e:	2e 00 90    	mov.w     [w14+4], w0
    1d40:	01 00 01    	call      w1
                break;
    1d42:	04 00 37    	bra       0x1d4c <.L111>

00001d44 <.L114>:
    1d44:	1e 0f e8    	inc.w     [w14], [w14]

00001d46 <.L113>:
    1d46:	1e 00 78    	mov.w     [w14], w0
    1d48:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d4a:	e9 ff 36    	bra       LEU, 0x1d1e <.L115>

00001d4c <.L111>:
            }
        }
    }
}
    1d4c:	00 80 fa    	ulnk      
    1d4e:	00 00 06    	return    

00001d50 <_ena12V_handler>:

void ena12V_handler(char *args) {
    1d50:	08 00 fa    	lnk       #0x8
    1d52:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1d54:	00 00 eb    	clr.w     w0
    1d56:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1d58:	0e 80 e8    	inc2.w    w14, w0
    1d5a:	00 01 78    	mov.w     w0, w2
    1d5c:	21 62 29    	mov.w     #0x9622, w1
    1d5e:	3e 00 90    	mov.w     [w14+6], w0
    1d60:	2c fe 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1d62:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1d64:	1e 00 78    	mov.w     [w14], w0
    1d66:	00 00 e0    	cp0.w     w0
    1d68:	36 00 32    	bra       Z, 0x1dd6 <.L116>
        if (str_cmp(token, "ON") == 0) {
    1d6a:	61 62 29    	mov.w     #0x9626, w1
    1d6c:	1e 00 78    	mov.w     [w14], w0
    1d6e:	ca fd 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1d70:	00 00 e0    	cp0.w     w0
    1d72:	02 00 3a    	bra       NZ, 0x1d78 <.L118>
            ENA12V = ON;
    1d74:	d5 82 a8    	bset.b    0x2d5, #0x4
    1d76:	2f 00 37    	bra       0x1dd6 <.L116>

00001d78 <.L118>:
        } else if (str_cmp(token, "OFF") == 0) {
    1d78:	91 62 29    	mov.w     #0x9629, w1
    1d7a:	1e 00 78    	mov.w     [w14], w0
    1d7c:	c3 fd 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1d7e:	00 00 e0    	cp0.w     w0
    1d80:	02 00 3a    	bra       NZ, 0x1d86 <.L119>
            ENA12V = OFF;
    1d82:	d5 82 a9    	bclr.b    0x2d5, #0x4
    1d84:	28 00 37    	bra       0x1dd6 <.L116>

00001d86 <.L119>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1d86:	d1 62 29    	mov.w     #0x962d, w1
    1d88:	1e 00 78    	mov.w     [w14], w0
    1d8a:	bc fd 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1d8c:	00 00 e0    	cp0.w     w0
    1d8e:	10 00 3a    	bra       NZ, 0x1db0 <.L120>
            ENA12V = !ENA12V;
    1d90:	a1 16 80    	mov.w     0x2d4, w1
    1d92:	00 00 21    	mov.w     #0x1000, w0
    1d94:	00 80 60    	and.w     w1, w0, w0
    1d96:	00 f0 a7    	btsc.w    w0, #0xf
    1d98:	00 00 ea    	neg.w     w0, w0
    1d9a:	00 00 e9    	dec.w     w0, w0
    1d9c:	4f 00 de    	lsr.w     w0, #0xf, w0
    1d9e:	00 40 78    	mov.b     w0, w0
    1da0:	00 80 fb    	ze        w0, w0
    1da2:	61 00 60    	and.w     w0, #0x1, w0
    1da4:	4c 00 dd    	sl.w      w0, #0xc, w0
    1da6:	a1 16 80    	mov.w     0x2d4, w1
    1da8:	01 c0 a1    	bclr.w    w1, #0xc
    1daa:	01 00 70    	ior.w     w0, w1, w0
    1dac:	a0 16 88    	mov.w     w0, 0x2d4
    1dae:	13 00 37    	bra       0x1dd6 <.L116>

00001db0 <.L120>:
        } else if (str2hex(token, &val) == 0) {
    1db0:	64 00 47    	add.w     w14, #0x4, w0
    1db2:	80 00 78    	mov.w     w0, w1
    1db4:	1e 00 78    	mov.w     [w14], w0
    1db6:	ac fc 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1db8:	00 00 e0    	cp0.w     w0
    1dba:	0d 00 3a    	bra       NZ, 0x1dd6 <.L116>
            ENA12V = (val) ? 1 : 0;
    1dbc:	2e 00 90    	mov.w     [w14+4], w0
    1dbe:	00 f0 a7    	btsc.w    w0, #0xf
    1dc0:	00 00 ea    	neg.w     w0, w0
    1dc2:	00 00 ea    	neg.w     w0, w0
    1dc4:	4f 00 de    	lsr.w     w0, #0xf, w0
    1dc6:	00 40 78    	mov.b     w0, w0
    1dc8:	00 80 fb    	ze        w0, w0
    1dca:	61 00 60    	and.w     w0, #0x1, w0
    1dcc:	4c 00 dd    	sl.w      w0, #0xc, w0
    1dce:	a1 16 80    	mov.w     0x2d4, w1
    1dd0:	01 c0 a1    	bclr.w    w1, #0xc
    1dd2:	01 00 70    	ior.w     w0, w1, w0
    1dd4:	a0 16 88    	mov.w     w0, 0x2d4

00001dd6 <.L116>:
        }
    }
}
    1dd6:	00 80 fa    	ulnk      
    1dd8:	00 00 06    	return    

00001dda <_ena12VQ_handler>:

void ena12VQ_handler(char *args) {
    1dda:	02 00 fa    	lnk       #0x2
    1ddc:	00 0f 78    	mov.w     w0, [w14]
    if (ENA12V == ON)
    1dde:	a1 16 80    	mov.w     0x2d4, w1
    1de0:	00 00 21    	mov.w     #0x1000, w0
    1de2:	00 80 60    	and.w     w1, w0, w0
    1de4:	00 00 e0    	cp0.w     w0
    1de6:	04 00 32    	bra       Z, 0x1df0 <.L122>
        parser_puts("1\r\n");
    1de8:	11 42 80    	mov.w     0x842, w1
    1dea:	40 63 29    	mov.w     #0x9634, w0
    1dec:	01 00 01    	call      w1
    1dee:	03 00 37    	bra       0x1df6 <.L121>

00001df0 <.L122>:
    else
        parser_puts("0\r\n");
    1df0:	11 42 80    	mov.w     0x842, w1
    1df2:	80 63 29    	mov.w     #0x9638, w0
    1df4:	01 00 01    	call      w1

00001df6 <.L121>:
}
    1df6:	00 80 fa    	ulnk      
    1df8:	00 00 06    	return    

00001dfa <_dac10_handler>:

// DAC10 commands
void dac10_handler(char *args) {
    1dfa:	08 00 fa    	lnk       #0x8
    1dfc:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1dfe:	00 00 eb    	clr.w     w0
    1e00:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1e02:	64 00 47    	add.w     w14, #0x4, w0
    1e04:	00 01 78    	mov.w     w0, w2
    1e06:	21 62 29    	mov.w     #0x9622, w1
    1e08:	3e 00 90    	mov.w     [w14+6], w0
    1e0a:	d7 fd 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1e0c:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1e0e:	1e 00 90    	mov.w     [w14+2], w0
    1e10:	00 00 e0    	cp0.w     w0
    1e12:	1a 00 32    	bra       Z, 0x1e48 <.L124>
        for (i = 0; i < DAC10_TABLE_ENTRIES; i++) {
    1e14:	00 00 eb    	clr.w     w0
    1e16:	00 0f 78    	mov.w     w0, [w14]
    1e18:	14 00 37    	bra       0x1e42 <.L126>

00001e1a <.L128>:
            if (str_cmp(command, dac10_table[i].command) == 0) {
    1e1a:	1e 00 78    	mov.w     [w14], w0
    1e1c:	c2 00 dd    	sl.w      w0, #0x2, w1
    1e1e:	80 36 21    	mov.w     #0x1368, w0
    1e20:	00 80 40    	add.w     w1, w0, w0
    1e22:	10 00 78    	mov.w     [w0], w0
    1e24:	80 00 78    	mov.w     w0, w1
    1e26:	1e 00 90    	mov.w     [w14+2], w0
    1e28:	6d fd 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1e2a:	00 00 e0    	cp0.w     w0
    1e2c:	09 00 3a    	bra       NZ, 0x1e40 <.L127>
                dac10_table[i].handler(remainder);
    1e2e:	1e 00 78    	mov.w     [w14], w0
    1e30:	42 00 dd    	sl.w      w0, #0x2, w0
    1e32:	80 80 e8    	inc2.w    w0, w1
    1e34:	80 36 21    	mov.w     #0x1368, w0
    1e36:	00 80 40    	add.w     w1, w0, w0
    1e38:	90 00 78    	mov.w     [w0], w1
    1e3a:	2e 00 90    	mov.w     [w14+4], w0
    1e3c:	01 00 01    	call      w1
                break;
    1e3e:	04 00 37    	bra       0x1e48 <.L124>

00001e40 <.L127>:
    1e40:	1e 0f e8    	inc.w     [w14], [w14]

00001e42 <.L126>:
    1e42:	1e 00 78    	mov.w     [w14], w0
    1e44:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1e46:	e9 ff 36    	bra       LEU, 0x1e1a <.L128>

00001e48 <.L124>:
            }
        }
    }
}
    1e48:	00 80 fa    	ulnk      
    1e4a:	00 00 06    	return    

00001e4c <_dac10_dac1_handler>:

void dac10_dac1_handler(char *args) {
    1e4c:	08 00 fa    	lnk       #0x8
    1e4e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1e50:	00 00 eb    	clr.w     w0
    1e52:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1e54:	0e 80 e8    	inc2.w    w14, w0
    1e56:	00 01 78    	mov.w     w0, w2
    1e58:	f1 63 29    	mov.w     #0x963f, w1
    1e5a:	3e 00 90    	mov.w     [w14+6], w0
    1e5c:	ae fd 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1e5e:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1e60:	1e 00 78    	mov.w     [w14], w0
    1e62:	00 00 e0    	cp0.w     w0
    1e64:	0a 00 32    	bra       Z, 0x1e7a <.L129>
    1e66:	64 00 47    	add.w     w14, #0x4, w0
    1e68:	80 00 78    	mov.w     w0, w1
    1e6a:	1e 00 78    	mov.w     [w14], w0
    1e6c:	51 fc 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1e6e:	00 00 e0    	cp0.w     w0
    1e70:	04 00 3a    	bra       NZ, 0x1e7a <.L129>
        DAC1DAT = val & 0x3FF;
    1e72:	ae 00 90    	mov.w     [w14+4], w1
    1e74:	f0 3f 20    	mov.w     #0x3ff, w0
    1e76:	00 80 60    	and.w     w1, w0, w0
    1e78:	10 22 88    	mov.w     w0, 0x442

00001e7a <.L129>:
    }
}
    1e7a:	00 80 fa    	ulnk      
    1e7c:	00 00 06    	return    

00001e7e <_dac10_dac1Q_handler>:

void dac10_dac1Q_handler(char *args) {
    1e7e:	08 00 fa    	lnk       #0x8
    1e80:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(DAC1DAT, str);
    1e82:	10 22 80    	mov.w     0x442, w0
    1e84:	8e 00 78    	mov.w     w14, w1
    1e86:	09 fd 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1e88:	11 42 80    	mov.w     0x842, w1
    1e8a:	0e 00 78    	mov.w     w14, w0
    1e8c:	01 00 01    	call      w1
    parser_puts("\r\n");
    1e8e:	11 42 80    	mov.w     0x842, w1
    1e90:	c0 63 29    	mov.w     #0x963c, w0
    1e92:	01 00 01    	call      w1
}
    1e94:	00 80 fa    	ulnk      
    1e96:	00 00 06    	return    

00001e98 <_dac10_dac2_handler>:

void dac10_dac2_handler(char *args) {
    1e98:	08 00 fa    	lnk       #0x8
    1e9a:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1e9c:	00 00 eb    	clr.w     w0
    1e9e:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1ea0:	0e 80 e8    	inc2.w    w14, w0
    1ea2:	00 01 78    	mov.w     w0, w2
    1ea4:	f1 63 29    	mov.w     #0x963f, w1
    1ea6:	3e 00 90    	mov.w     [w14+6], w0
    1ea8:	88 fd 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1eaa:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1eac:	1e 00 78    	mov.w     [w14], w0
    1eae:	00 00 e0    	cp0.w     w0
    1eb0:	0a 00 32    	bra       Z, 0x1ec6 <.L132>
    1eb2:	64 00 47    	add.w     w14, #0x4, w0
    1eb4:	80 00 78    	mov.w     w0, w1
    1eb6:	1e 00 78    	mov.w     [w14], w0
    1eb8:	2b fc 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1eba:	00 00 e0    	cp0.w     w0
    1ebc:	04 00 3a    	bra       NZ, 0x1ec6 <.L132>
        DAC2DAT = val & 0x3FF;
    1ebe:	ae 00 90    	mov.w     [w14+4], w1
    1ec0:	f0 3f 20    	mov.w     #0x3ff, w0
    1ec2:	00 80 60    	and.w     w1, w0, w0
    1ec4:	30 22 88    	mov.w     w0, 0x446

00001ec6 <.L132>:
    }
}
    1ec6:	00 80 fa    	ulnk      
    1ec8:	00 00 06    	return    

00001eca <_dac10_dac2Q_handler>:

void dac10_dac2Q_handler(char *args) {
    1eca:	08 00 fa    	lnk       #0x8
    1ecc:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(DAC2DAT, str);
    1ece:	30 22 80    	mov.w     0x446, w0
    1ed0:	8e 00 78    	mov.w     w14, w1
    1ed2:	e3 fc 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1ed4:	11 42 80    	mov.w     0x842, w1
    1ed6:	0e 00 78    	mov.w     w14, w0
    1ed8:	01 00 01    	call      w1
    parser_puts("\r\n");
    1eda:	11 42 80    	mov.w     0x842, w1
    1edc:	c0 63 29    	mov.w     #0x963c, w0
    1ede:	01 00 01    	call      w1
}
    1ee0:	00 80 fa    	ulnk      
    1ee2:	00 00 06    	return    

00001ee4 <_dac10_diff_handler>:

void dac10_diff_handler(char *args) {
    1ee4:	0c 00 fa    	lnk       #0xc
    1ee6:	50 07 98    	mov.w     w0, [w14+10]
    char *token, *remainder;
    uint16_t val, dac1, dac2;

    remainder = (char *)NULL;
    1ee8:	00 00 eb    	clr.w     w0
    1eea:	30 07 98    	mov.w     w0, [w14+6]
    token = str_tok_r(args, ", ", &remainder);
    1eec:	66 00 47    	add.w     w14, #0x6, w0
    1eee:	00 01 78    	mov.w     w0, w2
    1ef0:	f1 63 29    	mov.w     #0x963f, w1
    1ef2:	5e 00 90    	mov.w     [w14+10], w0
    1ef4:	62 fd 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1ef6:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	00 00 e0    	cp0.w     w0
    1efc:	1b 00 32    	bra       Z, 0x1f34 <.L135>
    1efe:	68 00 47    	add.w     w14, #0x8, w0
    1f00:	80 00 78    	mov.w     w0, w1
    1f02:	1e 00 78    	mov.w     [w14], w0
    1f04:	05 fc 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1f06:	00 00 e0    	cp0.w     w0
    1f08:	15 00 3a    	bra       NZ, 0x1f34 <.L135>
        dac1 = ((0x400 + (int16_t)val) >> 1) & 0x3FF;
    1f0a:	4e 00 90    	mov.w     [w14+8], w0
    1f0c:	80 00 78    	mov.w     w0, w1
    1f0e:	00 40 20    	mov.w     #0x400, w0
    1f10:	00 80 40    	add.w     w1, w0, w0
    1f12:	00 80 d1    	asr.w     w0, w0
    1f14:	80 00 78    	mov.w     w0, w1
    1f16:	f0 3f 20    	mov.w     #0x3ff, w0
    1f18:	00 80 60    	and.w     w1, w0, w0
    1f1a:	10 07 98    	mov.w     w0, [w14+2]
        dac2 = ((0x400 - (int16_t)val) >> 1) & 0x3FF;
    1f1c:	4e 00 90    	mov.w     [w14+8], w0
    1f1e:	01 40 20    	mov.w     #0x400, w1
    1f20:	00 80 50    	sub.w     w1, w0, w0
    1f22:	00 80 d1    	asr.w     w0, w0
    1f24:	80 00 78    	mov.w     w0, w1
    1f26:	f0 3f 20    	mov.w     #0x3ff, w0
    1f28:	00 80 60    	and.w     w1, w0, w0
    1f2a:	20 07 98    	mov.w     w0, [w14+4]
        DAC1DAT = dac1;
    1f2c:	9e 00 90    	mov.w     [w14+2], w1
    1f2e:	11 22 88    	mov.w     w1, 0x442
        DAC2DAT = dac2;
    1f30:	ae 00 90    	mov.w     [w14+4], w1
    1f32:	31 22 88    	mov.w     w1, 0x446

00001f34 <.L135>:
    }
}
    1f34:	00 80 fa    	ulnk      
    1f36:	00 00 06    	return    

00001f38 <_dac10_diffQ_handler>:

void dac10_diffQ_handler(char *args) {
    1f38:	08 00 fa    	lnk       #0x8
    1f3a:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)((int16_t)DAC1DAT - (int16_t)DAC2DAT), str);
    1f3c:	10 22 80    	mov.w     0x442, w0
    1f3e:	80 00 78    	mov.w     w0, w1
    1f40:	30 22 80    	mov.w     0x446, w0
    1f42:	00 80 50    	sub.w     w1, w0, w0
    1f44:	8e 00 78    	mov.w     w14, w1
    1f46:	a9 fc 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1f48:	11 42 80    	mov.w     0x842, w1
    1f4a:	0e 00 78    	mov.w     w14, w0
    1f4c:	01 00 01    	call      w1
    parser_puts("\r\n");
    1f4e:	11 42 80    	mov.w     0x842, w1
    1f50:	c0 63 29    	mov.w     #0x963c, w0
    1f52:	01 00 01    	call      w1
}
    1f54:	00 80 fa    	ulnk      
    1f56:	00 00 06    	return    

00001f58 <_dac16_handler>:

// DAC16 commands
void dac16_handler(char *args) {
    1f58:	08 00 fa    	lnk       #0x8
    1f5a:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1f5c:	00 00 eb    	clr.w     w0
    1f5e:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1f60:	64 00 47    	add.w     w14, #0x4, w0
    1f62:	00 01 78    	mov.w     w0, w2
    1f64:	21 62 29    	mov.w     #0x9622, w1
    1f66:	3e 00 90    	mov.w     [w14+6], w0
    1f68:	28 fd 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1f6a:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1f6c:	1e 00 90    	mov.w     [w14+2], w0
    1f6e:	00 00 e0    	cp0.w     w0
    1f70:	1a 00 32    	bra       Z, 0x1fa6 <.L138>
        for (i = 0; i < DAC16_TABLE_ENTRIES; i++) {
    1f72:	00 00 eb    	clr.w     w0
    1f74:	00 0f 78    	mov.w     w0, [w14]
    1f76:	14 00 37    	bra       0x1fa0 <.L140>

00001f78 <.L142>:
            if (str_cmp(command, dac16_table[i].command) == 0) {
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	c2 00 dd    	sl.w      w0, #0x2, w1
    1f7c:	00 38 21    	mov.w     #0x1380, w0
    1f7e:	00 80 40    	add.w     w1, w0, w0
    1f80:	10 00 78    	mov.w     [w0], w0
    1f82:	80 00 78    	mov.w     w0, w1
    1f84:	1e 00 90    	mov.w     [w14+2], w0
    1f86:	be fc 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    1f88:	00 00 e0    	cp0.w     w0
    1f8a:	09 00 3a    	bra       NZ, 0x1f9e <.L141>
                dac16_table[i].handler(remainder);
    1f8c:	1e 00 78    	mov.w     [w14], w0
    1f8e:	42 00 dd    	sl.w      w0, #0x2, w0
    1f90:	80 80 e8    	inc2.w    w0, w1
    1f92:	00 38 21    	mov.w     #0x1380, w0
    1f94:	00 80 40    	add.w     w1, w0, w0
    1f96:	90 00 78    	mov.w     [w0], w1
    1f98:	2e 00 90    	mov.w     [w14+4], w0
    1f9a:	01 00 01    	call      w1
                break;
    1f9c:	04 00 37    	bra       0x1fa6 <.L138>

00001f9e <.L141>:
    1f9e:	1e 0f e8    	inc.w     [w14], [w14]

00001fa0 <.L140>:
    1fa0:	1e 00 78    	mov.w     [w14], w0
    1fa2:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    1fa4:	e9 ff 36    	bra       LEU, 0x1f78 <.L142>

00001fa6 <.L138>:
            }
        }
    }
}
    1fa6:	00 80 fa    	ulnk      
    1fa8:	00 00 06    	return    

00001faa <_dac16_dac0_handler>:

void dac16_dac0_handler(char *args) {
    1faa:	08 00 fa    	lnk       #0x8
    1fac:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1fae:	00 00 eb    	clr.w     w0
    1fb0:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1fb2:	0e 80 e8    	inc2.w    w14, w0
    1fb4:	00 01 78    	mov.w     w0, w2
    1fb6:	f1 63 29    	mov.w     #0x963f, w1
    1fb8:	3e 00 90    	mov.w     [w14+6], w0
    1fba:	ff fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    1fbc:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1fbe:	1e 00 78    	mov.w     [w14], w0
    1fc0:	00 00 e0    	cp0.w     w0
    1fc2:	08 00 32    	bra       Z, 0x1fd4 <.L143>
    1fc4:	64 00 47    	add.w     w14, #0x4, w0
    1fc6:	80 00 78    	mov.w     w0, w1
    1fc8:	1e 00 78    	mov.w     [w14], w0
    1fca:	a2 fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1fcc:	00 00 e0    	cp0.w     w0
    1fce:	02 00 3a    	bra       NZ, 0x1fd4 <.L143>
        dac16_set_dac0(val);
    1fd0:	2e 00 90    	mov.w     [w14+4], w0
    1fd2:	46 0d 07    	rcall     0x3a60 <_dac16_set_dac0> <.LFB3> <.LFE2>

00001fd4 <.L143>:
    }
}
    1fd4:	00 80 fa    	ulnk      
    1fd6:	00 00 06    	return    

00001fd8 <_dac16_dac0Q_handler>:

void dac16_dac0Q_handler(char *args) {
    1fd8:	08 00 fa    	lnk       #0x8
    1fda:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac0(), str);
    1fdc:	3d 0d 07    	rcall     0x3a58 <_dac16_get_dac0> <.LFB2> <.LFE1>
    1fde:	8e 00 78    	mov.w     w14, w1
    1fe0:	5c fc 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1fe2:	11 42 80    	mov.w     0x842, w1
    1fe4:	0e 00 78    	mov.w     w14, w0
    1fe6:	01 00 01    	call      w1
    parser_puts("\r\n");
    1fe8:	11 42 80    	mov.w     0x842, w1
    1fea:	c0 63 29    	mov.w     #0x963c, w0
    1fec:	01 00 01    	call      w1
}
    1fee:	00 80 fa    	ulnk      
    1ff0:	00 00 06    	return    

00001ff2 <_dac16_dac1_handler>:

void dac16_dac1_handler(char *args) {
    1ff2:	08 00 fa    	lnk       #0x8
    1ff4:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1ff6:	00 00 eb    	clr.w     w0
    1ff8:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1ffa:	0e 80 e8    	inc2.w    w14, w0
    1ffc:	00 01 78    	mov.w     w0, w2
    1ffe:	f1 63 29    	mov.w     #0x963f, w1
    2000:	3e 00 90    	mov.w     [w14+6], w0
    2002:	db fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2004:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    2006:	1e 00 78    	mov.w     [w14], w0
    2008:	00 00 e0    	cp0.w     w0
    200a:	08 00 32    	bra       Z, 0x201c <.L146>
    200c:	64 00 47    	add.w     w14, #0x4, w0
    200e:	80 00 78    	mov.w     w0, w1
    2010:	1e 00 78    	mov.w     [w14], w0
    2012:	7e fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2014:	00 00 e0    	cp0.w     w0
    2016:	02 00 3a    	bra       NZ, 0x201c <.L146>
        dac16_set_dac1(val);
    2018:	2e 00 90    	mov.w     [w14+4], w0
    201a:	4c 0d 07    	rcall     0x3ab4 <_dac16_set_dac1> <.LFB5> <.LFE4>

0000201c <.L146>:
    }
}
    201c:	00 80 fa    	ulnk      
    201e:	00 00 06    	return    

00002020 <_dac16_dac1Q_handler>:

void dac16_dac1Q_handler(char *args) {
    2020:	08 00 fa    	lnk       #0x8
    2022:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac1(), str);
    2024:	43 0d 07    	rcall     0x3aac <_dac16_get_dac1> <.LFB4> <.LFE3>
    2026:	8e 00 78    	mov.w     w14, w1
    2028:	38 fc 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    202a:	11 42 80    	mov.w     0x842, w1
    202c:	0e 00 78    	mov.w     w14, w0
    202e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2030:	11 42 80    	mov.w     0x842, w1
    2032:	c0 63 29    	mov.w     #0x963c, w0
    2034:	01 00 01    	call      w1
}
    2036:	00 80 fa    	ulnk      
    2038:	00 00 06    	return    

0000203a <_dac16_dac2_handler>:

void dac16_dac2_handler(char *args) {
    203a:	08 00 fa    	lnk       #0x8
    203c:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    203e:	00 00 eb    	clr.w     w0
    2040:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    2042:	0e 80 e8    	inc2.w    w14, w0
    2044:	00 01 78    	mov.w     w0, w2
    2046:	f1 63 29    	mov.w     #0x963f, w1
    2048:	3e 00 90    	mov.w     [w14+6], w0
    204a:	b7 fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    204c:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    204e:	1e 00 78    	mov.w     [w14], w0
    2050:	00 00 e0    	cp0.w     w0
    2052:	08 00 32    	bra       Z, 0x2064 <.L149>
    2054:	64 00 47    	add.w     w14, #0x4, w0
    2056:	80 00 78    	mov.w     w0, w1
    2058:	1e 00 78    	mov.w     [w14], w0
    205a:	5a fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    205c:	00 00 e0    	cp0.w     w0
    205e:	02 00 3a    	bra       NZ, 0x2064 <.L149>
        dac16_set_dac2(val);
    2060:	2e 00 90    	mov.w     [w14+4], w0
    2062:	52 0d 07    	rcall     0x3b08 <_dac16_set_dac2> <.LFB7> <.LFE6>

00002064 <.L149>:
    }
}
    2064:	00 80 fa    	ulnk      
    2066:	00 00 06    	return    

00002068 <_dac16_dac2Q_handler>:

void dac16_dac2Q_handler(char *args) {
    2068:	08 00 fa    	lnk       #0x8
    206a:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac2(), str);
    206c:	49 0d 07    	rcall     0x3b00 <_dac16_get_dac2> <.LFB6> <.LFE5>
    206e:	8e 00 78    	mov.w     w14, w1
    2070:	14 fc 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2072:	11 42 80    	mov.w     0x842, w1
    2074:	0e 00 78    	mov.w     w14, w0
    2076:	01 00 01    	call      w1
    parser_puts("\r\n");
    2078:	11 42 80    	mov.w     0x842, w1
    207a:	c0 63 29    	mov.w     #0x963c, w0
    207c:	01 00 01    	call      w1
}
    207e:	00 80 fa    	ulnk      
    2080:	00 00 06    	return    

00002082 <_dac16_dac3_handler>:

void dac16_dac3_handler(char *args) {
    2082:	08 00 fa    	lnk       #0x8
    2084:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2086:	00 00 eb    	clr.w     w0
    2088:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    208a:	0e 80 e8    	inc2.w    w14, w0
    208c:	00 01 78    	mov.w     w0, w2
    208e:	f1 63 29    	mov.w     #0x963f, w1
    2090:	3e 00 90    	mov.w     [w14+6], w0
    2092:	93 fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2094:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	00 00 e0    	cp0.w     w0
    209a:	08 00 32    	bra       Z, 0x20ac <.L152>
    209c:	64 00 47    	add.w     w14, #0x4, w0
    209e:	80 00 78    	mov.w     w0, w1
    20a0:	1e 00 78    	mov.w     [w14], w0
    20a2:	36 fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    20a4:	00 00 e0    	cp0.w     w0
    20a6:	02 00 3a    	bra       NZ, 0x20ac <.L152>
        dac16_set_dac3(val);
    20a8:	2e 00 90    	mov.w     [w14+4], w0
    20aa:	58 0d 07    	rcall     0x3b5c <_dac16_set_dac3> <.LFB9> <.LFE8>

000020ac <.L152>:
    }
}
    20ac:	00 80 fa    	ulnk      
    20ae:	00 00 06    	return    

000020b0 <_dac16_dac3Q_handler>:

void dac16_dac3Q_handler(char *args) {
    20b0:	08 00 fa    	lnk       #0x8
    20b2:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac3(), str);
    20b4:	4f 0d 07    	rcall     0x3b54 <_dac16_get_dac3> <.LFB8> <.LFE7>
    20b6:	8e 00 78    	mov.w     w14, w1
    20b8:	f0 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    20ba:	11 42 80    	mov.w     0x842, w1
    20bc:	0e 00 78    	mov.w     w14, w0
    20be:	01 00 01    	call      w1
    parser_puts("\r\n");
    20c0:	11 42 80    	mov.w     0x842, w1
    20c2:	c0 63 29    	mov.w     #0x963c, w0
    20c4:	01 00 01    	call      w1
}
    20c6:	00 80 fa    	ulnk      
    20c8:	00 00 06    	return    

000020ca <_dac16_ch1_handler>:

void dac16_ch1_handler(char *args) {
    20ca:	0a 00 fa    	lnk       #0xa
    20cc:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t pos, neg;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    20ce:	00 00 eb    	clr.w     w0
    20d0:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    20d2:	66 00 47    	add.w     w14, #0x6, w0
    20d4:	00 01 78    	mov.w     w0, w2
    20d6:	f1 63 29    	mov.w     #0x963f, w1
    20d8:	4e 00 90    	mov.w     [w14+8], w0
    20da:	6f fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    20dc:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    20de:	1e 00 78    	mov.w     [w14], w0
    20e0:	00 00 e0    	cp0.w     w0
    20e2:	11 00 32    	bra       Z, 0x2106 <.L155>
    20e4:	3e 00 90    	mov.w     [w14+6], w0
    20e6:	00 00 e0    	cp0.w     w0
    20e8:	0e 00 32    	bra       Z, 0x2106 <.L155>
        if ((str2hex(arg1, &pos) == 0) && (str2hex(arg2, &neg) == 0)) {
    20ea:	0e 80 e8    	inc2.w    w14, w0
    20ec:	80 00 78    	mov.w     w0, w1
    20ee:	1e 00 78    	mov.w     [w14], w0
    20f0:	0f fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    20f2:	00 00 e0    	cp0.w     w0
    20f4:	08 00 3a    	bra       NZ, 0x2106 <.L155>
    20f6:	3e 00 90    	mov.w     [w14+6], w0
    20f8:	e4 00 47    	add.w     w14, #0x4, w1
    20fa:	0a fb 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    20fc:	00 00 e0    	cp0.w     w0
    20fe:	03 00 3a    	bra       NZ, 0x2106 <.L155>
            dac16_set_ch1(pos, neg);
    2100:	ae 00 90    	mov.w     [w14+4], w1
    2102:	1e 00 90    	mov.w     [w14+2], w0
    2104:	51 0d 07    	rcall     0x3ba8 <_dac16_set_ch1> <.LFB10> <.LFE9>

00002106 <.L155>:
        }
    }
}
    2106:	00 80 fa    	ulnk      
    2108:	00 00 06    	return    

0000210a <_dac16_ch1Q_handler>:

void dac16_ch1Q_handler(char *args) {
    210a:	08 00 fa    	lnk       #0x8
    210c:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac1(), str);
    210e:	ce 0c 07    	rcall     0x3aac <_dac16_get_dac1> <.LFB4> <.LFE3>
    2110:	8e 00 78    	mov.w     w14, w1
    2112:	c3 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2114:	11 42 80    	mov.w     0x842, w1
    2116:	0e 00 78    	mov.w     w14, w0
    2118:	01 00 01    	call      w1
    parser_putc(',');
    211a:	01 42 80    	mov.w     0x840, w1
    211c:	c0 c2 b3    	mov.b     #0x2c, w0
    211e:	01 00 01    	call      w1
    hex2str_alt(dac16_get_dac0(), str);
    2120:	9b 0c 07    	rcall     0x3a58 <_dac16_get_dac0> <.LFB2> <.LFE1>
    2122:	8e 00 78    	mov.w     w14, w1
    2124:	ba fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2126:	11 42 80    	mov.w     0x842, w1
    2128:	0e 00 78    	mov.w     w14, w0
    212a:	01 00 01    	call      w1
    parser_puts("\r\n");
    212c:	11 42 80    	mov.w     0x842, w1
    212e:	c0 63 29    	mov.w     #0x963c, w0
    2130:	01 00 01    	call      w1
}
    2132:	00 80 fa    	ulnk      
    2134:	00 00 06    	return    

00002136 <_dac16_ch2_handler>:

void dac16_ch2_handler(char *args) {
    2136:	0a 00 fa    	lnk       #0xa
    2138:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t pos, neg;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    213a:	00 00 eb    	clr.w     w0
    213c:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    213e:	66 00 47    	add.w     w14, #0x6, w0
    2140:	00 01 78    	mov.w     w0, w2
    2142:	f1 63 29    	mov.w     #0x963f, w1
    2144:	4e 00 90    	mov.w     [w14+8], w0
    2146:	39 fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2148:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    214a:	1e 00 78    	mov.w     [w14], w0
    214c:	00 00 e0    	cp0.w     w0
    214e:	11 00 32    	bra       Z, 0x2172 <.L158>
    2150:	3e 00 90    	mov.w     [w14+6], w0
    2152:	00 00 e0    	cp0.w     w0
    2154:	0e 00 32    	bra       Z, 0x2172 <.L158>
        if ((str2hex(arg1, &pos) == 0) && (str2hex(arg2, &neg) == 0)) {
    2156:	0e 80 e8    	inc2.w    w14, w0
    2158:	80 00 78    	mov.w     w0, w1
    215a:	1e 00 78    	mov.w     [w14], w0
    215c:	d9 fa 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    215e:	00 00 e0    	cp0.w     w0
    2160:	08 00 3a    	bra       NZ, 0x2172 <.L158>
    2162:	3e 00 90    	mov.w     [w14+6], w0
    2164:	e4 00 47    	add.w     w14, #0x4, w1
    2166:	d4 fa 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2168:	00 00 e0    	cp0.w     w0
    216a:	03 00 3a    	bra       NZ, 0x2172 <.L158>
            dac16_set_ch2(pos, neg);
    216c:	ae 00 90    	mov.w     [w14+4], w1
    216e:	1e 00 90    	mov.w     [w14+2], w0
    2170:	64 0d 07    	rcall     0x3c3a <_dac16_set_ch2> <.LFB11> <.LFE10>

00002172 <.L158>:
        }
    }
}
    2172:	00 80 fa    	ulnk      
    2174:	00 00 06    	return    

00002176 <_dac16_ch2Q_handler>:

void dac16_ch2Q_handler(char *args) {
    2176:	08 00 fa    	lnk       #0x8
    2178:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac3(), str);
    217a:	ec 0c 07    	rcall     0x3b54 <_dac16_get_dac3> <.LFB8> <.LFE7>
    217c:	8e 00 78    	mov.w     w14, w1
    217e:	8d fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2180:	11 42 80    	mov.w     0x842, w1
    2182:	0e 00 78    	mov.w     w14, w0
    2184:	01 00 01    	call      w1
    parser_putc(',');
    2186:	01 42 80    	mov.w     0x840, w1
    2188:	c0 c2 b3    	mov.b     #0x2c, w0
    218a:	01 00 01    	call      w1
    hex2str_alt(dac16_get_dac2(), str);
    218c:	b9 0c 07    	rcall     0x3b00 <_dac16_get_dac2> <.LFB6> <.LFE5>
    218e:	8e 00 78    	mov.w     w14, w1
    2190:	84 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2192:	11 42 80    	mov.w     0x842, w1
    2194:	0e 00 78    	mov.w     w14, w0
    2196:	01 00 01    	call      w1
    parser_puts("\r\n");
    2198:	11 42 80    	mov.w     0x842, w1
    219a:	c0 63 29    	mov.w     #0x963c, w0
    219c:	01 00 01    	call      w1
}
    219e:	00 80 fa    	ulnk      
    21a0:	00 00 06    	return    

000021a2 <_adc18_handler>:

// ADC18 commands
void adc18_handler(char *args) {
    21a2:	08 00 fa    	lnk       #0x8
    21a4:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    21a6:	00 00 eb    	clr.w     w0
    21a8:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    21aa:	64 00 47    	add.w     w14, #0x4, w0
    21ac:	00 01 78    	mov.w     w0, w2
    21ae:	21 62 29    	mov.w     #0x9622, w1
    21b0:	3e 00 90    	mov.w     [w14+6], w0
    21b2:	03 fc 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    21b4:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    21b6:	1e 00 90    	mov.w     [w14+2], w0
    21b8:	00 00 e0    	cp0.w     w0
    21ba:	1a 00 32    	bra       Z, 0x21f0 <.L161>
        for (i = 0; i < ADC18_TABLE_ENTRIES; i++) {
    21bc:	00 00 eb    	clr.w     w0
    21be:	00 0f 78    	mov.w     w0, [w14]
    21c0:	14 00 37    	bra       0x21ea <.L163>

000021c2 <.L165>:
            if (str_cmp(command, adc18_table[i].command) == 0) {
    21c2:	1e 00 78    	mov.w     [w14], w0
    21c4:	c2 00 dd    	sl.w      w0, #0x2, w1
    21c6:	00 3b 21    	mov.w     #0x13b0, w0
    21c8:	00 80 40    	add.w     w1, w0, w0
    21ca:	10 00 78    	mov.w     [w0], w0
    21cc:	80 00 78    	mov.w     w0, w1
    21ce:	1e 00 90    	mov.w     [w14+2], w0
    21d0:	99 fb 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    21d2:	00 00 e0    	cp0.w     w0
    21d4:	09 00 3a    	bra       NZ, 0x21e8 <.L164>
                adc18_table[i].handler(remainder);
    21d6:	1e 00 78    	mov.w     [w14], w0
    21d8:	42 00 dd    	sl.w      w0, #0x2, w0
    21da:	80 80 e8    	inc2.w    w0, w1
    21dc:	00 3b 21    	mov.w     #0x13b0, w0
    21de:	00 80 40    	add.w     w1, w0, w0
    21e0:	90 00 78    	mov.w     [w0], w1
    21e2:	2e 00 90    	mov.w     [w14+4], w0
    21e4:	01 00 01    	call      w1
                break;
    21e6:	04 00 37    	bra       0x21f0 <.L161>

000021e8 <.L164>:
    21e8:	1e 0f e8    	inc.w     [w14], [w14]

000021ea <.L163>:
    21ea:	1e 00 78    	mov.w     [w14], w0
    21ec:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    21ee:	e9 ff 36    	bra       LEU, 0x21c2 <.L165>

000021f0 <.L161>:
            }
        }
    }
}
    21f0:	00 80 fa    	ulnk      
    21f2:	00 00 06    	return    

000021f4 <_adc18_ch1Q_handler>:

void adc18_ch1Q_handler(char *args) {
    21f4:	0c 00 fa    	lnk       #0xc
    21f6:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc18_meas_ch1();
    21f8:	79 0d 07    	rcall     0x3cec <_adc18_meas_ch1> <.LFB13> <.LFE12>
    21fa:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    21fc:	1e 00 78    	mov.w     [w14], w0
    21fe:	e4 00 47    	add.w     w14, #0x4, w1
    2200:	4c fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2202:	11 42 80    	mov.w     0x842, w1
    2204:	64 00 47    	add.w     w14, #0x4, w0
    2206:	01 00 01    	call      w1
    parser_putc(',');
    2208:	01 42 80    	mov.w     0x840, w1
    220a:	c0 c2 b3    	mov.b     #0x2c, w0
    220c:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    220e:	1e 00 be    	mov.d     [w14], w0
    2210:	40 08 de    	lsr.w     w1, #0x0, w0
    2212:	00 00 78    	mov.w     w0, w0
    2214:	e4 00 47    	add.w     w14, #0x4, w1
    2216:	41 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2218:	11 42 80    	mov.w     0x842, w1
    221a:	64 00 47    	add.w     w14, #0x4, w0
    221c:	01 00 01    	call      w1
    parser_puts("\r\n");
    221e:	11 42 80    	mov.w     0x842, w1
    2220:	c0 63 29    	mov.w     #0x963c, w0
    2222:	01 00 01    	call      w1
}
    2224:	00 80 fa    	ulnk      
    2226:	00 00 06    	return    

00002228 <_adc18_ch2Q_handler>:

void adc18_ch2Q_handler(char *args) {
    2228:	0c 00 fa    	lnk       #0xc
    222a:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc18_meas_ch2();
    222c:	e4 0d 07    	rcall     0x3df6 <_adc18_meas_ch2> <.LFB14> <.LFE13>
    222e:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    2230:	1e 00 78    	mov.w     [w14], w0
    2232:	e4 00 47    	add.w     w14, #0x4, w1
    2234:	32 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2236:	11 42 80    	mov.w     0x842, w1
    2238:	64 00 47    	add.w     w14, #0x4, w0
    223a:	01 00 01    	call      w1
    parser_putc(',');
    223c:	01 42 80    	mov.w     0x840, w1
    223e:	c0 c2 b3    	mov.b     #0x2c, w0
    2240:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    2242:	1e 00 be    	mov.d     [w14], w0
    2244:	40 08 de    	lsr.w     w1, #0x0, w0
    2246:	00 00 78    	mov.w     w0, w0
    2248:	e4 00 47    	add.w     w14, #0x4, w1
    224a:	27 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    224c:	11 42 80    	mov.w     0x842, w1
    224e:	64 00 47    	add.w     w14, #0x4, w0
    2250:	01 00 01    	call      w1
    parser_puts("\r\n");
    2252:	11 42 80    	mov.w     0x842, w1
    2254:	c0 63 29    	mov.w     #0x963c, w0
    2256:	01 00 01    	call      w1
}
    2258:	00 80 fa    	ulnk      
    225a:	00 00 06    	return    

0000225c <_adc18_ch1avgQ_handler>:

void adc18_ch1avgQ_handler(char *args) {
    225c:	0c 00 fa    	lnk       #0xc
    225e:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc18_meas_ch1_avg();
    2260:	56 0f 07    	rcall     0x410e <_adc18_meas_ch1_avg> <.LFB16> <.LFE15>
    2262:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    2264:	1e 00 78    	mov.w     [w14], w0
    2266:	e4 00 47    	add.w     w14, #0x4, w1
    2268:	18 fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    226a:	11 42 80    	mov.w     0x842, w1
    226c:	64 00 47    	add.w     w14, #0x4, w0
    226e:	01 00 01    	call      w1
    parser_putc(',');
    2270:	01 42 80    	mov.w     0x840, w1
    2272:	c0 c2 b3    	mov.b     #0x2c, w0
    2274:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    2276:	1e 00 be    	mov.d     [w14], w0
    2278:	40 08 de    	lsr.w     w1, #0x0, w0
    227a:	00 00 78    	mov.w     w0, w0
    227c:	e4 00 47    	add.w     w14, #0x4, w1
    227e:	0d fb 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2280:	11 42 80    	mov.w     0x842, w1
    2282:	64 00 47    	add.w     w14, #0x4, w0
    2284:	01 00 01    	call      w1
    parser_puts("\r\n");
    2286:	11 42 80    	mov.w     0x842, w1
    2288:	c0 63 29    	mov.w     #0x963c, w0
    228a:	01 00 01    	call      w1
}
    228c:	00 80 fa    	ulnk      
    228e:	00 00 06    	return    

00002290 <_adc18_ch2avgQ_handler>:

void adc18_ch2avgQ_handler(char *args) {
    2290:	0c 00 fa    	lnk       #0xc
    2292:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc18_meas_ch2_avg();
    2294:	5c 0f 07    	rcall     0x414e <_adc18_meas_ch2_avg> <.LFB17> <.LFE16>
    2296:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    2298:	1e 00 78    	mov.w     [w14], w0
    229a:	e4 00 47    	add.w     w14, #0x4, w1
    229c:	fe fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    229e:	11 42 80    	mov.w     0x842, w1
    22a0:	64 00 47    	add.w     w14, #0x4, w0
    22a2:	01 00 01    	call      w1
    parser_putc(',');
    22a4:	01 42 80    	mov.w     0x840, w1
    22a6:	c0 c2 b3    	mov.b     #0x2c, w0
    22a8:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    22aa:	1e 00 be    	mov.d     [w14], w0
    22ac:	40 08 de    	lsr.w     w1, #0x0, w0
    22ae:	00 00 78    	mov.w     w0, w0
    22b0:	e4 00 47    	add.w     w14, #0x4, w1
    22b2:	f3 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    22b4:	11 42 80    	mov.w     0x842, w1
    22b6:	64 00 47    	add.w     w14, #0x4, w0
    22b8:	01 00 01    	call      w1
    parser_puts("\r\n");
    22ba:	11 42 80    	mov.w     0x842, w1
    22bc:	c0 63 29    	mov.w     #0x963c, w0
    22be:	01 00 01    	call      w1
}
    22c0:	00 80 fa    	ulnk      
    22c2:	00 00 06    	return    

000022c4 <_adc18_bothQ_handler>:

void adc18_bothQ_handler(char *args) {
    22c4:	10 00 fa    	lnk       #0x10
    22c6:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc18_meas_both(&val1, &val2);
    22c8:	64 00 47    	add.w     w14, #0x4, w0
    22ca:	80 00 78    	mov.w     w0, w1
    22cc:	0e 00 78    	mov.w     w14, w0
    22ce:	18 0e 07    	rcall     0x3f00 <_adc18_meas_both> <.LFB15> <.LFE14>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    22d0:	1e 00 be    	mov.d     [w14], w0
    22d2:	00 00 78    	mov.w     w0, w0
    22d4:	e8 00 47    	add.w     w14, #0x8, w1
    22d6:	e1 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    22d8:	11 42 80    	mov.w     0x842, w1
    22da:	68 00 47    	add.w     w14, #0x8, w0
    22dc:	01 00 01    	call      w1
    parser_putc(',');
    22de:	01 42 80    	mov.w     0x840, w1
    22e0:	c0 c2 b3    	mov.b     #0x2c, w0
    22e2:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    22e4:	1e 00 be    	mov.d     [w14], w0
    22e6:	40 08 de    	lsr.w     w1, #0x0, w0
    22e8:	00 00 78    	mov.w     w0, w0
    22ea:	e8 00 47    	add.w     w14, #0x8, w1
    22ec:	d6 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    22ee:	11 42 80    	mov.w     0x842, w1
    22f0:	68 00 47    	add.w     w14, #0x8, w0
    22f2:	01 00 01    	call      w1
    parser_putc(',');
    22f4:	01 42 80    	mov.w     0x840, w1
    22f6:	c0 c2 b3    	mov.b     #0x2c, w0
    22f8:	01 00 01    	call      w1
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    22fa:	2e 00 90    	mov.w     [w14+4], w0
    22fc:	be 00 90    	mov.w     [w14+6], w1
    22fe:	00 00 78    	mov.w     w0, w0
    2300:	e8 00 47    	add.w     w14, #0x8, w1
    2302:	cb fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2304:	11 42 80    	mov.w     0x842, w1
    2306:	68 00 47    	add.w     w14, #0x8, w0
    2308:	01 00 01    	call      w1
    parser_putc(',');
    230a:	01 42 80    	mov.w     0x840, w1
    230c:	c0 c2 b3    	mov.b     #0x2c, w0
    230e:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    2310:	2e 00 90    	mov.w     [w14+4], w0
    2312:	be 00 90    	mov.w     [w14+6], w1
    2314:	40 08 de    	lsr.w     w1, #0x0, w0
    2316:	00 00 78    	mov.w     w0, w0
    2318:	e8 00 47    	add.w     w14, #0x8, w1
    231a:	bf fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    231c:	11 42 80    	mov.w     0x842, w1
    231e:	68 00 47    	add.w     w14, #0x8, w0
    2320:	01 00 01    	call      w1
    parser_puts("\r\n");
    2322:	11 42 80    	mov.w     0x842, w1
    2324:	c0 63 29    	mov.w     #0x963c, w0
    2326:	01 00 01    	call      w1
}
    2328:	00 80 fa    	ulnk      
    232a:	00 00 06    	return    

0000232c <_adc18_bothavgQ_handler>:

void adc18_bothavgQ_handler(char *args) {
    232c:	10 00 fa    	lnk       #0x10
    232e:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc18_meas_both_avg(&val1, &val2);
    2330:	64 00 47    	add.w     w14, #0x4, w0
    2332:	80 00 78    	mov.w     w0, w1
    2334:	0e 00 78    	mov.w     w14, w0
    2336:	2b 0f 07    	rcall     0x418e <_adc18_meas_both_avg> <.LFB18> <.LFE17>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    2338:	1e 00 be    	mov.d     [w14], w0
    233a:	00 00 78    	mov.w     w0, w0
    233c:	e8 00 47    	add.w     w14, #0x8, w1
    233e:	ad fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2340:	11 42 80    	mov.w     0x842, w1
    2342:	68 00 47    	add.w     w14, #0x8, w0
    2344:	01 00 01    	call      w1
    parser_putc(',');
    2346:	01 42 80    	mov.w     0x840, w1
    2348:	c0 c2 b3    	mov.b     #0x2c, w0
    234a:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    234c:	1e 00 be    	mov.d     [w14], w0
    234e:	40 08 de    	lsr.w     w1, #0x0, w0
    2350:	00 00 78    	mov.w     w0, w0
    2352:	e8 00 47    	add.w     w14, #0x8, w1
    2354:	a2 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2356:	11 42 80    	mov.w     0x842, w1
    2358:	68 00 47    	add.w     w14, #0x8, w0
    235a:	01 00 01    	call      w1
    parser_putc(',');
    235c:	01 42 80    	mov.w     0x840, w1
    235e:	c0 c2 b3    	mov.b     #0x2c, w0
    2360:	01 00 01    	call      w1
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    2362:	2e 00 90    	mov.w     [w14+4], w0
    2364:	be 00 90    	mov.w     [w14+6], w1
    2366:	00 00 78    	mov.w     w0, w0
    2368:	e8 00 47    	add.w     w14, #0x8, w1
    236a:	97 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    236c:	11 42 80    	mov.w     0x842, w1
    236e:	68 00 47    	add.w     w14, #0x8, w0
    2370:	01 00 01    	call      w1
    parser_putc(',');
    2372:	01 42 80    	mov.w     0x840, w1
    2374:	c0 c2 b3    	mov.b     #0x2c, w0
    2376:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    2378:	2e 00 90    	mov.w     [w14+4], w0
    237a:	be 00 90    	mov.w     [w14+6], w1
    237c:	40 08 de    	lsr.w     w1, #0x0, w0
    237e:	00 00 78    	mov.w     w0, w0
    2380:	e8 00 47    	add.w     w14, #0x8, w1
    2382:	8b fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2384:	11 42 80    	mov.w     0x842, w1
    2386:	68 00 47    	add.w     w14, #0x8, w0
    2388:	01 00 01    	call      w1
    parser_puts("\r\n");
    238a:	11 42 80    	mov.w     0x842, w1
    238c:	c0 63 29    	mov.w     #0x963c, w0
    238e:	01 00 01    	call      w1
}
    2390:	00 80 fa    	ulnk      
    2392:	00 00 06    	return    

00002394 <_mode_handler>:

// MODE commands
void mode_handler(char *args) {
    2394:	08 00 fa    	lnk       #0x8
    2396:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    2398:	00 00 eb    	clr.w     w0
    239a:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    239c:	64 00 47    	add.w     w14, #0x4, w0
    239e:	00 01 78    	mov.w     w0, w2
    23a0:	21 62 29    	mov.w     #0x9622, w1
    23a2:	3e 00 90    	mov.w     [w14+6], w0
    23a4:	0a fb 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    23a6:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    23a8:	1e 00 90    	mov.w     [w14+2], w0
    23aa:	00 00 e0    	cp0.w     w0
    23ac:	1a 00 32    	bra       Z, 0x23e2 <.L172>
        for (i = 0; i < MODE_TABLE_ENTRIES; i++) {
    23ae:	00 00 eb    	clr.w     w0
    23b0:	00 0f 78    	mov.w     w0, [w14]
    23b2:	14 00 37    	bra       0x23dc <.L174>

000023b4 <.L176>:
            if (str_cmp(command, mode_table[i].command) == 0) {
    23b4:	1e 00 78    	mov.w     [w14], w0
    23b6:	c2 00 dd    	sl.w      w0, #0x2, w1
    23b8:	80 3c 21    	mov.w     #0x13c8, w0
    23ba:	00 80 40    	add.w     w1, w0, w0
    23bc:	10 00 78    	mov.w     [w0], w0
    23be:	80 00 78    	mov.w     w0, w1
    23c0:	1e 00 90    	mov.w     [w14+2], w0
    23c2:	a0 fa 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    23c4:	00 00 e0    	cp0.w     w0
    23c6:	09 00 3a    	bra       NZ, 0x23da <.L175>
                mode_table[i].handler(remainder);
    23c8:	1e 00 78    	mov.w     [w14], w0
    23ca:	42 00 dd    	sl.w      w0, #0x2, w0
    23cc:	80 80 e8    	inc2.w    w0, w1
    23ce:	80 3c 21    	mov.w     #0x13c8, w0
    23d0:	00 80 40    	add.w     w1, w0, w0
    23d2:	90 00 78    	mov.w     [w0], w1
    23d4:	2e 00 90    	mov.w     [w14+4], w0
    23d6:	01 00 01    	call      w1
                break;
    23d8:	04 00 37    	bra       0x23e2 <.L172>

000023da <.L175>:
    23da:	1e 0f e8    	inc.w     [w14], [w14]

000023dc <.L174>:
    23dc:	1e 00 78    	mov.w     [w14], w0
    23de:	ff 0f 50    	sub.w     w0, #0x1f, [w15]
    23e0:	e9 ff 36    	bra       LEU, 0x23b4 <.L176>

000023e2 <.L172>:
            }
        }
    }
}
    23e2:	00 80 fa    	ulnk      
    23e4:	00 00 06    	return    

000023e6 <_portd_handler>:

void portd_handler(char *args) {
    23e6:	08 00 fa    	lnk       #0x8
    23e8:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    23ea:	00 00 eb    	clr.w     w0
    23ec:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    23ee:	0e 80 e8    	inc2.w    w14, w0
    23f0:	00 01 78    	mov.w     w0, w2
    23f2:	f1 63 29    	mov.w     #0x963f, w1
    23f4:	3e 00 90    	mov.w     [w14+6], w0
    23f6:	e1 fa 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    23f8:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    23fa:	1e 00 78    	mov.w     [w14], w0
    23fc:	00 00 e0    	cp0.w     w0
    23fe:	0e 00 32    	bra       Z, 0x241c <.L177>
    2400:	64 00 47    	add.w     w14, #0x4, w0
    2402:	80 00 78    	mov.w     w0, w1
    2404:	1e 00 78    	mov.w     [w14], w0
    2406:	84 f9 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2408:	00 00 e0    	cp0.w     w0
    240a:	08 00 3a    	bra       NZ, 0x241c <.L177>
        LATD = (LATD & 0xFF80) | (val & 0x7F);
    240c:	e1 16 80    	mov.w     0x2dc, w1
    240e:	00 f8 2f    	mov.w     #0xff80, w0
    2410:	80 80 60    	and.w     w1, w0, w1
    2412:	2e 01 90    	mov.w     [w14+4], w2
    2414:	f0 07 20    	mov.w     #0x7f, w0
    2416:	00 00 61    	and.w     w2, w0, w0
    2418:	01 00 70    	ior.w     w0, w1, w0
    241a:	e0 16 88    	mov.w     w0, 0x2dc

0000241c <.L177>:
    }
}
    241c:	00 80 fa    	ulnk      
    241e:	00 00 06    	return    

00002420 <_portdQ_handler>:

void portdQ_handler(char *args) {
    2420:	08 00 fa    	lnk       #0x8
    2422:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PORTD & 0x7F, str);
    2424:	d1 16 80    	mov.w     0x2da, w1
    2426:	f0 07 20    	mov.w     #0x7f, w0
    2428:	00 80 60    	and.w     w1, w0, w0
    242a:	8e 00 78    	mov.w     w14, w1
    242c:	36 fa 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    242e:	11 42 80    	mov.w     0x842, w1
    2430:	0e 00 78    	mov.w     w14, w0
    2432:	01 00 01    	call      w1
    parser_puts("\r\n");
    2434:	11 42 80    	mov.w     0x842, w1
    2436:	c0 63 29    	mov.w     #0x963c, w0
    2438:	01 00 01    	call      w1
}
    243a:	00 80 fa    	ulnk      
    243c:	00 00 06    	return    

0000243e <_rd0_handler>:

void rd0_handler(char *args) {
    243e:	08 00 fa    	lnk       #0x8
    2440:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2442:	00 00 eb    	clr.w     w0
    2444:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2446:	0e 80 e8    	inc2.w    w14, w0
    2448:	00 01 78    	mov.w     w0, w2
    244a:	21 62 29    	mov.w     #0x9622, w1
    244c:	3e 00 90    	mov.w     [w14+6], w0
    244e:	b5 fa 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2450:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2452:	1e 00 78    	mov.w     [w14], w0
    2454:	00 00 e0    	cp0.w     w0
    2456:	33 00 32    	bra       Z, 0x24be <.L180>
        if (str_cmp(token, "ON") == 0) {
    2458:	61 62 29    	mov.w     #0x9626, w1
    245a:	1e 00 78    	mov.w     [w14], w0
    245c:	53 fa 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    245e:	00 00 e0    	cp0.w     w0
    2460:	02 00 3a    	bra       NZ, 0x2466 <.L182>
            RD0_ = ON;
    2462:	dc 02 a8    	bset.b    0x2dc, #0x0
    2464:	2c 00 37    	bra       0x24be <.L180>

00002466 <.L182>:
        } else if (str_cmp(token, "OFF") == 0) {
    2466:	91 62 29    	mov.w     #0x9629, w1
    2468:	1e 00 78    	mov.w     [w14], w0
    246a:	4c fa 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    246c:	00 00 e0    	cp0.w     w0
    246e:	02 00 3a    	bra       NZ, 0x2474 <.L183>
            RD0_ = OFF;
    2470:	dc 02 a9    	bclr.b    0x2dc, #0x0
    2472:	25 00 37    	bra       0x24be <.L180>

00002474 <.L183>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2474:	d1 62 29    	mov.w     #0x962d, w1
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	45 fa 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    247a:	00 00 e0    	cp0.w     w0
    247c:	0e 00 3a    	bra       NZ, 0x249a <.L184>
            RD0_ = !RD0_;
    247e:	e0 16 80    	mov.w     0x2dc, w0
    2480:	61 00 60    	and.w     w0, #0x1, w0
    2482:	00 f0 a7    	btsc.w    w0, #0xf
    2484:	00 00 ea    	neg.w     w0, w0
    2486:	00 00 e9    	dec.w     w0, w0
    2488:	4f 00 de    	lsr.w     w0, #0xf, w0
    248a:	00 40 78    	mov.b     w0, w0
    248c:	00 80 fb    	ze        w0, w0
    248e:	61 00 60    	and.w     w0, #0x1, w0
    2490:	e1 16 80    	mov.w     0x2dc, w1
    2492:	01 00 a1    	bclr.w    w1, #0x0
    2494:	01 00 70    	ior.w     w0, w1, w0
    2496:	e0 16 88    	mov.w     w0, 0x2dc
    2498:	12 00 37    	bra       0x24be <.L180>

0000249a <.L184>:
        } else if (str2hex(token, &val) == 0) {
    249a:	64 00 47    	add.w     w14, #0x4, w0
    249c:	80 00 78    	mov.w     w0, w1
    249e:	1e 00 78    	mov.w     [w14], w0
    24a0:	37 f9 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    24a2:	00 00 e0    	cp0.w     w0
    24a4:	0c 00 3a    	bra       NZ, 0x24be <.L180>
            RD0_ = (val) ? 1 : 0;
    24a6:	2e 00 90    	mov.w     [w14+4], w0
    24a8:	00 f0 a7    	btsc.w    w0, #0xf
    24aa:	00 00 ea    	neg.w     w0, w0
    24ac:	00 00 ea    	neg.w     w0, w0
    24ae:	4f 00 de    	lsr.w     w0, #0xf, w0
    24b0:	00 40 78    	mov.b     w0, w0
    24b2:	00 80 fb    	ze        w0, w0
    24b4:	61 00 60    	and.w     w0, #0x1, w0
    24b6:	e1 16 80    	mov.w     0x2dc, w1
    24b8:	01 00 a1    	bclr.w    w1, #0x0
    24ba:	01 00 70    	ior.w     w0, w1, w0
    24bc:	e0 16 88    	mov.w     w0, 0x2dc

000024be <.L180>:
        }
    }
}
    24be:	00 80 fa    	ulnk      
    24c0:	00 00 06    	return    

000024c2 <_rd0Q_handler>:

void rd0Q_handler(char *args) {
    24c2:	02 00 fa    	lnk       #0x2
    24c4:	00 0f 78    	mov.w     w0, [w14]
    if (RD0_ == ON)
    24c6:	e0 16 80    	mov.w     0x2dc, w0
    24c8:	61 00 60    	and.w     w0, #0x1, w0
    24ca:	00 00 e0    	cp0.w     w0
    24cc:	04 00 32    	bra       Z, 0x24d6 <.L186>
        parser_puts("1\r\n");
    24ce:	11 42 80    	mov.w     0x842, w1
    24d0:	40 63 29    	mov.w     #0x9634, w0
    24d2:	01 00 01    	call      w1
    24d4:	03 00 37    	bra       0x24dc <.L185>

000024d6 <.L186>:
    else
        parser_puts("0\r\n");
    24d6:	11 42 80    	mov.w     0x842, w1
    24d8:	80 63 29    	mov.w     #0x9638, w0
    24da:	01 00 01    	call      w1

000024dc <.L185>:
}
    24dc:	00 80 fa    	ulnk      
    24de:	00 00 06    	return    

000024e0 <_rd1_handler>:

void rd1_handler(char *args) {
    24e0:	08 00 fa    	lnk       #0x8
    24e2:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    24e4:	00 00 eb    	clr.w     w0
    24e6:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    24e8:	0e 80 e8    	inc2.w    w14, w0
    24ea:	00 01 78    	mov.w     w0, w2
    24ec:	21 62 29    	mov.w     #0x9622, w1
    24ee:	3e 00 90    	mov.w     [w14+6], w0
    24f0:	64 fa 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    24f2:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    24f4:	1e 00 78    	mov.w     [w14], w0
    24f6:	00 00 e0    	cp0.w     w0
    24f8:	35 00 32    	bra       Z, 0x2564 <.L188>
        if (str_cmp(token, "ON") == 0) {
    24fa:	61 62 29    	mov.w     #0x9626, w1
    24fc:	1e 00 78    	mov.w     [w14], w0
    24fe:	02 fa 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2500:	00 00 e0    	cp0.w     w0
    2502:	02 00 3a    	bra       NZ, 0x2508 <.L190>
            RD1_ = ON;
    2504:	dc 22 a8    	bset.b    0x2dc, #0x1
    2506:	2e 00 37    	bra       0x2564 <.L188>

00002508 <.L190>:
        } else if (str_cmp(token, "OFF") == 0) {
    2508:	91 62 29    	mov.w     #0x9629, w1
    250a:	1e 00 78    	mov.w     [w14], w0
    250c:	fb f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    250e:	00 00 e0    	cp0.w     w0
    2510:	02 00 3a    	bra       NZ, 0x2516 <.L191>
            RD1_ = OFF;
    2512:	dc 22 a9    	bclr.b    0x2dc, #0x1
    2514:	27 00 37    	bra       0x2564 <.L188>

00002516 <.L191>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2516:	d1 62 29    	mov.w     #0x962d, w1
    2518:	1e 00 78    	mov.w     [w14], w0
    251a:	f4 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    251c:	00 00 e0    	cp0.w     w0
    251e:	0f 00 3a    	bra       NZ, 0x253e <.L192>
            RD1_ = !RD1_;
    2520:	e0 16 80    	mov.w     0x2dc, w0
    2522:	62 00 60    	and.w     w0, #0x2, w0
    2524:	00 f0 a7    	btsc.w    w0, #0xf
    2526:	00 00 ea    	neg.w     w0, w0
    2528:	00 00 e9    	dec.w     w0, w0
    252a:	4f 00 de    	lsr.w     w0, #0xf, w0
    252c:	00 40 78    	mov.b     w0, w0
    252e:	00 80 fb    	ze        w0, w0
    2530:	61 00 60    	and.w     w0, #0x1, w0
    2532:	00 00 40    	add.w     w0, w0, w0
    2534:	e1 16 80    	mov.w     0x2dc, w1
    2536:	01 10 a1    	bclr.w    w1, #0x1
    2538:	01 00 70    	ior.w     w0, w1, w0
    253a:	e0 16 88    	mov.w     w0, 0x2dc
    253c:	13 00 37    	bra       0x2564 <.L188>

0000253e <.L192>:
        } else if (str2hex(token, &val) == 0) {
    253e:	64 00 47    	add.w     w14, #0x4, w0
    2540:	80 00 78    	mov.w     w0, w1
    2542:	1e 00 78    	mov.w     [w14], w0
    2544:	e5 f8 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2546:	00 00 e0    	cp0.w     w0
    2548:	0d 00 3a    	bra       NZ, 0x2564 <.L188>
            RD1_ = (val) ? 1 : 0;
    254a:	2e 00 90    	mov.w     [w14+4], w0
    254c:	00 f0 a7    	btsc.w    w0, #0xf
    254e:	00 00 ea    	neg.w     w0, w0
    2550:	00 00 ea    	neg.w     w0, w0
    2552:	4f 00 de    	lsr.w     w0, #0xf, w0
    2554:	00 40 78    	mov.b     w0, w0
    2556:	00 80 fb    	ze        w0, w0
    2558:	61 00 60    	and.w     w0, #0x1, w0
    255a:	00 00 40    	add.w     w0, w0, w0
    255c:	e1 16 80    	mov.w     0x2dc, w1
    255e:	01 10 a1    	bclr.w    w1, #0x1
    2560:	01 00 70    	ior.w     w0, w1, w0
    2562:	e0 16 88    	mov.w     w0, 0x2dc

00002564 <.L188>:
        }
    }
}
    2564:	00 80 fa    	ulnk      
    2566:	00 00 06    	return    

00002568 <_rd1Q_handler>:

void rd1Q_handler(char *args) {
    2568:	02 00 fa    	lnk       #0x2
    256a:	00 0f 78    	mov.w     w0, [w14]
    if (RD1_ == ON)
    256c:	e0 16 80    	mov.w     0x2dc, w0
    256e:	62 00 60    	and.w     w0, #0x2, w0
    2570:	00 00 e0    	cp0.w     w0
    2572:	04 00 32    	bra       Z, 0x257c <.L194>
        parser_puts("1\r\n");
    2574:	11 42 80    	mov.w     0x842, w1
    2576:	40 63 29    	mov.w     #0x9634, w0
    2578:	01 00 01    	call      w1
    257a:	03 00 37    	bra       0x2582 <.L193>

0000257c <.L194>:
    else
        parser_puts("0\r\n");
    257c:	11 42 80    	mov.w     0x842, w1
    257e:	80 63 29    	mov.w     #0x9638, w0
    2580:	01 00 01    	call      w1

00002582 <.L193>:
}
    2582:	00 80 fa    	ulnk      
    2584:	00 00 06    	return    

00002586 <_rd2_handler>:

void rd2_handler(char *args) {
    2586:	08 00 fa    	lnk       #0x8
    2588:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    258a:	00 00 eb    	clr.w     w0
    258c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    258e:	0e 80 e8    	inc2.w    w14, w0
    2590:	00 01 78    	mov.w     w0, w2
    2592:	21 62 29    	mov.w     #0x9622, w1
    2594:	3e 00 90    	mov.w     [w14+6], w0
    2596:	11 fa 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2598:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	00 00 e0    	cp0.w     w0
    259e:	35 00 32    	bra       Z, 0x260a <.L196>
        if (str_cmp(token, "ON") == 0) {
    25a0:	61 62 29    	mov.w     #0x9626, w1
    25a2:	1e 00 78    	mov.w     [w14], w0
    25a4:	af f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    25a6:	00 00 e0    	cp0.w     w0
    25a8:	02 00 3a    	bra       NZ, 0x25ae <.L198>
            RD2_ = ON;
    25aa:	dc 42 a8    	bset.b    0x2dc, #0x2
    25ac:	2e 00 37    	bra       0x260a <.L196>

000025ae <.L198>:
        } else if (str_cmp(token, "OFF") == 0) {
    25ae:	91 62 29    	mov.w     #0x9629, w1
    25b0:	1e 00 78    	mov.w     [w14], w0
    25b2:	a8 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    25b4:	00 00 e0    	cp0.w     w0
    25b6:	02 00 3a    	bra       NZ, 0x25bc <.L199>
            RD2_ = OFF;
    25b8:	dc 42 a9    	bclr.b    0x2dc, #0x2
    25ba:	27 00 37    	bra       0x260a <.L196>

000025bc <.L199>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    25bc:	d1 62 29    	mov.w     #0x962d, w1
    25be:	1e 00 78    	mov.w     [w14], w0
    25c0:	a1 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    25c2:	00 00 e0    	cp0.w     w0
    25c4:	0f 00 3a    	bra       NZ, 0x25e4 <.L200>
            RD2_ = !RD2_;
    25c6:	e0 16 80    	mov.w     0x2dc, w0
    25c8:	64 00 60    	and.w     w0, #0x4, w0
    25ca:	00 f0 a7    	btsc.w    w0, #0xf
    25cc:	00 00 ea    	neg.w     w0, w0
    25ce:	00 00 e9    	dec.w     w0, w0
    25d0:	4f 00 de    	lsr.w     w0, #0xf, w0
    25d2:	00 40 78    	mov.b     w0, w0
    25d4:	00 80 fb    	ze        w0, w0
    25d6:	61 00 60    	and.w     w0, #0x1, w0
    25d8:	42 00 dd    	sl.w      w0, #0x2, w0
    25da:	e1 16 80    	mov.w     0x2dc, w1
    25dc:	01 20 a1    	bclr.w    w1, #0x2
    25de:	01 00 70    	ior.w     w0, w1, w0
    25e0:	e0 16 88    	mov.w     w0, 0x2dc
    25e2:	13 00 37    	bra       0x260a <.L196>

000025e4 <.L200>:
        } else if (str2hex(token, &val) == 0) {
    25e4:	64 00 47    	add.w     w14, #0x4, w0
    25e6:	80 00 78    	mov.w     w0, w1
    25e8:	1e 00 78    	mov.w     [w14], w0
    25ea:	92 f8 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    25ec:	00 00 e0    	cp0.w     w0
    25ee:	0d 00 3a    	bra       NZ, 0x260a <.L196>
            RD2_ = (val) ? 1 : 0;
    25f0:	2e 00 90    	mov.w     [w14+4], w0
    25f2:	00 f0 a7    	btsc.w    w0, #0xf
    25f4:	00 00 ea    	neg.w     w0, w0
    25f6:	00 00 ea    	neg.w     w0, w0
    25f8:	4f 00 de    	lsr.w     w0, #0xf, w0
    25fa:	00 40 78    	mov.b     w0, w0
    25fc:	00 80 fb    	ze        w0, w0
    25fe:	61 00 60    	and.w     w0, #0x1, w0
    2600:	42 00 dd    	sl.w      w0, #0x2, w0
    2602:	e1 16 80    	mov.w     0x2dc, w1
    2604:	01 20 a1    	bclr.w    w1, #0x2
    2606:	01 00 70    	ior.w     w0, w1, w0
    2608:	e0 16 88    	mov.w     w0, 0x2dc

0000260a <.L196>:
        }
    }
}
    260a:	00 80 fa    	ulnk      
    260c:	00 00 06    	return    

0000260e <_rd2Q_handler>:

void rd2Q_handler(char *args) {
    260e:	02 00 fa    	lnk       #0x2
    2610:	00 0f 78    	mov.w     w0, [w14]
    if (RD2_ == ON)
    2612:	e0 16 80    	mov.w     0x2dc, w0
    2614:	64 00 60    	and.w     w0, #0x4, w0
    2616:	00 00 e0    	cp0.w     w0
    2618:	04 00 32    	bra       Z, 0x2622 <.L202>
        parser_puts("1\r\n");
    261a:	11 42 80    	mov.w     0x842, w1
    261c:	40 63 29    	mov.w     #0x9634, w0
    261e:	01 00 01    	call      w1
    2620:	03 00 37    	bra       0x2628 <.L201>

00002622 <.L202>:
    else
        parser_puts("0\r\n");
    2622:	11 42 80    	mov.w     0x842, w1
    2624:	80 63 29    	mov.w     #0x9638, w0
    2626:	01 00 01    	call      w1

00002628 <.L201>:
}
    2628:	00 80 fa    	ulnk      
    262a:	00 00 06    	return    

0000262c <_rd3_handler>:

void rd3_handler(char *args) {
    262c:	08 00 fa    	lnk       #0x8
    262e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2630:	00 00 eb    	clr.w     w0
    2632:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2634:	0e 80 e8    	inc2.w    w14, w0
    2636:	00 01 78    	mov.w     w0, w2
    2638:	21 62 29    	mov.w     #0x9622, w1
    263a:	3e 00 90    	mov.w     [w14+6], w0
    263c:	be f9 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    263e:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2640:	1e 00 78    	mov.w     [w14], w0
    2642:	00 00 e0    	cp0.w     w0
    2644:	35 00 32    	bra       Z, 0x26b0 <.L204>
        if (str_cmp(token, "ON") == 0) {
    2646:	61 62 29    	mov.w     #0x9626, w1
    2648:	1e 00 78    	mov.w     [w14], w0
    264a:	5c f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    264c:	00 00 e0    	cp0.w     w0
    264e:	02 00 3a    	bra       NZ, 0x2654 <.L206>
            RD3_ = ON;
    2650:	dc 62 a8    	bset.b    0x2dc, #0x3
    2652:	2e 00 37    	bra       0x26b0 <.L204>

00002654 <.L206>:
        } else if (str_cmp(token, "OFF") == 0) {
    2654:	91 62 29    	mov.w     #0x9629, w1
    2656:	1e 00 78    	mov.w     [w14], w0
    2658:	55 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    265a:	00 00 e0    	cp0.w     w0
    265c:	02 00 3a    	bra       NZ, 0x2662 <.L207>
            RD3_ = OFF;
    265e:	dc 62 a9    	bclr.b    0x2dc, #0x3
    2660:	27 00 37    	bra       0x26b0 <.L204>

00002662 <.L207>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2662:	d1 62 29    	mov.w     #0x962d, w1
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	4e f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2668:	00 00 e0    	cp0.w     w0
    266a:	0f 00 3a    	bra       NZ, 0x268a <.L208>
            RD3_ = !RD3_;
    266c:	e0 16 80    	mov.w     0x2dc, w0
    266e:	68 00 60    	and.w     w0, #0x8, w0
    2670:	00 f0 a7    	btsc.w    w0, #0xf
    2672:	00 00 ea    	neg.w     w0, w0
    2674:	00 00 e9    	dec.w     w0, w0
    2676:	4f 00 de    	lsr.w     w0, #0xf, w0
    2678:	00 40 78    	mov.b     w0, w0
    267a:	00 80 fb    	ze        w0, w0
    267c:	61 00 60    	and.w     w0, #0x1, w0
    267e:	43 00 dd    	sl.w      w0, #0x3, w0
    2680:	e1 16 80    	mov.w     0x2dc, w1
    2682:	01 30 a1    	bclr.w    w1, #0x3
    2684:	01 00 70    	ior.w     w0, w1, w0
    2686:	e0 16 88    	mov.w     w0, 0x2dc
    2688:	13 00 37    	bra       0x26b0 <.L204>

0000268a <.L208>:
        } else if (str2hex(token, &val) == 0) {
    268a:	64 00 47    	add.w     w14, #0x4, w0
    268c:	80 00 78    	mov.w     w0, w1
    268e:	1e 00 78    	mov.w     [w14], w0
    2690:	3f f8 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2692:	00 00 e0    	cp0.w     w0
    2694:	0d 00 3a    	bra       NZ, 0x26b0 <.L204>
            RD3_ = (val) ? 1 : 0;
    2696:	2e 00 90    	mov.w     [w14+4], w0
    2698:	00 f0 a7    	btsc.w    w0, #0xf
    269a:	00 00 ea    	neg.w     w0, w0
    269c:	00 00 ea    	neg.w     w0, w0
    269e:	4f 00 de    	lsr.w     w0, #0xf, w0
    26a0:	00 40 78    	mov.b     w0, w0
    26a2:	00 80 fb    	ze        w0, w0
    26a4:	61 00 60    	and.w     w0, #0x1, w0
    26a6:	43 00 dd    	sl.w      w0, #0x3, w0
    26a8:	e1 16 80    	mov.w     0x2dc, w1
    26aa:	01 30 a1    	bclr.w    w1, #0x3
    26ac:	01 00 70    	ior.w     w0, w1, w0
    26ae:	e0 16 88    	mov.w     w0, 0x2dc

000026b0 <.L204>:
        }
    }
}
    26b0:	00 80 fa    	ulnk      
    26b2:	00 00 06    	return    

000026b4 <_rd3Q_handler>:

void rd3Q_handler(char *args) {
    26b4:	02 00 fa    	lnk       #0x2
    26b6:	00 0f 78    	mov.w     w0, [w14]
    if (RD3_ == ON)
    26b8:	e0 16 80    	mov.w     0x2dc, w0
    26ba:	68 00 60    	and.w     w0, #0x8, w0
    26bc:	00 00 e0    	cp0.w     w0
    26be:	04 00 32    	bra       Z, 0x26c8 <.L210>
        parser_puts("1\r\n");
    26c0:	11 42 80    	mov.w     0x842, w1
    26c2:	40 63 29    	mov.w     #0x9634, w0
    26c4:	01 00 01    	call      w1
    26c6:	03 00 37    	bra       0x26ce <.L209>

000026c8 <.L210>:
    else
        parser_puts("0\r\n");
    26c8:	11 42 80    	mov.w     0x842, w1
    26ca:	80 63 29    	mov.w     #0x9638, w0
    26cc:	01 00 01    	call      w1

000026ce <.L209>:
}
    26ce:	00 80 fa    	ulnk      
    26d0:	00 00 06    	return    

000026d2 <_rd4_handler>:

void rd4_handler(char *args) {
    26d2:	08 00 fa    	lnk       #0x8
    26d4:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    26d6:	00 00 eb    	clr.w     w0
    26d8:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    26da:	0e 80 e8    	inc2.w    w14, w0
    26dc:	00 01 78    	mov.w     w0, w2
    26de:	21 62 29    	mov.w     #0x9622, w1
    26e0:	3e 00 90    	mov.w     [w14+6], w0
    26e2:	6b f9 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    26e4:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    26e6:	1e 00 78    	mov.w     [w14], w0
    26e8:	00 00 e0    	cp0.w     w0
    26ea:	35 00 32    	bra       Z, 0x2756 <.L212>
        if (str_cmp(token, "ON") == 0) {
    26ec:	61 62 29    	mov.w     #0x9626, w1
    26ee:	1e 00 78    	mov.w     [w14], w0
    26f0:	09 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    26f2:	00 00 e0    	cp0.w     w0
    26f4:	02 00 3a    	bra       NZ, 0x26fa <.L214>
            RD4_ = ON;
    26f6:	dc 82 a8    	bset.b    0x2dc, #0x4
    26f8:	2e 00 37    	bra       0x2756 <.L212>

000026fa <.L214>:
        } else if (str_cmp(token, "OFF") == 0) {
    26fa:	91 62 29    	mov.w     #0x9629, w1
    26fc:	1e 00 78    	mov.w     [w14], w0
    26fe:	02 f9 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2700:	00 00 e0    	cp0.w     w0
    2702:	02 00 3a    	bra       NZ, 0x2708 <.L215>
            RD4_ = OFF;
    2704:	dc 82 a9    	bclr.b    0x2dc, #0x4
    2706:	27 00 37    	bra       0x2756 <.L212>

00002708 <.L215>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2708:	d1 62 29    	mov.w     #0x962d, w1
    270a:	1e 00 78    	mov.w     [w14], w0
    270c:	fb f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    270e:	00 00 e0    	cp0.w     w0
    2710:	0f 00 3a    	bra       NZ, 0x2730 <.L216>
            RD4_ = !RD4_;
    2712:	e0 16 80    	mov.w     0x2dc, w0
    2714:	70 00 60    	and.w     w0, #0x10, w0
    2716:	00 f0 a7    	btsc.w    w0, #0xf
    2718:	00 00 ea    	neg.w     w0, w0
    271a:	00 00 e9    	dec.w     w0, w0
    271c:	4f 00 de    	lsr.w     w0, #0xf, w0
    271e:	00 40 78    	mov.b     w0, w0
    2720:	00 80 fb    	ze        w0, w0
    2722:	61 00 60    	and.w     w0, #0x1, w0
    2724:	44 00 dd    	sl.w      w0, #0x4, w0
    2726:	e1 16 80    	mov.w     0x2dc, w1
    2728:	01 40 a1    	bclr.w    w1, #0x4
    272a:	01 00 70    	ior.w     w0, w1, w0
    272c:	e0 16 88    	mov.w     w0, 0x2dc
    272e:	13 00 37    	bra       0x2756 <.L212>

00002730 <.L216>:
        } else if (str2hex(token, &val) == 0) {
    2730:	64 00 47    	add.w     w14, #0x4, w0
    2732:	80 00 78    	mov.w     w0, w1
    2734:	1e 00 78    	mov.w     [w14], w0
    2736:	ec f7 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2738:	00 00 e0    	cp0.w     w0
    273a:	0d 00 3a    	bra       NZ, 0x2756 <.L212>
            RD4_ = (val) ? 1 : 0;
    273c:	2e 00 90    	mov.w     [w14+4], w0
    273e:	00 f0 a7    	btsc.w    w0, #0xf
    2740:	00 00 ea    	neg.w     w0, w0
    2742:	00 00 ea    	neg.w     w0, w0
    2744:	4f 00 de    	lsr.w     w0, #0xf, w0
    2746:	00 40 78    	mov.b     w0, w0
    2748:	00 80 fb    	ze        w0, w0
    274a:	61 00 60    	and.w     w0, #0x1, w0
    274c:	44 00 dd    	sl.w      w0, #0x4, w0
    274e:	e1 16 80    	mov.w     0x2dc, w1
    2750:	01 40 a1    	bclr.w    w1, #0x4
    2752:	01 00 70    	ior.w     w0, w1, w0
    2754:	e0 16 88    	mov.w     w0, 0x2dc

00002756 <.L212>:
        }
    }
}
    2756:	00 80 fa    	ulnk      
    2758:	00 00 06    	return    

0000275a <_rd4Q_handler>:

void rd4Q_handler(char *args) {
    275a:	02 00 fa    	lnk       #0x2
    275c:	00 0f 78    	mov.w     w0, [w14]
    if (RD4_ == ON)
    275e:	e0 16 80    	mov.w     0x2dc, w0
    2760:	70 00 60    	and.w     w0, #0x10, w0
    2762:	00 00 e0    	cp0.w     w0
    2764:	04 00 32    	bra       Z, 0x276e <.L218>
        parser_puts("1\r\n");
    2766:	11 42 80    	mov.w     0x842, w1
    2768:	40 63 29    	mov.w     #0x9634, w0
    276a:	01 00 01    	call      w1
    276c:	03 00 37    	bra       0x2774 <.L217>

0000276e <.L218>:
    else
        parser_puts("0\r\n");
    276e:	11 42 80    	mov.w     0x842, w1
    2770:	80 63 29    	mov.w     #0x9638, w0
    2772:	01 00 01    	call      w1

00002774 <.L217>:
}
    2774:	00 80 fa    	ulnk      
    2776:	00 00 06    	return    

00002778 <_rd5_handler>:

void rd5_handler(char *args) {
    2778:	08 00 fa    	lnk       #0x8
    277a:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    277c:	00 00 eb    	clr.w     w0
    277e:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2780:	0e 80 e8    	inc2.w    w14, w0
    2782:	00 01 78    	mov.w     w0, w2
    2784:	21 62 29    	mov.w     #0x9622, w1
    2786:	3e 00 90    	mov.w     [w14+6], w0
    2788:	18 f9 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    278a:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    278c:	1e 00 78    	mov.w     [w14], w0
    278e:	00 00 e0    	cp0.w     w0
    2790:	36 00 32    	bra       Z, 0x27fe <.L220>
        if (str_cmp(token, "ON") == 0) {
    2792:	61 62 29    	mov.w     #0x9626, w1
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	b6 f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2798:	00 00 e0    	cp0.w     w0
    279a:	02 00 3a    	bra       NZ, 0x27a0 <.L222>
            RD5_ = ON;
    279c:	dc a2 a8    	bset.b    0x2dc, #0x5
    279e:	2f 00 37    	bra       0x27fe <.L220>

000027a0 <.L222>:
        } else if (str_cmp(token, "OFF") == 0) {
    27a0:	91 62 29    	mov.w     #0x9629, w1
    27a2:	1e 00 78    	mov.w     [w14], w0
    27a4:	af f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    27a6:	00 00 e0    	cp0.w     w0
    27a8:	02 00 3a    	bra       NZ, 0x27ae <.L223>
            RD5_ = OFF;
    27aa:	dc a2 a9    	bclr.b    0x2dc, #0x5
    27ac:	28 00 37    	bra       0x27fe <.L220>

000027ae <.L223>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    27ae:	d1 62 29    	mov.w     #0x962d, w1
    27b0:	1e 00 78    	mov.w     [w14], w0
    27b2:	a8 f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    27b4:	00 00 e0    	cp0.w     w0
    27b6:	10 00 3a    	bra       NZ, 0x27d8 <.L224>
            RD5_ = !RD5_;
    27b8:	e1 16 80    	mov.w     0x2dc, w1
    27ba:	00 02 20    	mov.w     #0x20, w0
    27bc:	00 80 60    	and.w     w1, w0, w0
    27be:	00 f0 a7    	btsc.w    w0, #0xf
    27c0:	00 00 ea    	neg.w     w0, w0
    27c2:	00 00 e9    	dec.w     w0, w0
    27c4:	4f 00 de    	lsr.w     w0, #0xf, w0
    27c6:	00 40 78    	mov.b     w0, w0
    27c8:	00 80 fb    	ze        w0, w0
    27ca:	61 00 60    	and.w     w0, #0x1, w0
    27cc:	45 00 dd    	sl.w      w0, #0x5, w0
    27ce:	e1 16 80    	mov.w     0x2dc, w1
    27d0:	01 50 a1    	bclr.w    w1, #0x5
    27d2:	01 00 70    	ior.w     w0, w1, w0
    27d4:	e0 16 88    	mov.w     w0, 0x2dc
    27d6:	13 00 37    	bra       0x27fe <.L220>

000027d8 <.L224>:
        } else if (str2hex(token, &val) == 0) {
    27d8:	64 00 47    	add.w     w14, #0x4, w0
    27da:	80 00 78    	mov.w     w0, w1
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	98 f7 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    27e0:	00 00 e0    	cp0.w     w0
    27e2:	0d 00 3a    	bra       NZ, 0x27fe <.L220>
            RD5_ = (val) ? 1 : 0;
    27e4:	2e 00 90    	mov.w     [w14+4], w0
    27e6:	00 f0 a7    	btsc.w    w0, #0xf
    27e8:	00 00 ea    	neg.w     w0, w0
    27ea:	00 00 ea    	neg.w     w0, w0
    27ec:	4f 00 de    	lsr.w     w0, #0xf, w0
    27ee:	00 40 78    	mov.b     w0, w0
    27f0:	00 80 fb    	ze        w0, w0
    27f2:	61 00 60    	and.w     w0, #0x1, w0
    27f4:	45 00 dd    	sl.w      w0, #0x5, w0
    27f6:	e1 16 80    	mov.w     0x2dc, w1
    27f8:	01 50 a1    	bclr.w    w1, #0x5
    27fa:	01 00 70    	ior.w     w0, w1, w0
    27fc:	e0 16 88    	mov.w     w0, 0x2dc

000027fe <.L220>:
        }
    }
}
    27fe:	00 80 fa    	ulnk      
    2800:	00 00 06    	return    

00002802 <_rd5Q_handler>:

void rd5Q_handler(char *args) {
    2802:	02 00 fa    	lnk       #0x2
    2804:	00 0f 78    	mov.w     w0, [w14]
    if (RD5_ == ON)
    2806:	e1 16 80    	mov.w     0x2dc, w1
    2808:	00 02 20    	mov.w     #0x20, w0
    280a:	00 80 60    	and.w     w1, w0, w0
    280c:	00 00 e0    	cp0.w     w0
    280e:	04 00 32    	bra       Z, 0x2818 <.L226>
        parser_puts("1\r\n");
    2810:	11 42 80    	mov.w     0x842, w1
    2812:	40 63 29    	mov.w     #0x9634, w0
    2814:	01 00 01    	call      w1
    2816:	03 00 37    	bra       0x281e <.L225>

00002818 <.L226>:
    else
        parser_puts("0\r\n");
    2818:	11 42 80    	mov.w     0x842, w1
    281a:	80 63 29    	mov.w     #0x9638, w0
    281c:	01 00 01    	call      w1

0000281e <.L225>:
}
    281e:	00 80 fa    	ulnk      
    2820:	00 00 06    	return    

00002822 <_rd6_handler>:

void rd6_handler(char *args) {
    2822:	08 00 fa    	lnk       #0x8
    2824:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2826:	00 00 eb    	clr.w     w0
    2828:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    282a:	0e 80 e8    	inc2.w    w14, w0
    282c:	00 01 78    	mov.w     w0, w2
    282e:	21 62 29    	mov.w     #0x9622, w1
    2830:	3e 00 90    	mov.w     [w14+6], w0
    2832:	c3 f8 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2834:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2836:	1e 00 78    	mov.w     [w14], w0
    2838:	00 00 e0    	cp0.w     w0
    283a:	36 00 32    	bra       Z, 0x28a8 <.L228>
        if (str_cmp(token, "ON") == 0) {
    283c:	61 62 29    	mov.w     #0x9626, w1
    283e:	1e 00 78    	mov.w     [w14], w0
    2840:	61 f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2842:	00 00 e0    	cp0.w     w0
    2844:	02 00 3a    	bra       NZ, 0x284a <.L230>
            RD6_ = ON;
    2846:	dc c2 a8    	bset.b    0x2dc, #0x6
    2848:	2f 00 37    	bra       0x28a8 <.L228>

0000284a <.L230>:
        } else if (str_cmp(token, "OFF") == 0) {
    284a:	91 62 29    	mov.w     #0x9629, w1
    284c:	1e 00 78    	mov.w     [w14], w0
    284e:	5a f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2850:	00 00 e0    	cp0.w     w0
    2852:	02 00 3a    	bra       NZ, 0x2858 <.L231>
            RD6_ = OFF;
    2854:	dc c2 a9    	bclr.b    0x2dc, #0x6
    2856:	28 00 37    	bra       0x28a8 <.L228>

00002858 <.L231>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2858:	d1 62 29    	mov.w     #0x962d, w1
    285a:	1e 00 78    	mov.w     [w14], w0
    285c:	53 f8 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    285e:	00 00 e0    	cp0.w     w0
    2860:	10 00 3a    	bra       NZ, 0x2882 <.L232>
            RD6_ = !RD6_;
    2862:	e1 16 80    	mov.w     0x2dc, w1
    2864:	00 04 20    	mov.w     #0x40, w0
    2866:	00 80 60    	and.w     w1, w0, w0
    2868:	00 f0 a7    	btsc.w    w0, #0xf
    286a:	00 00 ea    	neg.w     w0, w0
    286c:	00 00 e9    	dec.w     w0, w0
    286e:	4f 00 de    	lsr.w     w0, #0xf, w0
    2870:	00 40 78    	mov.b     w0, w0
    2872:	00 80 fb    	ze        w0, w0
    2874:	61 00 60    	and.w     w0, #0x1, w0
    2876:	46 00 dd    	sl.w      w0, #0x6, w0
    2878:	e1 16 80    	mov.w     0x2dc, w1
    287a:	01 60 a1    	bclr.w    w1, #0x6
    287c:	01 00 70    	ior.w     w0, w1, w0
    287e:	e0 16 88    	mov.w     w0, 0x2dc
    2880:	13 00 37    	bra       0x28a8 <.L228>

00002882 <.L232>:
        } else if (str2hex(token, &val) == 0) {
    2882:	64 00 47    	add.w     w14, #0x4, w0
    2884:	80 00 78    	mov.w     w0, w1
    2886:	1e 00 78    	mov.w     [w14], w0
    2888:	43 f7 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    288a:	00 00 e0    	cp0.w     w0
    288c:	0d 00 3a    	bra       NZ, 0x28a8 <.L228>
            RD6_ = (val) ? 1 : 0;
    288e:	2e 00 90    	mov.w     [w14+4], w0
    2890:	00 f0 a7    	btsc.w    w0, #0xf
    2892:	00 00 ea    	neg.w     w0, w0
    2894:	00 00 ea    	neg.w     w0, w0
    2896:	4f 00 de    	lsr.w     w0, #0xf, w0
    2898:	00 40 78    	mov.b     w0, w0
    289a:	00 80 fb    	ze        w0, w0
    289c:	61 00 60    	and.w     w0, #0x1, w0
    289e:	46 00 dd    	sl.w      w0, #0x6, w0
    28a0:	e1 16 80    	mov.w     0x2dc, w1
    28a2:	01 60 a1    	bclr.w    w1, #0x6
    28a4:	01 00 70    	ior.w     w0, w1, w0
    28a6:	e0 16 88    	mov.w     w0, 0x2dc

000028a8 <.L228>:
        }
    }
}
    28a8:	00 80 fa    	ulnk      
    28aa:	00 00 06    	return    

000028ac <_rd6Q_handler>:

void rd6Q_handler(char *args) {
    28ac:	02 00 fa    	lnk       #0x2
    28ae:	00 0f 78    	mov.w     w0, [w14]
    if (RD6_ == ON)
    28b0:	e1 16 80    	mov.w     0x2dc, w1
    28b2:	00 04 20    	mov.w     #0x40, w0
    28b4:	00 80 60    	and.w     w1, w0, w0
    28b6:	00 00 e0    	cp0.w     w0
    28b8:	04 00 32    	bra       Z, 0x28c2 <.L234>
        parser_puts("1\r\n");
    28ba:	11 42 80    	mov.w     0x842, w1
    28bc:	40 63 29    	mov.w     #0x9634, w0
    28be:	01 00 01    	call      w1
    28c0:	03 00 37    	bra       0x28c8 <.L233>

000028c2 <.L234>:
    else
        parser_puts("0\r\n");
    28c2:	11 42 80    	mov.w     0x842, w1
    28c4:	80 63 29    	mov.w     #0x9638, w0
    28c6:	01 00 01    	call      w1

000028c8 <.L233>:
}
    28c8:	00 80 fa    	ulnk      
    28ca:	00 00 06    	return    

000028cc <_porte_handler>:

void porte_handler(char *args) {
    28cc:	08 00 fa    	lnk       #0x8
    28ce:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    28d0:	00 00 eb    	clr.w     w0
    28d2:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    28d4:	0e 80 e8    	inc2.w    w14, w0
    28d6:	00 01 78    	mov.w     w0, w2
    28d8:	f1 63 29    	mov.w     #0x963f, w1
    28da:	3e 00 90    	mov.w     [w14+6], w0
    28dc:	6e f8 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    28de:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    28e0:	1e 00 78    	mov.w     [w14], w0
    28e2:	00 00 e0    	cp0.w     w0
    28e4:	0e 00 32    	bra       Z, 0x2902 <.L236>
    28e6:	64 00 47    	add.w     w14, #0x4, w0
    28e8:	80 00 78    	mov.w     w0, w1
    28ea:	1e 00 78    	mov.w     [w14], w0
    28ec:	11 f7 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    28ee:	00 00 e0    	cp0.w     w0
    28f0:	08 00 3a    	bra       NZ, 0x2902 <.L236>
        LATE = (LATE & 0xFF80) | (val & 0x7F);
    28f2:	21 17 80    	mov.w     0x2e4, w1
    28f4:	00 f8 2f    	mov.w     #0xff80, w0
    28f6:	80 80 60    	and.w     w1, w0, w1
    28f8:	2e 01 90    	mov.w     [w14+4], w2
    28fa:	f0 07 20    	mov.w     #0x7f, w0
    28fc:	00 00 61    	and.w     w2, w0, w0
    28fe:	01 00 70    	ior.w     w0, w1, w0
    2900:	20 17 88    	mov.w     w0, 0x2e4

00002902 <.L236>:
    }
}
    2902:	00 80 fa    	ulnk      
    2904:	00 00 06    	return    

00002906 <_porteQ_handler>:

void porteQ_handler(char *args) {
    2906:	08 00 fa    	lnk       #0x8
    2908:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(LATE & 0x7F, str);
    290a:	21 17 80    	mov.w     0x2e4, w1
    290c:	f0 07 20    	mov.w     #0x7f, w0
    290e:	00 80 60    	and.w     w1, w0, w0
    2910:	8e 00 78    	mov.w     w14, w1
    2912:	c3 f7 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2914:	11 42 80    	mov.w     0x842, w1
    2916:	0e 00 78    	mov.w     w14, w0
    2918:	01 00 01    	call      w1
    parser_puts("\r\n");
    291a:	11 42 80    	mov.w     0x842, w1
    291c:	c0 63 29    	mov.w     #0x963c, w0
    291e:	01 00 01    	call      w1
}
    2920:	00 80 fa    	ulnk      
    2922:	00 00 06    	return    

00002924 <_re0_handler>:

void re0_handler(char *args) {
    2924:	08 00 fa    	lnk       #0x8
    2926:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2928:	00 00 eb    	clr.w     w0
    292a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    292c:	0e 80 e8    	inc2.w    w14, w0
    292e:	00 01 78    	mov.w     w0, w2
    2930:	21 62 29    	mov.w     #0x9622, w1
    2932:	3e 00 90    	mov.w     [w14+6], w0
    2934:	42 f8 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2936:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2938:	1e 00 78    	mov.w     [w14], w0
    293a:	00 00 e0    	cp0.w     w0
    293c:	33 00 32    	bra       Z, 0x29a4 <.L239>
        if (str_cmp(token, "ON") == 0) {
    293e:	61 62 29    	mov.w     #0x9626, w1
    2940:	1e 00 78    	mov.w     [w14], w0
    2942:	e0 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2944:	00 00 e0    	cp0.w     w0
    2946:	02 00 3a    	bra       NZ, 0x294c <.L241>
            RE0_ = ON;
    2948:	e4 02 a8    	bset.b    0x2e4, #0x0
    294a:	2c 00 37    	bra       0x29a4 <.L239>

0000294c <.L241>:
        } else if (str_cmp(token, "OFF") == 0) {
    294c:	91 62 29    	mov.w     #0x9629, w1
    294e:	1e 00 78    	mov.w     [w14], w0
    2950:	d9 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2952:	00 00 e0    	cp0.w     w0
    2954:	02 00 3a    	bra       NZ, 0x295a <.L242>
            RE0_ = OFF;
    2956:	e4 02 a9    	bclr.b    0x2e4, #0x0
    2958:	25 00 37    	bra       0x29a4 <.L239>

0000295a <.L242>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    295a:	d1 62 29    	mov.w     #0x962d, w1
    295c:	1e 00 78    	mov.w     [w14], w0
    295e:	d2 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2960:	00 00 e0    	cp0.w     w0
    2962:	0e 00 3a    	bra       NZ, 0x2980 <.L243>
            RE0_ = !RE0_;
    2964:	20 17 80    	mov.w     0x2e4, w0
    2966:	61 00 60    	and.w     w0, #0x1, w0
    2968:	00 f0 a7    	btsc.w    w0, #0xf
    296a:	00 00 ea    	neg.w     w0, w0
    296c:	00 00 e9    	dec.w     w0, w0
    296e:	4f 00 de    	lsr.w     w0, #0xf, w0
    2970:	00 40 78    	mov.b     w0, w0
    2972:	00 80 fb    	ze        w0, w0
    2974:	61 00 60    	and.w     w0, #0x1, w0
    2976:	21 17 80    	mov.w     0x2e4, w1
    2978:	01 00 a1    	bclr.w    w1, #0x0
    297a:	01 00 70    	ior.w     w0, w1, w0
    297c:	20 17 88    	mov.w     w0, 0x2e4
    297e:	12 00 37    	bra       0x29a4 <.L239>

00002980 <.L243>:
        } else if (str2hex(token, &val) == 0) {
    2980:	64 00 47    	add.w     w14, #0x4, w0
    2982:	80 00 78    	mov.w     w0, w1
    2984:	1e 00 78    	mov.w     [w14], w0
    2986:	c4 f6 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2988:	00 00 e0    	cp0.w     w0
    298a:	0c 00 3a    	bra       NZ, 0x29a4 <.L239>
            RE0_ = (val) ? 1 : 0;
    298c:	2e 00 90    	mov.w     [w14+4], w0
    298e:	00 f0 a7    	btsc.w    w0, #0xf
    2990:	00 00 ea    	neg.w     w0, w0
    2992:	00 00 ea    	neg.w     w0, w0
    2994:	4f 00 de    	lsr.w     w0, #0xf, w0
    2996:	00 40 78    	mov.b     w0, w0
    2998:	00 80 fb    	ze        w0, w0
    299a:	61 00 60    	and.w     w0, #0x1, w0
    299c:	21 17 80    	mov.w     0x2e4, w1
    299e:	01 00 a1    	bclr.w    w1, #0x0
    29a0:	01 00 70    	ior.w     w0, w1, w0
    29a2:	20 17 88    	mov.w     w0, 0x2e4

000029a4 <.L239>:
        }
    }
}
    29a4:	00 80 fa    	ulnk      
    29a6:	00 00 06    	return    

000029a8 <_re0Q_handler>:

void re0Q_handler(char *args) {
    29a8:	02 00 fa    	lnk       #0x2
    29aa:	00 0f 78    	mov.w     w0, [w14]
    if (RE0_ == ON)
    29ac:	20 17 80    	mov.w     0x2e4, w0
    29ae:	61 00 60    	and.w     w0, #0x1, w0
    29b0:	00 00 e0    	cp0.w     w0
    29b2:	04 00 32    	bra       Z, 0x29bc <.L245>
        parser_puts("1\r\n");
    29b4:	11 42 80    	mov.w     0x842, w1
    29b6:	40 63 29    	mov.w     #0x9634, w0
    29b8:	01 00 01    	call      w1
    29ba:	03 00 37    	bra       0x29c2 <.L244>

000029bc <.L245>:
    else
        parser_puts("0\r\n");
    29bc:	11 42 80    	mov.w     0x842, w1
    29be:	80 63 29    	mov.w     #0x9638, w0
    29c0:	01 00 01    	call      w1

000029c2 <.L244>:
}
    29c2:	00 80 fa    	ulnk      
    29c4:	00 00 06    	return    

000029c6 <_re1_handler>:

void re1_handler(char *args) {
    29c6:	08 00 fa    	lnk       #0x8
    29c8:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    29ca:	00 00 eb    	clr.w     w0
    29cc:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    29ce:	0e 80 e8    	inc2.w    w14, w0
    29d0:	00 01 78    	mov.w     w0, w2
    29d2:	21 62 29    	mov.w     #0x9622, w1
    29d4:	3e 00 90    	mov.w     [w14+6], w0
    29d6:	f1 f7 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    29d8:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    29da:	1e 00 78    	mov.w     [w14], w0
    29dc:	00 00 e0    	cp0.w     w0
    29de:	35 00 32    	bra       Z, 0x2a4a <.L247>
        if (str_cmp(token, "ON") == 0) {
    29e0:	61 62 29    	mov.w     #0x9626, w1
    29e2:	1e 00 78    	mov.w     [w14], w0
    29e4:	8f f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    29e6:	00 00 e0    	cp0.w     w0
    29e8:	02 00 3a    	bra       NZ, 0x29ee <.L249>
            RE1_ = ON;
    29ea:	e4 22 a8    	bset.b    0x2e4, #0x1
    29ec:	2e 00 37    	bra       0x2a4a <.L247>

000029ee <.L249>:
        } else if (str_cmp(token, "OFF") == 0) {
    29ee:	91 62 29    	mov.w     #0x9629, w1
    29f0:	1e 00 78    	mov.w     [w14], w0
    29f2:	88 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    29f4:	00 00 e0    	cp0.w     w0
    29f6:	02 00 3a    	bra       NZ, 0x29fc <.L250>
            RE1_ = OFF;
    29f8:	e4 22 a9    	bclr.b    0x2e4, #0x1
    29fa:	27 00 37    	bra       0x2a4a <.L247>

000029fc <.L250>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    29fc:	d1 62 29    	mov.w     #0x962d, w1
    29fe:	1e 00 78    	mov.w     [w14], w0
    2a00:	81 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2a02:	00 00 e0    	cp0.w     w0
    2a04:	0f 00 3a    	bra       NZ, 0x2a24 <.L251>
            RE1_ = !RE1_;
    2a06:	20 17 80    	mov.w     0x2e4, w0
    2a08:	62 00 60    	and.w     w0, #0x2, w0
    2a0a:	00 f0 a7    	btsc.w    w0, #0xf
    2a0c:	00 00 ea    	neg.w     w0, w0
    2a0e:	00 00 e9    	dec.w     w0, w0
    2a10:	4f 00 de    	lsr.w     w0, #0xf, w0
    2a12:	00 40 78    	mov.b     w0, w0
    2a14:	00 80 fb    	ze        w0, w0
    2a16:	61 00 60    	and.w     w0, #0x1, w0
    2a18:	00 00 40    	add.w     w0, w0, w0
    2a1a:	21 17 80    	mov.w     0x2e4, w1
    2a1c:	01 10 a1    	bclr.w    w1, #0x1
    2a1e:	01 00 70    	ior.w     w0, w1, w0
    2a20:	20 17 88    	mov.w     w0, 0x2e4
    2a22:	13 00 37    	bra       0x2a4a <.L247>

00002a24 <.L251>:
        } else if (str2hex(token, &val) == 0) {
    2a24:	64 00 47    	add.w     w14, #0x4, w0
    2a26:	80 00 78    	mov.w     w0, w1
    2a28:	1e 00 78    	mov.w     [w14], w0
    2a2a:	72 f6 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2a2c:	00 00 e0    	cp0.w     w0
    2a2e:	0d 00 3a    	bra       NZ, 0x2a4a <.L247>
            RE1_ = (val) ? 1 : 0;
    2a30:	2e 00 90    	mov.w     [w14+4], w0
    2a32:	00 f0 a7    	btsc.w    w0, #0xf
    2a34:	00 00 ea    	neg.w     w0, w0
    2a36:	00 00 ea    	neg.w     w0, w0
    2a38:	4f 00 de    	lsr.w     w0, #0xf, w0
    2a3a:	00 40 78    	mov.b     w0, w0
    2a3c:	00 80 fb    	ze        w0, w0
    2a3e:	61 00 60    	and.w     w0, #0x1, w0
    2a40:	00 00 40    	add.w     w0, w0, w0
    2a42:	21 17 80    	mov.w     0x2e4, w1
    2a44:	01 10 a1    	bclr.w    w1, #0x1
    2a46:	01 00 70    	ior.w     w0, w1, w0
    2a48:	20 17 88    	mov.w     w0, 0x2e4

00002a4a <.L247>:
        }
    }
}
    2a4a:	00 80 fa    	ulnk      
    2a4c:	00 00 06    	return    

00002a4e <_re1Q_handler>:

void re1Q_handler(char *args) {
    2a4e:	02 00 fa    	lnk       #0x2
    2a50:	00 0f 78    	mov.w     w0, [w14]
    if (RE1_ == ON)
    2a52:	20 17 80    	mov.w     0x2e4, w0
    2a54:	62 00 60    	and.w     w0, #0x2, w0
    2a56:	00 00 e0    	cp0.w     w0
    2a58:	04 00 32    	bra       Z, 0x2a62 <.L253>
        parser_puts("1\r\n");
    2a5a:	11 42 80    	mov.w     0x842, w1
    2a5c:	40 63 29    	mov.w     #0x9634, w0
    2a5e:	01 00 01    	call      w1
    2a60:	03 00 37    	bra       0x2a68 <.L252>

00002a62 <.L253>:
    else
        parser_puts("0\r\n");
    2a62:	11 42 80    	mov.w     0x842, w1
    2a64:	80 63 29    	mov.w     #0x9638, w0
    2a66:	01 00 01    	call      w1

00002a68 <.L252>:
}
    2a68:	00 80 fa    	ulnk      
    2a6a:	00 00 06    	return    

00002a6c <_re2_handler>:

void re2_handler(char *args) {
    2a6c:	08 00 fa    	lnk       #0x8
    2a6e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2a70:	00 00 eb    	clr.w     w0
    2a72:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2a74:	0e 80 e8    	inc2.w    w14, w0
    2a76:	00 01 78    	mov.w     w0, w2
    2a78:	21 62 29    	mov.w     #0x9622, w1
    2a7a:	3e 00 90    	mov.w     [w14+6], w0
    2a7c:	9e f7 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2a7e:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2a80:	1e 00 78    	mov.w     [w14], w0
    2a82:	00 00 e0    	cp0.w     w0
    2a84:	35 00 32    	bra       Z, 0x2af0 <.L255>
        if (str_cmp(token, "ON") == 0) {
    2a86:	61 62 29    	mov.w     #0x9626, w1
    2a88:	1e 00 78    	mov.w     [w14], w0
    2a8a:	3c f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2a8c:	00 00 e0    	cp0.w     w0
    2a8e:	02 00 3a    	bra       NZ, 0x2a94 <.L257>
            RE2_ = ON;
    2a90:	e4 42 a8    	bset.b    0x2e4, #0x2
    2a92:	2e 00 37    	bra       0x2af0 <.L255>

00002a94 <.L257>:
        } else if (str_cmp(token, "OFF") == 0) {
    2a94:	91 62 29    	mov.w     #0x9629, w1
    2a96:	1e 00 78    	mov.w     [w14], w0
    2a98:	35 f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2a9a:	00 00 e0    	cp0.w     w0
    2a9c:	02 00 3a    	bra       NZ, 0x2aa2 <.L258>
            RE2_ = OFF;
    2a9e:	e4 42 a9    	bclr.b    0x2e4, #0x2
    2aa0:	27 00 37    	bra       0x2af0 <.L255>

00002aa2 <.L258>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2aa2:	d1 62 29    	mov.w     #0x962d, w1
    2aa4:	1e 00 78    	mov.w     [w14], w0
    2aa6:	2e f7 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2aa8:	00 00 e0    	cp0.w     w0
    2aaa:	0f 00 3a    	bra       NZ, 0x2aca <.L259>
            RE2_ = !RE2_;
    2aac:	20 17 80    	mov.w     0x2e4, w0
    2aae:	64 00 60    	and.w     w0, #0x4, w0
    2ab0:	00 f0 a7    	btsc.w    w0, #0xf
    2ab2:	00 00 ea    	neg.w     w0, w0
    2ab4:	00 00 e9    	dec.w     w0, w0
    2ab6:	4f 00 de    	lsr.w     w0, #0xf, w0
    2ab8:	00 40 78    	mov.b     w0, w0
    2aba:	00 80 fb    	ze        w0, w0
    2abc:	61 00 60    	and.w     w0, #0x1, w0
    2abe:	42 00 dd    	sl.w      w0, #0x2, w0
    2ac0:	21 17 80    	mov.w     0x2e4, w1
    2ac2:	01 20 a1    	bclr.w    w1, #0x2
    2ac4:	01 00 70    	ior.w     w0, w1, w0
    2ac6:	20 17 88    	mov.w     w0, 0x2e4
    2ac8:	13 00 37    	bra       0x2af0 <.L255>

00002aca <.L259>:
        } else if (str2hex(token, &val) == 0) {
    2aca:	64 00 47    	add.w     w14, #0x4, w0
    2acc:	80 00 78    	mov.w     w0, w1
    2ace:	1e 00 78    	mov.w     [w14], w0
    2ad0:	1f f6 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2ad2:	00 00 e0    	cp0.w     w0
    2ad4:	0d 00 3a    	bra       NZ, 0x2af0 <.L255>
            RE2_ = (val) ? 1 : 0;
    2ad6:	2e 00 90    	mov.w     [w14+4], w0
    2ad8:	00 f0 a7    	btsc.w    w0, #0xf
    2ada:	00 00 ea    	neg.w     w0, w0
    2adc:	00 00 ea    	neg.w     w0, w0
    2ade:	4f 00 de    	lsr.w     w0, #0xf, w0
    2ae0:	00 40 78    	mov.b     w0, w0
    2ae2:	00 80 fb    	ze        w0, w0
    2ae4:	61 00 60    	and.w     w0, #0x1, w0
    2ae6:	42 00 dd    	sl.w      w0, #0x2, w0
    2ae8:	21 17 80    	mov.w     0x2e4, w1
    2aea:	01 20 a1    	bclr.w    w1, #0x2
    2aec:	01 00 70    	ior.w     w0, w1, w0
    2aee:	20 17 88    	mov.w     w0, 0x2e4

00002af0 <.L255>:
        }
    }
}
    2af0:	00 80 fa    	ulnk      
    2af2:	00 00 06    	return    

00002af4 <_re2Q_handler>:

void re2Q_handler(char *args) {
    2af4:	02 00 fa    	lnk       #0x2
    2af6:	00 0f 78    	mov.w     w0, [w14]
    if (RE2_ == ON)
    2af8:	20 17 80    	mov.w     0x2e4, w0
    2afa:	64 00 60    	and.w     w0, #0x4, w0
    2afc:	00 00 e0    	cp0.w     w0
    2afe:	04 00 32    	bra       Z, 0x2b08 <.L261>
        parser_puts("1\r\n");
    2b00:	11 42 80    	mov.w     0x842, w1
    2b02:	40 63 29    	mov.w     #0x9634, w0
    2b04:	01 00 01    	call      w1
    2b06:	03 00 37    	bra       0x2b0e <.L260>

00002b08 <.L261>:
    else
        parser_puts("0\r\n");
    2b08:	11 42 80    	mov.w     0x842, w1
    2b0a:	80 63 29    	mov.w     #0x9638, w0
    2b0c:	01 00 01    	call      w1

00002b0e <.L260>:
}
    2b0e:	00 80 fa    	ulnk      
    2b10:	00 00 06    	return    

00002b12 <_re3_handler>:

void re3_handler(char *args) {
    2b12:	08 00 fa    	lnk       #0x8
    2b14:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2b16:	00 00 eb    	clr.w     w0
    2b18:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2b1a:	0e 80 e8    	inc2.w    w14, w0
    2b1c:	00 01 78    	mov.w     w0, w2
    2b1e:	21 62 29    	mov.w     #0x9622, w1
    2b20:	3e 00 90    	mov.w     [w14+6], w0
    2b22:	4b f7 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2b24:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2b26:	1e 00 78    	mov.w     [w14], w0
    2b28:	00 00 e0    	cp0.w     w0
    2b2a:	35 00 32    	bra       Z, 0x2b96 <.L263>
        if (str_cmp(token, "ON") == 0) {
    2b2c:	61 62 29    	mov.w     #0x9626, w1
    2b2e:	1e 00 78    	mov.w     [w14], w0
    2b30:	e9 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2b32:	00 00 e0    	cp0.w     w0
    2b34:	02 00 3a    	bra       NZ, 0x2b3a <.L265>
            RE3_ = ON;
    2b36:	e4 62 a8    	bset.b    0x2e4, #0x3
    2b38:	2e 00 37    	bra       0x2b96 <.L263>

00002b3a <.L265>:
        } else if (str_cmp(token, "OFF") == 0) {
    2b3a:	91 62 29    	mov.w     #0x9629, w1
    2b3c:	1e 00 78    	mov.w     [w14], w0
    2b3e:	e2 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2b40:	00 00 e0    	cp0.w     w0
    2b42:	02 00 3a    	bra       NZ, 0x2b48 <.L266>
            RE3_ = OFF;
    2b44:	e4 62 a9    	bclr.b    0x2e4, #0x3
    2b46:	27 00 37    	bra       0x2b96 <.L263>

00002b48 <.L266>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2b48:	d1 62 29    	mov.w     #0x962d, w1
    2b4a:	1e 00 78    	mov.w     [w14], w0
    2b4c:	db f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2b4e:	00 00 e0    	cp0.w     w0
    2b50:	0f 00 3a    	bra       NZ, 0x2b70 <.L267>
            RE3_ = !RE3_;
    2b52:	20 17 80    	mov.w     0x2e4, w0
    2b54:	68 00 60    	and.w     w0, #0x8, w0
    2b56:	00 f0 a7    	btsc.w    w0, #0xf
    2b58:	00 00 ea    	neg.w     w0, w0
    2b5a:	00 00 e9    	dec.w     w0, w0
    2b5c:	4f 00 de    	lsr.w     w0, #0xf, w0
    2b5e:	00 40 78    	mov.b     w0, w0
    2b60:	00 80 fb    	ze        w0, w0
    2b62:	61 00 60    	and.w     w0, #0x1, w0
    2b64:	43 00 dd    	sl.w      w0, #0x3, w0
    2b66:	21 17 80    	mov.w     0x2e4, w1
    2b68:	01 30 a1    	bclr.w    w1, #0x3
    2b6a:	01 00 70    	ior.w     w0, w1, w0
    2b6c:	20 17 88    	mov.w     w0, 0x2e4
    2b6e:	13 00 37    	bra       0x2b96 <.L263>

00002b70 <.L267>:
        } else if (str2hex(token, &val) == 0) {
    2b70:	64 00 47    	add.w     w14, #0x4, w0
    2b72:	80 00 78    	mov.w     w0, w1
    2b74:	1e 00 78    	mov.w     [w14], w0
    2b76:	cc f5 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2b78:	00 00 e0    	cp0.w     w0
    2b7a:	0d 00 3a    	bra       NZ, 0x2b96 <.L263>
            RE3_ = (val) ? 1 : 0;
    2b7c:	2e 00 90    	mov.w     [w14+4], w0
    2b7e:	00 f0 a7    	btsc.w    w0, #0xf
    2b80:	00 00 ea    	neg.w     w0, w0
    2b82:	00 00 ea    	neg.w     w0, w0
    2b84:	4f 00 de    	lsr.w     w0, #0xf, w0
    2b86:	00 40 78    	mov.b     w0, w0
    2b88:	00 80 fb    	ze        w0, w0
    2b8a:	61 00 60    	and.w     w0, #0x1, w0
    2b8c:	43 00 dd    	sl.w      w0, #0x3, w0
    2b8e:	21 17 80    	mov.w     0x2e4, w1
    2b90:	01 30 a1    	bclr.w    w1, #0x3
    2b92:	01 00 70    	ior.w     w0, w1, w0
    2b94:	20 17 88    	mov.w     w0, 0x2e4

00002b96 <.L263>:
        }
    }
}
    2b96:	00 80 fa    	ulnk      
    2b98:	00 00 06    	return    

00002b9a <_re3Q_handler>:

void re3Q_handler(char *args) {
    2b9a:	02 00 fa    	lnk       #0x2
    2b9c:	00 0f 78    	mov.w     w0, [w14]
    if (RE3_ == ON)
    2b9e:	20 17 80    	mov.w     0x2e4, w0
    2ba0:	68 00 60    	and.w     w0, #0x8, w0
    2ba2:	00 00 e0    	cp0.w     w0
    2ba4:	04 00 32    	bra       Z, 0x2bae <.L269>
        parser_puts("1\r\n");
    2ba6:	11 42 80    	mov.w     0x842, w1
    2ba8:	40 63 29    	mov.w     #0x9634, w0
    2baa:	01 00 01    	call      w1
    2bac:	03 00 37    	bra       0x2bb4 <.L268>

00002bae <.L269>:
    else
        parser_puts("0\r\n");
    2bae:	11 42 80    	mov.w     0x842, w1
    2bb0:	80 63 29    	mov.w     #0x9638, w0
    2bb2:	01 00 01    	call      w1

00002bb4 <.L268>:
}
    2bb4:	00 80 fa    	ulnk      
    2bb6:	00 00 06    	return    

00002bb8 <_re4_handler>:

void re4_handler(char *args) {
    2bb8:	08 00 fa    	lnk       #0x8
    2bba:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2bbc:	00 00 eb    	clr.w     w0
    2bbe:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2bc0:	0e 80 e8    	inc2.w    w14, w0
    2bc2:	00 01 78    	mov.w     w0, w2
    2bc4:	21 62 29    	mov.w     #0x9622, w1
    2bc6:	3e 00 90    	mov.w     [w14+6], w0
    2bc8:	f8 f6 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2bca:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	00 00 e0    	cp0.w     w0
    2bd0:	35 00 32    	bra       Z, 0x2c3c <.L271>
        if (str_cmp(token, "ON") == 0) {
    2bd2:	61 62 29    	mov.w     #0x9626, w1
    2bd4:	1e 00 78    	mov.w     [w14], w0
    2bd6:	96 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2bd8:	00 00 e0    	cp0.w     w0
    2bda:	02 00 3a    	bra       NZ, 0x2be0 <.L273>
            RE4_ = ON;
    2bdc:	e4 82 a8    	bset.b    0x2e4, #0x4
    2bde:	2e 00 37    	bra       0x2c3c <.L271>

00002be0 <.L273>:
        } else if (str_cmp(token, "OFF") == 0) {
    2be0:	91 62 29    	mov.w     #0x9629, w1
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	8f f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2be6:	00 00 e0    	cp0.w     w0
    2be8:	02 00 3a    	bra       NZ, 0x2bee <.L274>
            RE4_ = OFF;
    2bea:	e4 82 a9    	bclr.b    0x2e4, #0x4
    2bec:	27 00 37    	bra       0x2c3c <.L271>

00002bee <.L274>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2bee:	d1 62 29    	mov.w     #0x962d, w1
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	88 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2bf4:	00 00 e0    	cp0.w     w0
    2bf6:	0f 00 3a    	bra       NZ, 0x2c16 <.L275>
            RE4_ = !RE4_;
    2bf8:	20 17 80    	mov.w     0x2e4, w0
    2bfa:	70 00 60    	and.w     w0, #0x10, w0
    2bfc:	00 f0 a7    	btsc.w    w0, #0xf
    2bfe:	00 00 ea    	neg.w     w0, w0
    2c00:	00 00 e9    	dec.w     w0, w0
    2c02:	4f 00 de    	lsr.w     w0, #0xf, w0
    2c04:	00 40 78    	mov.b     w0, w0
    2c06:	00 80 fb    	ze        w0, w0
    2c08:	61 00 60    	and.w     w0, #0x1, w0
    2c0a:	44 00 dd    	sl.w      w0, #0x4, w0
    2c0c:	21 17 80    	mov.w     0x2e4, w1
    2c0e:	01 40 a1    	bclr.w    w1, #0x4
    2c10:	01 00 70    	ior.w     w0, w1, w0
    2c12:	20 17 88    	mov.w     w0, 0x2e4
    2c14:	13 00 37    	bra       0x2c3c <.L271>

00002c16 <.L275>:
        } else if (str2hex(token, &val) == 0) {
    2c16:	64 00 47    	add.w     w14, #0x4, w0
    2c18:	80 00 78    	mov.w     w0, w1
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	79 f5 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2c1e:	00 00 e0    	cp0.w     w0
    2c20:	0d 00 3a    	bra       NZ, 0x2c3c <.L271>
            RE4_ = (val) ? 1 : 0;
    2c22:	2e 00 90    	mov.w     [w14+4], w0
    2c24:	00 f0 a7    	btsc.w    w0, #0xf
    2c26:	00 00 ea    	neg.w     w0, w0
    2c28:	00 00 ea    	neg.w     w0, w0
    2c2a:	4f 00 de    	lsr.w     w0, #0xf, w0
    2c2c:	00 40 78    	mov.b     w0, w0
    2c2e:	00 80 fb    	ze        w0, w0
    2c30:	61 00 60    	and.w     w0, #0x1, w0
    2c32:	44 00 dd    	sl.w      w0, #0x4, w0
    2c34:	21 17 80    	mov.w     0x2e4, w1
    2c36:	01 40 a1    	bclr.w    w1, #0x4
    2c38:	01 00 70    	ior.w     w0, w1, w0
    2c3a:	20 17 88    	mov.w     w0, 0x2e4

00002c3c <.L271>:
        }
    }
}
    2c3c:	00 80 fa    	ulnk      
    2c3e:	00 00 06    	return    

00002c40 <_re4Q_handler>:

void re4Q_handler(char *args) {
    2c40:	02 00 fa    	lnk       #0x2
    2c42:	00 0f 78    	mov.w     w0, [w14]
    if (RE4_ == ON)
    2c44:	20 17 80    	mov.w     0x2e4, w0
    2c46:	70 00 60    	and.w     w0, #0x10, w0
    2c48:	00 00 e0    	cp0.w     w0
    2c4a:	04 00 32    	bra       Z, 0x2c54 <.L277>
        parser_puts("1\r\n");
    2c4c:	11 42 80    	mov.w     0x842, w1
    2c4e:	40 63 29    	mov.w     #0x9634, w0
    2c50:	01 00 01    	call      w1
    2c52:	03 00 37    	bra       0x2c5a <.L276>

00002c54 <.L277>:
    else
        parser_puts("0\r\n");
    2c54:	11 42 80    	mov.w     0x842, w1
    2c56:	80 63 29    	mov.w     #0x9638, w0
    2c58:	01 00 01    	call      w1

00002c5a <.L276>:
}
    2c5a:	00 80 fa    	ulnk      
    2c5c:	00 00 06    	return    

00002c5e <_re5_handler>:

void re5_handler(char *args) {
    2c5e:	08 00 fa    	lnk       #0x8
    2c60:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2c62:	00 00 eb    	clr.w     w0
    2c64:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2c66:	0e 80 e8    	inc2.w    w14, w0
    2c68:	00 01 78    	mov.w     w0, w2
    2c6a:	21 62 29    	mov.w     #0x9622, w1
    2c6c:	3e 00 90    	mov.w     [w14+6], w0
    2c6e:	a5 f6 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2c70:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2c72:	1e 00 78    	mov.w     [w14], w0
    2c74:	00 00 e0    	cp0.w     w0
    2c76:	36 00 32    	bra       Z, 0x2ce4 <.L279>
        if (str_cmp(token, "ON") == 0) {
    2c78:	61 62 29    	mov.w     #0x9626, w1
    2c7a:	1e 00 78    	mov.w     [w14], w0
    2c7c:	43 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2c7e:	00 00 e0    	cp0.w     w0
    2c80:	02 00 3a    	bra       NZ, 0x2c86 <.L281>
            RE5_ = ON;
    2c82:	e4 a2 a8    	bset.b    0x2e4, #0x5
    2c84:	2f 00 37    	bra       0x2ce4 <.L279>

00002c86 <.L281>:
        } else if (str_cmp(token, "OFF") == 0) {
    2c86:	91 62 29    	mov.w     #0x9629, w1
    2c88:	1e 00 78    	mov.w     [w14], w0
    2c8a:	3c f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2c8c:	00 00 e0    	cp0.w     w0
    2c8e:	02 00 3a    	bra       NZ, 0x2c94 <.L282>
            RE5_ = OFF;
    2c90:	e4 a2 a9    	bclr.b    0x2e4, #0x5
    2c92:	28 00 37    	bra       0x2ce4 <.L279>

00002c94 <.L282>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2c94:	d1 62 29    	mov.w     #0x962d, w1
    2c96:	1e 00 78    	mov.w     [w14], w0
    2c98:	35 f6 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2c9a:	00 00 e0    	cp0.w     w0
    2c9c:	10 00 3a    	bra       NZ, 0x2cbe <.L283>
            RE5_ = !RE5_;
    2c9e:	21 17 80    	mov.w     0x2e4, w1
    2ca0:	00 02 20    	mov.w     #0x20, w0
    2ca2:	00 80 60    	and.w     w1, w0, w0
    2ca4:	00 f0 a7    	btsc.w    w0, #0xf
    2ca6:	00 00 ea    	neg.w     w0, w0
    2ca8:	00 00 e9    	dec.w     w0, w0
    2caa:	4f 00 de    	lsr.w     w0, #0xf, w0
    2cac:	00 40 78    	mov.b     w0, w0
    2cae:	00 80 fb    	ze        w0, w0
    2cb0:	61 00 60    	and.w     w0, #0x1, w0
    2cb2:	45 00 dd    	sl.w      w0, #0x5, w0
    2cb4:	21 17 80    	mov.w     0x2e4, w1
    2cb6:	01 50 a1    	bclr.w    w1, #0x5
    2cb8:	01 00 70    	ior.w     w0, w1, w0
    2cba:	20 17 88    	mov.w     w0, 0x2e4
    2cbc:	13 00 37    	bra       0x2ce4 <.L279>

00002cbe <.L283>:
        } else if (str2hex(token, &val) == 0) {
    2cbe:	64 00 47    	add.w     w14, #0x4, w0
    2cc0:	80 00 78    	mov.w     w0, w1
    2cc2:	1e 00 78    	mov.w     [w14], w0
    2cc4:	25 f5 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2cc6:	00 00 e0    	cp0.w     w0
    2cc8:	0d 00 3a    	bra       NZ, 0x2ce4 <.L279>
            RE5_ = (val) ? 1 : 0;
    2cca:	2e 00 90    	mov.w     [w14+4], w0
    2ccc:	00 f0 a7    	btsc.w    w0, #0xf
    2cce:	00 00 ea    	neg.w     w0, w0
    2cd0:	00 00 ea    	neg.w     w0, w0
    2cd2:	4f 00 de    	lsr.w     w0, #0xf, w0
    2cd4:	00 40 78    	mov.b     w0, w0
    2cd6:	00 80 fb    	ze        w0, w0
    2cd8:	61 00 60    	and.w     w0, #0x1, w0
    2cda:	45 00 dd    	sl.w      w0, #0x5, w0
    2cdc:	21 17 80    	mov.w     0x2e4, w1
    2cde:	01 50 a1    	bclr.w    w1, #0x5
    2ce0:	01 00 70    	ior.w     w0, w1, w0
    2ce2:	20 17 88    	mov.w     w0, 0x2e4

00002ce4 <.L279>:
        }
    }
}
    2ce4:	00 80 fa    	ulnk      
    2ce6:	00 00 06    	return    

00002ce8 <_re5Q_handler>:

void re5Q_handler(char *args) {
    2ce8:	02 00 fa    	lnk       #0x2
    2cea:	00 0f 78    	mov.w     w0, [w14]
    if (RE5_ == ON)
    2cec:	21 17 80    	mov.w     0x2e4, w1
    2cee:	00 02 20    	mov.w     #0x20, w0
    2cf0:	00 80 60    	and.w     w1, w0, w0
    2cf2:	00 00 e0    	cp0.w     w0
    2cf4:	04 00 32    	bra       Z, 0x2cfe <.L285>
        parser_puts("1\r\n");
    2cf6:	11 42 80    	mov.w     0x842, w1
    2cf8:	40 63 29    	mov.w     #0x9634, w0
    2cfa:	01 00 01    	call      w1
    2cfc:	03 00 37    	bra       0x2d04 <.L284>

00002cfe <.L285>:
    else
        parser_puts("0\r\n");
    2cfe:	11 42 80    	mov.w     0x842, w1
    2d00:	80 63 29    	mov.w     #0x9638, w0
    2d02:	01 00 01    	call      w1

00002d04 <.L284>:
}
    2d04:	00 80 fa    	ulnk      
    2d06:	00 00 06    	return    

00002d08 <_re6_handler>:

void re6_handler(char *args) {
    2d08:	08 00 fa    	lnk       #0x8
    2d0a:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2d0c:	00 00 eb    	clr.w     w0
    2d0e:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2d10:	0e 80 e8    	inc2.w    w14, w0
    2d12:	00 01 78    	mov.w     w0, w2
    2d14:	21 62 29    	mov.w     #0x9622, w1
    2d16:	3e 00 90    	mov.w     [w14+6], w0
    2d18:	50 f6 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2d1a:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2d1c:	1e 00 78    	mov.w     [w14], w0
    2d1e:	00 00 e0    	cp0.w     w0
    2d20:	36 00 32    	bra       Z, 0x2d8e <.L287>
        if (str_cmp(token, "ON") == 0) {
    2d22:	61 62 29    	mov.w     #0x9626, w1
    2d24:	1e 00 78    	mov.w     [w14], w0
    2d26:	ee f5 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2d28:	00 00 e0    	cp0.w     w0
    2d2a:	02 00 3a    	bra       NZ, 0x2d30 <.L289>
            RE6_ = ON;
    2d2c:	e4 c2 a8    	bset.b    0x2e4, #0x6
    2d2e:	2f 00 37    	bra       0x2d8e <.L287>

00002d30 <.L289>:
        } else if (str_cmp(token, "OFF") == 0) {
    2d30:	91 62 29    	mov.w     #0x9629, w1
    2d32:	1e 00 78    	mov.w     [w14], w0
    2d34:	e7 f5 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2d36:	00 00 e0    	cp0.w     w0
    2d38:	02 00 3a    	bra       NZ, 0x2d3e <.L290>
            RE6_ = OFF;
    2d3a:	e4 c2 a9    	bclr.b    0x2e4, #0x6
    2d3c:	28 00 37    	bra       0x2d8e <.L287>

00002d3e <.L290>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2d3e:	d1 62 29    	mov.w     #0x962d, w1
    2d40:	1e 00 78    	mov.w     [w14], w0
    2d42:	e0 f5 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2d44:	00 00 e0    	cp0.w     w0
    2d46:	10 00 3a    	bra       NZ, 0x2d68 <.L291>
            RE6_ = !RE6_;
    2d48:	21 17 80    	mov.w     0x2e4, w1
    2d4a:	00 04 20    	mov.w     #0x40, w0
    2d4c:	00 80 60    	and.w     w1, w0, w0
    2d4e:	00 f0 a7    	btsc.w    w0, #0xf
    2d50:	00 00 ea    	neg.w     w0, w0
    2d52:	00 00 e9    	dec.w     w0, w0
    2d54:	4f 00 de    	lsr.w     w0, #0xf, w0
    2d56:	00 40 78    	mov.b     w0, w0
    2d58:	00 80 fb    	ze        w0, w0
    2d5a:	61 00 60    	and.w     w0, #0x1, w0
    2d5c:	46 00 dd    	sl.w      w0, #0x6, w0
    2d5e:	21 17 80    	mov.w     0x2e4, w1
    2d60:	01 60 a1    	bclr.w    w1, #0x6
    2d62:	01 00 70    	ior.w     w0, w1, w0
    2d64:	20 17 88    	mov.w     w0, 0x2e4
    2d66:	13 00 37    	bra       0x2d8e <.L287>

00002d68 <.L291>:
        } else if (str2hex(token, &val) == 0) {
    2d68:	64 00 47    	add.w     w14, #0x4, w0
    2d6a:	80 00 78    	mov.w     w0, w1
    2d6c:	1e 00 78    	mov.w     [w14], w0
    2d6e:	d0 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2d70:	00 00 e0    	cp0.w     w0
    2d72:	0d 00 3a    	bra       NZ, 0x2d8e <.L287>
            RE6_ = (val) ? 1 : 0;
    2d74:	2e 00 90    	mov.w     [w14+4], w0
    2d76:	00 f0 a7    	btsc.w    w0, #0xf
    2d78:	00 00 ea    	neg.w     w0, w0
    2d7a:	00 00 ea    	neg.w     w0, w0
    2d7c:	4f 00 de    	lsr.w     w0, #0xf, w0
    2d7e:	00 40 78    	mov.b     w0, w0
    2d80:	00 80 fb    	ze        w0, w0
    2d82:	61 00 60    	and.w     w0, #0x1, w0
    2d84:	46 00 dd    	sl.w      w0, #0x6, w0
    2d86:	21 17 80    	mov.w     0x2e4, w1
    2d88:	01 60 a1    	bclr.w    w1, #0x6
    2d8a:	01 00 70    	ior.w     w0, w1, w0
    2d8c:	20 17 88    	mov.w     w0, 0x2e4

00002d8e <.L287>:
        }
    }
}
    2d8e:	00 80 fa    	ulnk      
    2d90:	00 00 06    	return    

00002d92 <_re6Q_handler>:

void re6Q_handler(char *args) {
    2d92:	02 00 fa    	lnk       #0x2
    2d94:	00 0f 78    	mov.w     w0, [w14]
    if (RE6_ == ON)
    2d96:	21 17 80    	mov.w     0x2e4, w1
    2d98:	00 04 20    	mov.w     #0x40, w0
    2d9a:	00 80 60    	and.w     w1, w0, w0
    2d9c:	00 00 e0    	cp0.w     w0
    2d9e:	04 00 32    	bra       Z, 0x2da8 <.L293>
        parser_puts("1\r\n");
    2da0:	11 42 80    	mov.w     0x842, w1
    2da2:	40 63 29    	mov.w     #0x9634, w0
    2da4:	01 00 01    	call      w1
    2da6:	03 00 37    	bra       0x2dae <.L292>

00002da8 <.L293>:
    else
        parser_puts("0\r\n");
    2da8:	11 42 80    	mov.w     0x842, w1
    2daa:	80 63 29    	mov.w     #0x9638, w0
    2dac:	01 00 01    	call      w1

00002dae <.L292>:
}
    2dae:	00 80 fa    	ulnk      
    2db0:	00 00 06    	return    

00002db2 <_digout_handler>:

// DIGOUT commands
void digout_handler(char *args) {
    2db2:	08 00 fa    	lnk       #0x8
    2db4:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    2db6:	00 00 eb    	clr.w     w0
    2db8:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    2dba:	64 00 47    	add.w     w14, #0x4, w0
    2dbc:	00 01 78    	mov.w     w0, w2
    2dbe:	21 62 29    	mov.w     #0x9622, w1
    2dc0:	3e 00 90    	mov.w     [w14+6], w0
    2dc2:	fb f5 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2dc4:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    2dc6:	1e 00 90    	mov.w     [w14+2], w0
    2dc8:	00 00 e0    	cp0.w     w0
    2dca:	1a 00 32    	bra       Z, 0x2e00 <.L295>
        for (i = 0; i < DIGOUT_TABLE_ENTRIES; i++) {
    2dcc:	00 00 eb    	clr.w     w0
    2dce:	00 0f 78    	mov.w     w0, [w14]
    2dd0:	14 00 37    	bra       0x2dfa <.L297>

00002dd2 <.L299>:
            if (str_cmp(command, digout_table[i].command) == 0) {
    2dd2:	1e 00 78    	mov.w     [w14], w0
    2dd4:	c2 00 dd    	sl.w      w0, #0x2, w1
    2dd6:	80 44 21    	mov.w     #0x1448, w0
    2dd8:	00 80 40    	add.w     w1, w0, w0
    2dda:	10 00 78    	mov.w     [w0], w0
    2ddc:	80 00 78    	mov.w     w0, w1
    2dde:	1e 00 90    	mov.w     [w14+2], w0
    2de0:	91 f5 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    2de2:	00 00 e0    	cp0.w     w0
    2de4:	09 00 3a    	bra       NZ, 0x2df8 <.L298>
                digout_table[i].handler(remainder);
    2de6:	1e 00 78    	mov.w     [w14], w0
    2de8:	42 00 dd    	sl.w      w0, #0x2, w0
    2dea:	80 80 e8    	inc2.w    w0, w1
    2dec:	80 44 21    	mov.w     #0x1448, w0
    2dee:	00 80 40    	add.w     w1, w0, w0
    2df0:	90 00 78    	mov.w     [w0], w1
    2df2:	2e 00 90    	mov.w     [w14+4], w0
    2df4:	01 00 01    	call      w1
                break;
    2df6:	04 00 37    	bra       0x2e00 <.L295>

00002df8 <.L298>:
    2df8:	1e 0f e8    	inc.w     [w14], [w14]

00002dfa <.L297>:
    2dfa:	1e 00 78    	mov.w     [w14], w0
    2dfc:	f0 0f 50    	sub.w     w0, #0x10, [w15]
    2dfe:	e9 ff 36    	bra       LEU, 0x2dd2 <.L299>

00002e00 <.L295>:
            }
        }
    }
}
    2e00:	00 80 fa    	ulnk      
    2e02:	00 00 06    	return    

00002e04 <_set_handler>:

void set_handler(char *args) {
    2e04:	04 00 fa    	lnk       #0x4
    2e06:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    2e08:	1e 00 90    	mov.w     [w14+2], w0
    2e0a:	00 00 e0    	cp0.w     w0
    2e0c:	07 00 32    	bra       Z, 0x2e1c <.L300>
    2e0e:	8e 00 78    	mov.w     w14, w1
    2e10:	1e 00 90    	mov.w     [w14+2], w0
    2e12:	7e f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2e14:	00 00 e0    	cp0.w     w0
    2e16:	02 00 3a    	bra       NZ, 0x2e1c <.L300>
        digout_set(ch);
    2e18:	1e 00 78    	mov.w     [w14], w0
    2e1a:	e0 0f 07    	rcall     0x4ddc <_digout_set> <.L0> <.LFB0> <.LFE7> <.Letext0> <.Ltext0>

00002e1c <.L300>:
}
    2e1c:	00 80 fa    	ulnk      
    2e1e:	00 00 06    	return    

00002e20 <_clear_handler>:

void clear_handler(char *args) {
    2e20:	04 00 fa    	lnk       #0x4
    2e22:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    2e24:	1e 00 90    	mov.w     [w14+2], w0
    2e26:	00 00 e0    	cp0.w     w0
    2e28:	07 00 32    	bra       Z, 0x2e38 <.L302>
    2e2a:	8e 00 78    	mov.w     w14, w1
    2e2c:	1e 00 90    	mov.w     [w14+2], w0
    2e2e:	70 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2e30:	00 00 e0    	cp0.w     w0
    2e32:	02 00 3a    	bra       NZ, 0x2e38 <.L302>
        digout_clear(ch);
    2e34:	1e 00 78    	mov.w     [w14], w0
    2e36:	e9 0f 07    	rcall     0x4e0a <_digout_clear> <.LFB1> <.LFE0>

00002e38 <.L302>:
}
    2e38:	00 80 fa    	ulnk      
    2e3a:	00 00 06    	return    

00002e3c <_toggle_handler>:

void toggle_handler(char *args) {
    2e3c:	04 00 fa    	lnk       #0x4
    2e3e:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    2e40:	1e 00 90    	mov.w     [w14+2], w0
    2e42:	00 00 e0    	cp0.w     w0
    2e44:	07 00 32    	bra       Z, 0x2e54 <.L304>
    2e46:	8e 00 78    	mov.w     w14, w1
    2e48:	1e 00 90    	mov.w     [w14+2], w0
    2e4a:	62 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2e4c:	00 00 e0    	cp0.w     w0
    2e4e:	02 00 3a    	bra       NZ, 0x2e54 <.L304>
        digout_toggle(ch);
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	f2 0f 07    	rcall     0x4e38 <_digout_toggle> <.LFB2> <.LFE1>

00002e54 <.L304>:
}
    2e54:	00 80 fa    	ulnk      
    2e56:	00 00 06    	return    

00002e58 <_write_handler>:

void write_handler(char *args) {
    2e58:	0a 00 fa    	lnk       #0xa
    2e5a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, val;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    2e5c:	00 00 eb    	clr.w     w0
    2e5e:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2e60:	66 00 47    	add.w     w14, #0x6, w0
    2e62:	00 01 78    	mov.w     w0, w2
    2e64:	f1 63 29    	mov.w     #0x963f, w1
    2e66:	4e 00 90    	mov.w     [w14+8], w0
    2e68:	a8 f5 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2e6a:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    2e6c:	1e 00 78    	mov.w     [w14], w0
    2e6e:	00 00 e0    	cp0.w     w0
    2e70:	11 00 32    	bra       Z, 0x2e94 <.L306>
    2e72:	3e 00 90    	mov.w     [w14+6], w0
    2e74:	00 00 e0    	cp0.w     w0
    2e76:	0e 00 32    	bra       Z, 0x2e94 <.L306>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &val) == 0)) {
    2e78:	0e 80 e8    	inc2.w    w14, w0
    2e7a:	80 00 78    	mov.w     w0, w1
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	48 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2e80:	00 00 e0    	cp0.w     w0
    2e82:	08 00 3a    	bra       NZ, 0x2e94 <.L306>
    2e84:	3e 00 90    	mov.w     [w14+6], w0
    2e86:	e4 00 47    	add.w     w14, #0x4, w1
    2e88:	43 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2e8a:	00 00 e0    	cp0.w     w0
    2e8c:	03 00 3a    	bra       NZ, 0x2e94 <.L306>
            digout_write(ch, val);
    2e8e:	ae 00 90    	mov.w     [w14+4], w1
    2e90:	1e 00 90    	mov.w     [w14+2], w0
    2e92:	20 10 07    	rcall     0x4ed4 <_digout_write> <.LFB3> <.LFE2>

00002e94 <.L306>:
        }
    }
}
    2e94:	00 80 fa    	ulnk      
    2e96:	00 00 06    	return    

00002e98 <_read_handler>:

void read_handler(char *args) {
    2e98:	0a 00 fa    	lnk       #0xa
    2e9a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    2e9c:	4e 00 90    	mov.w     [w14+8], w0
    2e9e:	00 00 e0    	cp0.w     w0
    2ea0:	0d 00 32    	bra       Z, 0x2ebc <.L308>
    2ea2:	8e 00 78    	mov.w     w14, w1
    2ea4:	4e 00 90    	mov.w     [w14+8], w0
    2ea6:	34 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2ea8:	00 00 e0    	cp0.w     w0
    2eaa:	08 00 3a    	bra       NZ, 0x2ebc <.L308>
        hex2str_alt(digout_read(ch), str);
    2eac:	1e 00 78    	mov.w     [w14], w0
    2eae:	5a 10 07    	rcall     0x4f64 <_digout_read> <.LFB4> <.LFE3>
    2eb0:	8e 80 e8    	inc2.w    w14, w1
    2eb2:	f3 f4 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    2eb4:	0e 80 e8    	inc2.w    w14, w0
    2eb6:	d3 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    2eb8:	c0 63 29    	mov.w     #0x963c, w0
    2eba:	d1 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

00002ebc <.L308>:
    }
}
    2ebc:	00 80 fa    	ulnk      
    2ebe:	00 00 06    	return    

00002ec0 <_od_handler>:

void od_handler(char *args) {
    2ec0:	0a 00 fa    	lnk       #0xa
    2ec2:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, val;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    2ec4:	00 00 eb    	clr.w     w0
    2ec6:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2ec8:	66 00 47    	add.w     w14, #0x6, w0
    2eca:	00 01 78    	mov.w     w0, w2
    2ecc:	f1 63 29    	mov.w     #0x963f, w1
    2ece:	4e 00 90    	mov.w     [w14+8], w0
    2ed0:	74 f5 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2ed2:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    2ed4:	1e 00 78    	mov.w     [w14], w0
    2ed6:	00 00 e0    	cp0.w     w0
    2ed8:	11 00 32    	bra       Z, 0x2efc <.L310>
    2eda:	3e 00 90    	mov.w     [w14+6], w0
    2edc:	00 00 e0    	cp0.w     w0
    2ede:	0e 00 32    	bra       Z, 0x2efc <.L310>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &val) == 0)) {
    2ee0:	0e 80 e8    	inc2.w    w14, w0
    2ee2:	80 00 78    	mov.w     w0, w1
    2ee4:	1e 00 78    	mov.w     [w14], w0
    2ee6:	14 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2ee8:	00 00 e0    	cp0.w     w0
    2eea:	08 00 3a    	bra       NZ, 0x2efc <.L310>
    2eec:	3e 00 90    	mov.w     [w14+6], w0
    2eee:	e4 00 47    	add.w     w14, #0x4, w1
    2ef0:	0f f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2ef2:	00 00 e0    	cp0.w     w0
    2ef4:	03 00 3a    	bra       NZ, 0x2efc <.L310>
            digout_set_od(ch, val);
    2ef6:	ae 00 90    	mov.w     [w14+4], w1
    2ef8:	1e 00 90    	mov.w     [w14+2], w0
    2efa:	59 10 07    	rcall     0x4fae <_digout_set_od> <.LFB5> <.LFE4>

00002efc <.L310>:
        }
    }
}
    2efc:	00 80 fa    	ulnk      
    2efe:	00 00 06    	return    

00002f00 <_odQ_handler>:

void odQ_handler(char *args) {
    2f00:	0a 00 fa    	lnk       #0xa
    2f02:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    2f04:	4e 00 90    	mov.w     [w14+8], w0
    2f06:	00 00 e0    	cp0.w     w0
    2f08:	0d 00 32    	bra       Z, 0x2f24 <.L312>
    2f0a:	8e 00 78    	mov.w     w14, w1
    2f0c:	4e 00 90    	mov.w     [w14+8], w0
    2f0e:	00 f4 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2f10:	00 00 e0    	cp0.w     w0
    2f12:	08 00 3a    	bra       NZ, 0x2f24 <.L312>
        hex2str_alt(digout_get_od(ch), str);
    2f14:	1e 00 78    	mov.w     [w14], w0
    2f16:	93 10 07    	rcall     0x503e <_digout_get_od> <.LFB6> <.LFE5>
    2f18:	8e 80 e8    	inc2.w    w14, w1
    2f1a:	bf f4 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    2f1c:	0e 80 e8    	inc2.w    w14, w0
    2f1e:	9f 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    2f20:	c0 63 29    	mov.w     #0x963c, w0
    2f22:	9d 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

00002f24 <.L312>:
    }
}
    2f24:	00 80 fa    	ulnk      
    2f26:	00 00 06    	return    

00002f28 <_digout_mode_handler>:

void digout_mode_handler(char *args) {
    2f28:	0a 00 fa    	lnk       #0xa
    2f2a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, mode;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    2f2c:	00 00 eb    	clr.w     w0
    2f2e:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2f30:	66 00 47    	add.w     w14, #0x6, w0
    2f32:	00 01 78    	mov.w     w0, w2
    2f34:	f1 63 29    	mov.w     #0x963f, w1
    2f36:	4e 00 90    	mov.w     [w14+8], w0
    2f38:	40 f5 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2f3a:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    2f3c:	1e 00 78    	mov.w     [w14], w0
    2f3e:	00 00 e0    	cp0.w     w0
    2f40:	11 00 32    	bra       Z, 0x2f64 <.L314>
    2f42:	3e 00 90    	mov.w     [w14+6], w0
    2f44:	00 00 e0    	cp0.w     w0
    2f46:	0e 00 32    	bra       Z, 0x2f64 <.L314>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &mode) == 0)) {
    2f48:	0e 80 e8    	inc2.w    w14, w0
    2f4a:	80 00 78    	mov.w     w0, w1
    2f4c:	1e 00 78    	mov.w     [w14], w0
    2f4e:	e0 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2f50:	00 00 e0    	cp0.w     w0
    2f52:	08 00 3a    	bra       NZ, 0x2f64 <.L314>
    2f54:	3e 00 90    	mov.w     [w14+6], w0
    2f56:	e4 00 47    	add.w     w14, #0x4, w1
    2f58:	db f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2f5a:	00 00 e0    	cp0.w     w0
    2f5c:	03 00 3a    	bra       NZ, 0x2f64 <.L314>
            digout_set_mode(ch, mode);
    2f5e:	ae 00 90    	mov.w     [w14+4], w1
    2f60:	1e 00 90    	mov.w     [w14+2], w0
    2f62:	70 11 07    	rcall     0x5244 <_digout_set_mode> <.LFB14> <.LFE13>

00002f64 <.L314>:
        }
    }
}
    2f64:	00 80 fa    	ulnk      
    2f66:	00 00 06    	return    

00002f68 <_digout_modeQ_handler>:

void digout_modeQ_handler(char *args) {
    2f68:	0a 00 fa    	lnk       #0xa
    2f6a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    2f6c:	4e 00 90    	mov.w     [w14+8], w0
    2f6e:	00 00 e0    	cp0.w     w0
    2f70:	0d 00 32    	bra       Z, 0x2f8c <.L316>
    2f72:	8e 00 78    	mov.w     w14, w1
    2f74:	4e 00 90    	mov.w     [w14+8], w0
    2f76:	cc f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2f78:	00 00 e0    	cp0.w     w0
    2f7a:	08 00 3a    	bra       NZ, 0x2f8c <.L316>
        hex2str_alt(digout_get_mode(ch), str);
    2f7c:	1e 00 78    	mov.w     [w14], w0
    2f7e:	ea 12 07    	rcall     0x5554 <_digout_get_mode> <.LFB15> <.LFE14>
    2f80:	8e 80 e8    	inc2.w    w14, w1
    2f82:	8b f4 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    2f84:	0e 80 e8    	inc2.w    w14, w0
    2f86:	6b 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    2f88:	c0 63 29    	mov.w     #0x963c, w0
    2f8a:	69 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

00002f8c <.L316>:
    }
}
    2f8c:	00 80 fa    	ulnk      
    2f8e:	00 00 06    	return    

00002f90 <_period_handler>:

void period_handler(char *args) {
    2f90:	0a 00 fa    	lnk       #0xa
    2f92:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, period;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    2f94:	00 00 eb    	clr.w     w0
    2f96:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2f98:	66 00 47    	add.w     w14, #0x6, w0
    2f9a:	00 01 78    	mov.w     w0, w2
    2f9c:	f1 63 29    	mov.w     #0x963f, w1
    2f9e:	4e 00 90    	mov.w     [w14+8], w0
    2fa0:	0c f5 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    2fa2:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	00 00 e0    	cp0.w     w0
    2fa8:	11 00 32    	bra       Z, 0x2fcc <.L318>
    2faa:	3e 00 90    	mov.w     [w14+6], w0
    2fac:	00 00 e0    	cp0.w     w0
    2fae:	0e 00 32    	bra       Z, 0x2fcc <.L318>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &period) == 0)) {
    2fb0:	0e 80 e8    	inc2.w    w14, w0
    2fb2:	80 00 78    	mov.w     w0, w1
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	ac f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2fb8:	00 00 e0    	cp0.w     w0
    2fba:	08 00 3a    	bra       NZ, 0x2fcc <.L318>
    2fbc:	3e 00 90    	mov.w     [w14+6], w0
    2fbe:	e4 00 47    	add.w     w14, #0x4, w1
    2fc0:	a7 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2fc2:	00 00 e0    	cp0.w     w0
    2fc4:	03 00 3a    	bra       NZ, 0x2fcc <.L318>
            digout_set_period(ch, period);
    2fc6:	ae 00 90    	mov.w     [w14+4], w1
    2fc8:	1e 00 90    	mov.w     [w14+2], w0
    2fca:	9f 10 07    	rcall     0x510a <_digout_set_period> <.LFB9> <.LFE8>

00002fcc <.L318>:
        }
    }
}
    2fcc:	00 80 fa    	ulnk      
    2fce:	00 00 06    	return    

00002fd0 <_periodQ_handler>:

void periodQ_handler(char *args) {
    2fd0:	0a 00 fa    	lnk       #0xa
    2fd2:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    2fd4:	4e 00 90    	mov.w     [w14+8], w0
    2fd6:	00 00 e0    	cp0.w     w0
    2fd8:	0d 00 32    	bra       Z, 0x2ff4 <.L320>
    2fda:	8e 00 78    	mov.w     w14, w1
    2fdc:	4e 00 90    	mov.w     [w14+8], w0
    2fde:	98 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2fe0:	00 00 e0    	cp0.w     w0
    2fe2:	08 00 3a    	bra       NZ, 0x2ff4 <.L320>
        hex2str_alt(digout_get_period(ch), str);
    2fe4:	1e 00 78    	mov.w     [w14], w0
    2fe6:	cf 10 07    	rcall     0x5186 <_digout_get_period> <.LFB10> <.LFE9>
    2fe8:	8e 80 e8    	inc2.w    w14, w1
    2fea:	57 f4 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    2fec:	0e 80 e8    	inc2.w    w14, w0
    2fee:	37 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    2ff0:	c0 63 29    	mov.w     #0x963c, w0
    2ff2:	35 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

00002ff4 <.L320>:
    }
}
    2ff4:	00 80 fa    	ulnk      
    2ff6:	00 00 06    	return    

00002ff8 <_duty_handler>:

void duty_handler(char *args) {
    2ff8:	0a 00 fa    	lnk       #0xa
    2ffa:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, duty;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    2ffc:	00 00 eb    	clr.w     w0
    2ffe:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    3000:	66 00 47    	add.w     w14, #0x6, w0
    3002:	00 01 78    	mov.w     w0, w2
    3004:	f1 63 29    	mov.w     #0x963f, w1
    3006:	4e 00 90    	mov.w     [w14+8], w0
    3008:	d8 f4 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    300a:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    300c:	1e 00 78    	mov.w     [w14], w0
    300e:	00 00 e0    	cp0.w     w0
    3010:	11 00 32    	bra       Z, 0x3034 <.L322>
    3012:	3e 00 90    	mov.w     [w14+6], w0
    3014:	00 00 e0    	cp0.w     w0
    3016:	0e 00 32    	bra       Z, 0x3034 <.L322>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &duty) == 0)) {
    3018:	0e 80 e8    	inc2.w    w14, w0
    301a:	80 00 78    	mov.w     w0, w1
    301c:	1e 00 78    	mov.w     [w14], w0
    301e:	78 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3020:	00 00 e0    	cp0.w     w0
    3022:	08 00 3a    	bra       NZ, 0x3034 <.L322>
    3024:	3e 00 90    	mov.w     [w14+6], w0
    3026:	e4 00 47    	add.w     w14, #0x4, w1
    3028:	73 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    302a:	00 00 e0    	cp0.w     w0
    302c:	03 00 3a    	bra       NZ, 0x3034 <.L322>
            digout_set_duty(ch, duty);
    302e:	ae 00 90    	mov.w     [w14+4], w1
    3030:	1e 00 90    	mov.w     [w14+2], w0
    3032:	2a 10 07    	rcall     0x5088 <_digout_set_duty> <.LFB7> <.LFE6>

00003034 <.L322>:
        }
    }
}
    3034:	00 80 fa    	ulnk      
    3036:	00 00 06    	return    

00003038 <_dutyQ_handler>:

void dutyQ_handler(char *args) {
    3038:	0a 00 fa    	lnk       #0xa
    303a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    303c:	4e 00 90    	mov.w     [w14+8], w0
    303e:	00 00 e0    	cp0.w     w0
    3040:	0d 00 32    	bra       Z, 0x305c <.L324>
    3042:	8e 00 78    	mov.w     w14, w1
    3044:	4e 00 90    	mov.w     [w14+8], w0
    3046:	64 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3048:	00 00 e0    	cp0.w     w0
    304a:	08 00 3a    	bra       NZ, 0x305c <.L324>
        hex2str_alt(digout_get_duty(ch), str);
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	3e 10 07    	rcall     0x50cc <_digout_get_duty> <.LFB8> <.LFE7>
    3050:	8e 80 e8    	inc2.w    w14, w1
    3052:	23 f4 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    3054:	0e 80 e8    	inc2.w    w14, w0
    3056:	03 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    3058:	c0 63 29    	mov.w     #0x963c, w0
    305a:	01 14 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

0000305c <.L324>:
    }
}
    305c:	00 80 fa    	ulnk      
    305e:	00 00 06    	return    

00003060 <_width_handler>:

void width_handler(char *args) {
    3060:	0a 00 fa    	lnk       #0xa
    3062:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, width;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    3064:	00 00 eb    	clr.w     w0
    3066:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    3068:	66 00 47    	add.w     w14, #0x6, w0
    306a:	00 01 78    	mov.w     w0, w2
    306c:	f1 63 29    	mov.w     #0x963f, w1
    306e:	4e 00 90    	mov.w     [w14+8], w0
    3070:	a4 f4 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3072:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    3074:	1e 00 78    	mov.w     [w14], w0
    3076:	00 00 e0    	cp0.w     w0
    3078:	11 00 32    	bra       Z, 0x309c <.L326>
    307a:	3e 00 90    	mov.w     [w14+6], w0
    307c:	00 00 e0    	cp0.w     w0
    307e:	0e 00 32    	bra       Z, 0x309c <.L326>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &width) == 0)) {
    3080:	0e 80 e8    	inc2.w    w14, w0
    3082:	80 00 78    	mov.w     w0, w1
    3084:	1e 00 78    	mov.w     [w14], w0
    3086:	44 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3088:	00 00 e0    	cp0.w     w0
    308a:	08 00 3a    	bra       NZ, 0x309c <.L326>
    308c:	3e 00 90    	mov.w     [w14+6], w0
    308e:	e4 00 47    	add.w     w14, #0x4, w1
    3090:	3f f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3092:	00 00 e0    	cp0.w     w0
    3094:	03 00 3a    	bra       NZ, 0x309c <.L326>
            digout_set_width(ch, width);
    3096:	ae 00 90    	mov.w     [w14+4], w1
    3098:	1e 00 90    	mov.w     [w14+2], w0
    309a:	85 10 07    	rcall     0x51a6 <_digout_set_width> <.LFB11> <.LFE10>

0000309c <.L326>:
        }
    }
}
    309c:	00 80 fa    	ulnk      
    309e:	00 00 06    	return    

000030a0 <_widthQ_handler>:

void widthQ_handler(char *args) {
    30a0:	0a 00 fa    	lnk       #0xa
    30a2:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    30a4:	4e 00 90    	mov.w     [w14+8], w0
    30a6:	00 00 e0    	cp0.w     w0
    30a8:	0d 00 32    	bra       Z, 0x30c4 <.L328>
    30aa:	8e 00 78    	mov.w     w14, w1
    30ac:	4e 00 90    	mov.w     [w14+8], w0
    30ae:	30 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    30b0:	00 00 e0    	cp0.w     w0
    30b2:	08 00 3a    	bra       NZ, 0x30c4 <.L328>
        hex2str_alt(digout_get_width(ch), str);
    30b4:	1e 00 78    	mov.w     [w14], w0
    30b6:	93 10 07    	rcall     0x51de <_digout_get_width> <.LFB12> <.LFE11>
    30b8:	8e 80 e8    	inc2.w    w14, w1
    30ba:	ef f3 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    30bc:	0e 80 e8    	inc2.w    w14, w0
    30be:	cf 13 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    30c0:	c0 63 29    	mov.w     #0x963c, w0
    30c2:	cd 13 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>

000030c4 <.L328>:
    }
}
    30c4:	00 80 fa    	ulnk      
    30c6:	00 00 06    	return    

000030c8 <_timer1period_handler>:

void timer1period_handler(char *args) {
    30c8:	0a 00 fa    	lnk       #0xa
    30ca:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    30cc:	00 00 eb    	clr.w     w0
    30ce:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    30d0:	66 00 47    	add.w     w14, #0x6, w0
    30d2:	00 01 78    	mov.w     w0, w2
    30d4:	f1 63 29    	mov.w     #0x963f, w1
    30d6:	4e 00 90    	mov.w     [w14+8], w0
    30d8:	70 f4 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    30da:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    30dc:	1e 00 78    	mov.w     [w14], w0
    30de:	00 00 e0    	cp0.w     w0
    30e0:	11 00 32    	bra       Z, 0x3104 <.L330>
    30e2:	3e 00 90    	mov.w     [w14+6], w0
    30e4:	00 00 e0    	cp0.w     w0
    30e6:	0e 00 32    	bra       Z, 0x3104 <.L330>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    30e8:	0e 80 e8    	inc2.w    w14, w0
    30ea:	80 00 78    	mov.w     w0, w1
    30ec:	1e 00 78    	mov.w     [w14], w0
    30ee:	10 f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    30f0:	00 00 e0    	cp0.w     w0
    30f2:	08 00 3a    	bra       NZ, 0x3104 <.L330>
    30f4:	3e 00 90    	mov.w     [w14+6], w0
    30f6:	e4 00 47    	add.w     w14, #0x4, w1
    30f8:	0b f3 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    30fa:	00 00 e0    	cp0.w     w0
    30fc:	03 00 3a    	bra       NZ, 0x3104 <.L330>
            digout_set_timer1_period(val1, val2);
    30fe:	ae 00 90    	mov.w     [w14+4], w1
    3100:	1e 00 90    	mov.w     [w14+2], w0
    3102:	7d 10 07    	rcall     0x51fe <_digout_set_timer1_period> <.LFB13> <.LFE12>

00003104 <.L330>:
        }
    }
}
    3104:	00 80 fa    	ulnk      
    3106:	00 00 06    	return    

00003108 <_timer1periodQ_handler>:

void timer1periodQ_handler(char *args) {
    3108:	08 00 fa    	lnk       #0x8
    310a:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PR1, str);
    310c:	10 08 80    	mov.w     0x102, w0
    310e:	8e 00 78    	mov.w     w14, w1
    3110:	c4 f3 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    3112:	0e 00 78    	mov.w     w14, w0
    3114:	a4 13 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    3116:	c0 c2 b3    	mov.b     #0x2c, w0
    3118:	6b 13 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(T1CON, str);
    311a:	20 08 80    	mov.w     0x104, w0
    311c:	8e 00 78    	mov.w     w14, w1
    311e:	bd f3 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    3120:	0e 00 78    	mov.w     w14, w0
    3122:	9d 13 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    3124:	c0 63 29    	mov.w     #0x963c, w0
    3126:	9b 13 07    	rcall     0x585e <_cdc_puts> <.LFB9> <.LFE8>
}
    3128:	00 80 fa    	ulnk      
    312a:	00 00 06    	return    

0000312c <_ble_handler>:

// BLE commands
void ble_handler(char *args) {
    312c:	08 00 fa    	lnk       #0x8
    312e:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    3130:	00 00 eb    	clr.w     w0
    3132:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    3134:	64 00 47    	add.w     w14, #0x4, w0
    3136:	00 01 78    	mov.w     w0, w2
    3138:	21 62 29    	mov.w     #0x9622, w1
    313a:	3e 00 90    	mov.w     [w14+6], w0
    313c:	3e f4 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    313e:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    3140:	1e 00 90    	mov.w     [w14+2], w0
    3142:	00 00 e0    	cp0.w     w0
    3144:	1a 00 32    	bra       Z, 0x317a <.L333>
        for (i = 0; i < BLE_TABLE_ENTRIES; i++) {
    3146:	00 00 eb    	clr.w     w0
    3148:	00 0f 78    	mov.w     w0, [w14]
    314a:	14 00 37    	bra       0x3174 <.L335>

0000314c <.L337>:
            if (str_cmp(command, ble_table[i].command) == 0) {
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	c2 00 dd    	sl.w      w0, #0x2, w1
    3150:	c0 48 21    	mov.w     #0x148c, w0
    3152:	00 80 40    	add.w     w1, w0, w0
    3154:	10 00 78    	mov.w     [w0], w0
    3156:	80 00 78    	mov.w     w0, w1
    3158:	1e 00 90    	mov.w     [w14+2], w0
    315a:	d4 f3 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    315c:	00 00 e0    	cp0.w     w0
    315e:	09 00 3a    	bra       NZ, 0x3172 <.L336>
                ble_table[i].handler(remainder);
    3160:	1e 00 78    	mov.w     [w14], w0
    3162:	42 00 dd    	sl.w      w0, #0x2, w0
    3164:	80 80 e8    	inc2.w    w0, w1
    3166:	c0 48 21    	mov.w     #0x148c, w0
    3168:	00 80 40    	add.w     w1, w0, w0
    316a:	90 00 78    	mov.w     [w0], w1
    316c:	2e 00 90    	mov.w     [w14+4], w0
    316e:	01 00 01    	call      w1
                break;
    3170:	04 00 37    	bra       0x317a <.L333>

00003172 <.L336>:
    3172:	1e 0f e8    	inc.w     [w14], [w14]

00003174 <.L335>:
    3174:	1e 00 78    	mov.w     [w14], w0
    3176:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3178:	e9 ff 36    	bra       LEU, 0x314c <.L337>

0000317a <.L333>:
            }
        }
    }
}
    317a:	00 80 fa    	ulnk      
    317c:	00 00 06    	return    

0000317e <_ble_reset_handler>:

void ble_reset_handler(char *args) {
    317e:	08 00 fa    	lnk       #0x8
    3180:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    3182:	00 00 eb    	clr.w     w0
    3184:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    3186:	0e 80 e8    	inc2.w    w14, w0
    3188:	00 01 78    	mov.w     w0, w2
    318a:	21 62 29    	mov.w     #0x9622, w1
    318c:	3e 00 90    	mov.w     [w14+6], w0
    318e:	15 f4 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3190:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    3192:	1e 00 78    	mov.w     [w14], w0
    3194:	00 00 e0    	cp0.w     w0
    3196:	36 00 32    	bra       Z, 0x3204 <.L338>
        if (str_cmp(token, "ON") == 0) {
    3198:	61 62 29    	mov.w     #0x9626, w1
    319a:	1e 00 78    	mov.w     [w14], w0
    319c:	b3 f3 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    319e:	00 00 e0    	cp0.w     w0
    31a0:	02 00 3a    	bra       NZ, 0x31a6 <.L340>
            BLE_RST_N = ON;
    31a2:	e4 e2 a8    	bset.b    0x2e4, #0x7
    31a4:	2f 00 37    	bra       0x3204 <.L338>

000031a6 <.L340>:
        } else if (str_cmp(token, "OFF") == 0) {
    31a6:	91 62 29    	mov.w     #0x9629, w1
    31a8:	1e 00 78    	mov.w     [w14], w0
    31aa:	ac f3 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    31ac:	00 00 e0    	cp0.w     w0
    31ae:	02 00 3a    	bra       NZ, 0x31b4 <.L341>
            BLE_RST_N = OFF;
    31b0:	e4 e2 a9    	bclr.b    0x2e4, #0x7
    31b2:	28 00 37    	bra       0x3204 <.L338>

000031b4 <.L341>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    31b4:	d1 62 29    	mov.w     #0x962d, w1
    31b6:	1e 00 78    	mov.w     [w14], w0
    31b8:	a5 f3 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    31ba:	00 00 e0    	cp0.w     w0
    31bc:	10 00 3a    	bra       NZ, 0x31de <.L342>
            BLE_RST_N = !BLE_RST_N;
    31be:	21 17 80    	mov.w     0x2e4, w1
    31c0:	00 08 20    	mov.w     #0x80, w0
    31c2:	00 80 60    	and.w     w1, w0, w0
    31c4:	00 f0 a7    	btsc.w    w0, #0xf
    31c6:	00 00 ea    	neg.w     w0, w0
    31c8:	00 00 e9    	dec.w     w0, w0
    31ca:	4f 00 de    	lsr.w     w0, #0xf, w0
    31cc:	00 40 78    	mov.b     w0, w0
    31ce:	00 80 fb    	ze        w0, w0
    31d0:	61 00 60    	and.w     w0, #0x1, w0
    31d2:	47 00 dd    	sl.w      w0, #0x7, w0
    31d4:	21 17 80    	mov.w     0x2e4, w1
    31d6:	01 70 a1    	bclr.w    w1, #0x7
    31d8:	01 00 70    	ior.w     w0, w1, w0
    31da:	20 17 88    	mov.w     w0, 0x2e4
    31dc:	13 00 37    	bra       0x3204 <.L338>

000031de <.L342>:
        } else if (str2hex(token, &val) == 0) {
    31de:	64 00 47    	add.w     w14, #0x4, w0
    31e0:	80 00 78    	mov.w     w0, w1
    31e2:	1e 00 78    	mov.w     [w14], w0
    31e4:	95 f2 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    31e6:	00 00 e0    	cp0.w     w0
    31e8:	0d 00 3a    	bra       NZ, 0x3204 <.L338>
            BLE_RST_N = (val) ? 1 : 0;
    31ea:	2e 00 90    	mov.w     [w14+4], w0
    31ec:	00 f0 a7    	btsc.w    w0, #0xf
    31ee:	00 00 ea    	neg.w     w0, w0
    31f0:	00 00 ea    	neg.w     w0, w0
    31f2:	4f 00 de    	lsr.w     w0, #0xf, w0
    31f4:	00 40 78    	mov.b     w0, w0
    31f6:	00 80 fb    	ze        w0, w0
    31f8:	61 00 60    	and.w     w0, #0x1, w0
    31fa:	47 00 dd    	sl.w      w0, #0x7, w0
    31fc:	21 17 80    	mov.w     0x2e4, w1
    31fe:	01 70 a1    	bclr.w    w1, #0x7
    3200:	01 00 70    	ior.w     w0, w1, w0
    3202:	20 17 88    	mov.w     w0, 0x2e4

00003204 <.L338>:
        }
    }
}
    3204:	00 80 fa    	ulnk      
    3206:	00 00 06    	return    

00003208 <_ble_resetQ_handler>:

void ble_resetQ_handler(char *args) {
    3208:	02 00 fa    	lnk       #0x2
    320a:	00 0f 78    	mov.w     w0, [w14]
    if (BLE_RST_N == 1)
    320c:	21 17 80    	mov.w     0x2e4, w1
    320e:	00 08 20    	mov.w     #0x80, w0
    3210:	00 80 60    	and.w     w1, w0, w0
    3212:	00 00 e0    	cp0.w     w0
    3214:	04 00 32    	bra       Z, 0x321e <.L344>
        parser_puts("1\r\n");
    3216:	11 42 80    	mov.w     0x842, w1
    3218:	40 63 29    	mov.w     #0x9634, w0
    321a:	01 00 01    	call      w1
    321c:	03 00 37    	bra       0x3224 <.L343>

0000321e <.L344>:
    else
        parser_puts("0\r\n");
    321e:	11 42 80    	mov.w     0x842, w1
    3220:	80 63 29    	mov.w     #0x9638, w0
    3222:	01 00 01    	call      w1

00003224 <.L343>:
}
    3224:	00 80 fa    	ulnk      
    3226:	00 00 06    	return    

00003228 <_ble_forward_handler>:

void ble_forward_handler(char *args) {
    3228:	02 00 fa    	lnk       #0x2
    322a:	00 0f 78    	mov.w     w0, [w14]
    if (parser_state == parser_disconnected) {
    322c:	d1 41 80    	mov.w     0x83a, w1
    322e:	60 56 23    	mov.w     #0x3566, w0
    3230:	80 8f 50    	sub.w     w1, w0, [w15]
    3232:	02 00 3a    	bra       NZ, 0x3238 <.L346>
        parser_state = parser_forwarding;
    3234:	e0 89 23    	mov.w     #0x389e, w0
    3236:	d0 41 88    	mov.w     w0, 0x83a

00003238 <.L346>:
    }
}
    3238:	00 80 fa    	ulnk      
    323a:	00 00 06    	return    

0000323c <_flash_handler>:

// FLASH commands
void flash_handler(char *args) {
    323c:	08 00 fa    	lnk       #0x8
    323e:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    3240:	00 00 eb    	clr.w     w0
    3242:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    3244:	64 00 47    	add.w     w14, #0x4, w0
    3246:	00 01 78    	mov.w     w0, w2
    3248:	21 62 29    	mov.w     #0x9622, w1
    324a:	3e 00 90    	mov.w     [w14+6], w0
    324c:	b6 f3 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    324e:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    3250:	1e 00 90    	mov.w     [w14+2], w0
    3252:	00 00 e0    	cp0.w     w0
    3254:	1a 00 32    	bra       Z, 0x328a <.L348>
        for (i = 0; i < FLASH_TABLE_ENTRIES; i++) {
    3256:	00 00 eb    	clr.w     w0
    3258:	00 0f 78    	mov.w     w0, [w14]
    325a:	14 00 37    	bra       0x3284 <.L350>

0000325c <.L352>:
            if (str_cmp(command, flash_table[i].command) == 0) {
    325c:	1e 00 78    	mov.w     [w14], w0
    325e:	c2 00 dd    	sl.w      w0, #0x2, w1
    3260:	80 49 21    	mov.w     #0x1498, w0
    3262:	00 80 40    	add.w     w1, w0, w0
    3264:	10 00 78    	mov.w     [w0], w0
    3266:	80 00 78    	mov.w     w0, w1
    3268:	1e 00 90    	mov.w     [w14+2], w0
    326a:	4c f3 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    326c:	00 00 e0    	cp0.w     w0
    326e:	09 00 3a    	bra       NZ, 0x3282 <.L351>
                flash_table[i].handler(remainder);
    3270:	1e 00 78    	mov.w     [w14], w0
    3272:	42 00 dd    	sl.w      w0, #0x2, w0
    3274:	80 80 e8    	inc2.w    w0, w1
    3276:	80 49 21    	mov.w     #0x1498, w0
    3278:	00 80 40    	add.w     w1, w0, w0
    327a:	90 00 78    	mov.w     [w0], w1
    327c:	2e 00 90    	mov.w     [w14+4], w0
    327e:	01 00 01    	call      w1
                break;
    3280:	04 00 37    	bra       0x328a <.L348>

00003282 <.L351>:
    3282:	1e 0f e8    	inc.w     [w14], [w14]

00003284 <.L350>:
    3284:	1e 00 78    	mov.w     [w14], w0
    3286:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3288:	e9 ff 36    	bra       LEU, 0x325c <.L352>

0000328a <.L348>:
            }
        }
    }
}
    328a:	00 80 fa    	ulnk      
    328c:	00 00 06    	return    

0000328e <_flash_erase_handler>:

void flash_erase_handler(char *args) {
    328e:	0a 00 fa    	lnk       #0xa
    3290:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    3292:	00 00 eb    	clr.w     w0
    3294:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    3296:	66 00 47    	add.w     w14, #0x6, w0
    3298:	00 01 78    	mov.w     w0, w2
    329a:	f1 63 29    	mov.w     #0x963f, w1
    329c:	4e 00 90    	mov.w     [w14+8], w0
    329e:	8d f3 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    32a0:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    32a2:	1e 00 78    	mov.w     [w14], w0
    32a4:	00 00 e0    	cp0.w     w0
    32a6:	26 00 32    	bra       Z, 0x32f4 <.L353>
    32a8:	3e 00 90    	mov.w     [w14+6], w0
    32aa:	00 00 e0    	cp0.w     w0
    32ac:	23 00 32    	bra       Z, 0x32f4 <.L353>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    32ae:	0e 80 e8    	inc2.w    w14, w0
    32b0:	80 00 78    	mov.w     w0, w1
    32b2:	1e 00 78    	mov.w     [w14], w0
    32b4:	2d f2 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    32b6:	00 00 e0    	cp0.w     w0
    32b8:	1d 00 3a    	bra       NZ, 0x32f4 <.L353>
    32ba:	3e 00 90    	mov.w     [w14+6], w0
    32bc:	e4 00 47    	add.w     w14, #0x4, w1
    32be:	28 f2 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    32c0:	00 00 e0    	cp0.w     w0
    32c2:	18 00 3a    	bra       NZ, 0x32f4 <.L353>
            NVMCON = 0x4042;                // set up NVMCON to erase a page of program memory
    32c4:	20 04 24    	mov.w     #0x4042, w0
    32c6:	00 3b 88    	mov.w     w0, 0x760
            __asm__("push _TBLPAG");
    32c8:	54 00 f8    	push      0x54
            TBLPAG = val1;
    32ca:	1e 00 90    	mov.w     [w14+2], w0
    32cc:	a0 02 88    	mov.w     w0, 0x54
            __builtin_tblwtl(val2, 0x0000);
    32ce:	2e 00 90    	mov.w     [w14+4], w0
    32d0:	80 00 eb    	clr.w     w1
    32d2:	01 08 bb    	tblwtl.w  w1, [w0]
            __asm__("disi #16");            // disable interrupts for 16 cycles
    32d4:	10 00 fc    	disi      #0x10
            __builtin_write_NVM();          // issue the unlock sequence and perform the write
    32d6:	50 05 20    	mov.w     #0x55, w0
    32d8:	30 3b 88    	mov.w     w0, 0x766
    32da:	a0 0a 20    	mov.w     #0xaa, w0
    32dc:	30 3b 88    	mov.w     w0, 0x766
    32de:	61 e7 a8    	bset.b    0x761, #0x7
	...

000032e6 <.L355>:
            while (NVMCONbits.WR == 1) {}   // wait until the write is complete
    32e6:	01 3b 80    	mov.w     0x760, w1
    32e8:	00 00 28    	mov.w     #0x8000, w0
    32ea:	00 80 60    	and.w     w1, w0, w0
    32ec:	00 00 e0    	cp0.w     w0
    32ee:	fb ff 3a    	bra       NZ, 0x32e6 <.L355>
            NVMCONbits.WREN = 0;            // disable further writes to program memory
    32f0:	61 c7 a9    	bclr.b    0x761, #0x6
            __asm__("pop _TBLPAG");
    32f2:	54 00 f9    	pop       0x54

000032f4 <.L353>:
        }
    }
}
    32f4:	00 80 fa    	ulnk      
    32f6:	00 00 06    	return    

000032f8 <_flash_read_handler>:

void flash_read_handler(char *args) {
    32f8:	14 00 fa    	lnk       #0x14
    32fa:	10 0f 98    	mov.w     w0, [w14+18]
    uint16_t val1, val2, val3;
    char *arg, *remainder;
    char str[5];
    WORD temp;

    remainder = (char *)NULL;
    32fc:	00 00 eb    	clr.w     w0
    32fe:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    3300:	68 00 47    	add.w     w14, #0x8, w0
    3302:	00 01 78    	mov.w     w0, w2
    3304:	f1 63 29    	mov.w     #0x963f, w1
    3306:	1e 08 90    	mov.w     [w14+18], w0
    3308:	58 f3 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    330a:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val1) != 0)
    330c:	0e 80 e8    	inc2.w    w14, w0
    330e:	80 00 78    	mov.w     w0, w1
    3310:	1e 00 78    	mov.w     [w14], w0
    3312:	fe f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3314:	00 00 e0    	cp0.w     w0
    3316:	60 00 3a    	bra       NZ, 0x33d8 <.L365>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    3318:	68 00 47    	add.w     w14, #0x8, w0
    331a:	00 01 78    	mov.w     w0, w2
    331c:	f1 63 29    	mov.w     #0x963f, w1
    331e:	00 00 eb    	clr.w     w0
    3320:	4c f3 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3322:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val2) != 0)
    3324:	64 00 47    	add.w     w14, #0x4, w0
    3326:	80 00 78    	mov.w     w0, w1
    3328:	1e 00 78    	mov.w     [w14], w0
    332a:	f2 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    332c:	00 00 e0    	cp0.w     w0
    332e:	56 00 3a    	bra       NZ, 0x33dc <.L366>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    3330:	68 00 47    	add.w     w14, #0x8, w0
    3332:	00 01 78    	mov.w     w0, w2
    3334:	f1 63 29    	mov.w     #0x963f, w1
    3336:	00 00 eb    	clr.w     w0
    3338:	40 f3 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    333a:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val3) != 0)
    333c:	66 00 47    	add.w     w14, #0x6, w0
    333e:	80 00 78    	mov.w     w0, w1
    3340:	1e 00 78    	mov.w     [w14], w0
    3342:	e6 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3344:	00 00 e0    	cp0.w     w0
    3346:	4c 00 3a    	bra       NZ, 0x33e0 <.L367>
        return;

    __asm__("push _TBLPAG");
    3348:	54 00 f8    	push      0x54
    TBLPAG = val1;
    334a:	1e 00 90    	mov.w     [w14+2], w0
    334c:	a0 02 88    	mov.w     w0, 0x54
    for (val1 = 0; val1 < val3; val2 += 2) {
    334e:	00 00 eb    	clr.w     w0
    3350:	10 07 98    	mov.w     w0, [w14+2]
    3352:	3c 00 37    	bra       0x33cc <.L361>

00003354 <.L364>:
        temp.w = __builtin_tblrdl(val2);
    3354:	2e 00 90    	mov.w     [w14+4], w0
    3356:	10 00 ba    	tblrdl.w  [w0], w0
    3358:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    335a:	0e 50 90    	mov.b     [w14+16], w0
    335c:	00 80 fb    	ze        w0, w0
    335e:	ea 00 47    	add.w     w14, #0xa, w1
    3360:	9c f2 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    3362:	11 42 80    	mov.w     0x842, w1
    3364:	6a 00 47    	add.w     w14, #0xa, w0
    3366:	01 00 01    	call      w1
        parser_putc(',');
    3368:	01 42 80    	mov.w     0x840, w1
    336a:	c0 c2 b3    	mov.b     #0x2c, w0
    336c:	01 00 01    	call      w1
        hex2str_alt(temp.b[1], str);
    336e:	1e 50 90    	mov.b     [w14+17], w0
    3370:	00 80 fb    	ze        w0, w0
    3372:	ea 00 47    	add.w     w14, #0xa, w1
    3374:	92 f2 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    3376:	11 42 80    	mov.w     0x842, w1
    3378:	6a 00 47    	add.w     w14, #0xa, w0
    337a:	01 00 01    	call      w1
        parser_putc(',');
    337c:	01 42 80    	mov.w     0x840, w1
    337e:	c0 c2 b3    	mov.b     #0x2c, w0
    3380:	01 00 01    	call      w1
        temp.w = __builtin_tblrdh(val2);
    3382:	2e 00 90    	mov.w     [w14+4], w0
    3384:	10 80 ba    	tblrdh.w  [w0], w0
    3386:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    3388:	0e 50 90    	mov.b     [w14+16], w0
    338a:	00 80 fb    	ze        w0, w0
    338c:	ea 00 47    	add.w     w14, #0xa, w1
    338e:	85 f2 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    3390:	11 42 80    	mov.w     0x842, w1
    3392:	6a 00 47    	add.w     w14, #0xa, w0
    3394:	01 00 01    	call      w1
        parser_putc(',');
    3396:	01 42 80    	mov.w     0x840, w1
    3398:	c0 c2 b3    	mov.b     #0x2c, w0
    339a:	01 00 01    	call      w1
        hex2str_alt(temp.b[1], str);
    339c:	1e 50 90    	mov.b     [w14+17], w0
    339e:	00 80 fb    	ze        w0, w0
    33a0:	ea 00 47    	add.w     w14, #0xa, w1
    33a2:	7b f2 07    	rcall     0x189a <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    33a4:	11 42 80    	mov.w     0x842, w1
    33a6:	6a 00 47    	add.w     w14, #0xa, w0
    33a8:	01 00 01    	call      w1
        val1 += 4;
    33aa:	1e 00 90    	mov.w     [w14+2], w0
    33ac:	64 00 40    	add.w     w0, #0x4, w0
    33ae:	10 07 98    	mov.w     w0, [w14+2]
        if (val1 < val3)
    33b0:	9e 00 90    	mov.w     [w14+2], w1
    33b2:	3e 00 90    	mov.w     [w14+6], w0
    33b4:	80 8f 50    	sub.w     w1, w0, [w15]
    33b6:	04 00 31    	bra       C, 0x33c0 <.L362>
            parser_putc(',');
    33b8:	01 42 80    	mov.w     0x840, w1
    33ba:	c0 c2 b3    	mov.b     #0x2c, w0
    33bc:	01 00 01    	call      w1
    33be:	03 00 37    	bra       0x33c6 <.L363>

000033c0 <.L362>:
        else
            parser_puts("\r\n");
    33c0:	11 42 80    	mov.w     0x842, w1
    33c2:	c0 63 29    	mov.w     #0x963c, w0
    33c4:	01 00 01    	call      w1

000033c6 <.L363>:
    33c6:	2e 00 90    	mov.w     [w14+4], w0
    33c8:	00 80 e8    	inc2.w    w0, w0
    33ca:	20 07 98    	mov.w     w0, [w14+4]

000033cc <.L361>:
    33cc:	9e 00 90    	mov.w     [w14+2], w1
    33ce:	3e 00 90    	mov.w     [w14+6], w0
    33d0:	80 8f 50    	sub.w     w1, w0, [w15]
    33d2:	c0 ff 39    	bra       NC, 0x3354 <.L364>
    }
    __asm__("pop _TBLPAG");
    33d4:	54 00 f9    	pop       0x54
    33d6:	05 00 37    	bra       0x33e2 <.L356>

000033d8 <.L365>:
    33d8:	00 00 00    	nop       
    33da:	03 00 37    	bra       0x33e2 <.L356>

000033dc <.L366>:
    33dc:	00 00 00    	nop       
    33de:	01 00 37    	bra       0x33e2 <.L356>

000033e0 <.L367>:
    33e0:	00 00 00    	nop       

000033e2 <.L356>:
}
    33e2:	00 80 fa    	ulnk      
    33e4:	00 00 06    	return    

000033e6 <_flash_write_handler>:

void flash_write_handler(char *args) {
    33e6:	0e 00 fa    	lnk       #0xe
    33e8:	60 07 98    	mov.w     w0, [w14+12]
    uint16_t val1, val2, i;
    char *arg, *remainder;
    WORD temp;

    remainder = (char *)NULL;
    33ea:	00 00 eb    	clr.w     w0
    33ec:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    33ee:	68 00 47    	add.w     w14, #0x8, w0
    33f0:	00 01 78    	mov.w     w0, w2
    33f2:	f1 63 29    	mov.w     #0x963f, w1
    33f4:	6e 00 90    	mov.w     [w14+12], w0
    33f6:	e1 f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    33f8:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val1) != 0)
    33fa:	64 00 47    	add.w     w14, #0x4, w0
    33fc:	80 00 78    	mov.w     w0, w1
    33fe:	1e 00 90    	mov.w     [w14+2], w0
    3400:	87 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3402:	00 00 e0    	cp0.w     w0
    3404:	98 00 3a    	bra       NZ, 0x3536 <.L389>
        return;

    arg = str_tok_r((char *)NULL, ", ", &remainder);
    3406:	68 00 47    	add.w     w14, #0x8, w0
    3408:	00 01 78    	mov.w     w0, w2
    340a:	f1 63 29    	mov.w     #0x963f, w1
    340c:	00 00 eb    	clr.w     w0
    340e:	d5 f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3410:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val2) != 0)
    3412:	66 00 47    	add.w     w14, #0x6, w0
    3414:	80 00 78    	mov.w     w0, w1
    3416:	1e 00 90    	mov.w     [w14+2], w0
    3418:	7b f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    341a:	00 00 e0    	cp0.w     w0
    341c:	8e 00 3a    	bra       NZ, 0x353a <.L390>
        return;

    NVMCON = 0x4001;                // set up NVMCON to program a row of program memory
    341e:	10 00 24    	mov.w     #0x4001, w0
    3420:	00 3b 88    	mov.w     w0, 0x760
    __asm__("push _TBLPAG");        // save the value of TBLPAG
    3422:	54 00 f8    	push      0x54
    TBLPAG = val1;
    3424:	2e 00 90    	mov.w     [w14+4], w0
    3426:	a0 02 88    	mov.w     w0, 0x54
    val1 = val2 & 0xFFF8;
    3428:	be 00 90    	mov.w     [w14+6], w1
    342a:	80 ff 2f    	mov.w     #0xfff8, w0
    342c:	00 80 60    	and.w     w1, w0, w0
    342e:	20 07 98    	mov.w     w0, [w14+4]
    for (i = 0; i < 128; i += 2) {
    3430:	00 00 eb    	clr.w     w0
    3432:	00 0f 78    	mov.w     w0, [w14]
    3434:	0a 00 37    	bra       0x344a <.L372>

00003436 <.L373>:
        __builtin_tblwtl(val1 + i, 0xFFFF);
    3436:	2e 00 90    	mov.w     [w14+4], w0
    3438:	1e 00 40    	add.w     w0, [w14], w0
    343a:	80 80 eb    	setm.w    w1
    343c:	01 08 bb    	tblwtl.w  w1, [w0]
        __builtin_tblwth(val1 + i + 1, 0x00FF);
    343e:	2e 00 90    	mov.w     [w14+4], w0
    3440:	1e 00 40    	add.w     w0, [w14], w0
    3442:	00 00 e8    	inc.w     w0, w0
    3444:	f1 0f 20    	mov.w     #0xff, w1
    3446:	01 88 bb    	tblwth.w  w1, [w0]
    3448:	1e 8f e8    	inc2.w    [w14], [w14]

0000344a <.L372>:
    344a:	f0 07 20    	mov.w     #0x7f, w0
    344c:	9e 00 78    	mov.w     [w14], w1
    344e:	80 8f 50    	sub.w     w1, w0, [w15]
    3450:	f2 ff 36    	bra       LEU, 0x3436 <.L373>

00003452 <.L387>:
    }

    for (;; val2 += 2) {
        arg = str_tok_r((char *)NULL, ", ", &remainder);
    3452:	68 00 47    	add.w     w14, #0x8, w0
    3454:	00 01 78    	mov.w     w0, w2
    3456:	f1 63 29    	mov.w     #0x963f, w1
    3458:	00 00 eb    	clr.w     w0
    345a:	af f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    345c:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    345e:	1e 00 90    	mov.w     [w14+2], w0
    3460:	00 00 e0    	cp0.w     w0
    3462:	51 00 32    	bra       Z, 0x3506 <.L391>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    3464:	64 00 47    	add.w     w14, #0x4, w0
    3466:	80 00 78    	mov.w     w0, w1
    3468:	1e 00 90    	mov.w     [w14+2], w0
    346a:	52 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    346c:	00 00 e0    	cp0.w     w0
    346e:	03 00 3a    	bra       NZ, 0x3476 <.L376>
    3470:	2e 00 90    	mov.w     [w14+4], w0
    3472:	00 40 78    	mov.b     w0, w0
    3474:	01 00 37    	bra       0x3478 <.L377>

00003476 <.L376>:
    3476:	00 c0 eb    	setm.b    w0

00003478 <.L377>:
    3478:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    347a:	68 00 47    	add.w     w14, #0x8, w0
    347c:	00 01 78    	mov.w     w0, w2
    347e:	f1 63 29    	mov.w     #0x963f, w1
    3480:	00 00 eb    	clr.w     w0
    3482:	9b f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3484:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    3486:	1e 00 90    	mov.w     [w14+2], w0
    3488:	00 00 e0    	cp0.w     w0
    348a:	3f 00 32    	bra       Z, 0x350a <.L392>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    348c:	64 00 47    	add.w     w14, #0x4, w0
    348e:	80 00 78    	mov.w     w0, w1
    3490:	1e 00 90    	mov.w     [w14+2], w0
    3492:	3e f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3494:	00 00 e0    	cp0.w     w0
    3496:	03 00 3a    	bra       NZ, 0x349e <.L379>
    3498:	2e 00 90    	mov.w     [w14+4], w0
    349a:	00 40 78    	mov.b     w0, w0
    349c:	01 00 37    	bra       0x34a0 <.L380>

0000349e <.L379>:
    349e:	00 c0 eb    	setm.b    w0

000034a0 <.L380>:
    34a0:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwtl(val2, temp.w);
    34a2:	de 00 90    	mov.w     [w14+10], w1
    34a4:	3e 00 90    	mov.w     [w14+6], w0
    34a6:	01 08 bb    	tblwtl.w  w1, [w0]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    34a8:	68 00 47    	add.w     w14, #0x8, w0
    34aa:	00 01 78    	mov.w     w0, w2
    34ac:	f1 63 29    	mov.w     #0x963f, w1
    34ae:	00 00 eb    	clr.w     w0
    34b0:	84 f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    34b2:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    34b4:	1e 00 90    	mov.w     [w14+2], w0
    34b6:	00 00 e0    	cp0.w     w0
    34b8:	2a 00 32    	bra       Z, 0x350e <.L393>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    34ba:	64 00 47    	add.w     w14, #0x4, w0
    34bc:	80 00 78    	mov.w     w0, w1
    34be:	1e 00 90    	mov.w     [w14+2], w0
    34c0:	27 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    34c2:	00 00 e0    	cp0.w     w0
    34c4:	03 00 3a    	bra       NZ, 0x34cc <.L382>
    34c6:	2e 00 90    	mov.w     [w14+4], w0
    34c8:	00 40 78    	mov.b     w0, w0
    34ca:	01 00 37    	bra       0x34ce <.L383>

000034cc <.L382>:
    34cc:	00 c0 eb    	setm.b    w0

000034ce <.L383>:
    34ce:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    34d0:	68 00 47    	add.w     w14, #0x8, w0
    34d2:	00 01 78    	mov.w     w0, w2
    34d4:	f1 63 29    	mov.w     #0x963f, w1
    34d6:	00 00 eb    	clr.w     w0
    34d8:	70 f2 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    34da:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    34dc:	1e 00 90    	mov.w     [w14+2], w0
    34de:	00 00 e0    	cp0.w     w0
    34e0:	18 00 32    	bra       Z, 0x3512 <.L394>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0x00;
    34e2:	64 00 47    	add.w     w14, #0x4, w0
    34e4:	80 00 78    	mov.w     w0, w1
    34e6:	1e 00 90    	mov.w     [w14+2], w0
    34e8:	13 f1 07    	rcall     0x1710 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    34ea:	00 00 e0    	cp0.w     w0
    34ec:	03 00 3a    	bra       NZ, 0x34f4 <.L385>
    34ee:	2e 00 90    	mov.w     [w14+4], w0
    34f0:	00 40 78    	mov.b     w0, w0
    34f2:	01 00 37    	bra       0x34f6 <.L386>

000034f4 <.L385>:
    34f4:	00 40 eb    	clr.b     w0

000034f6 <.L386>:
    34f6:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwth(val2, temp.w);
    34f8:	de 00 90    	mov.w     [w14+10], w1
    34fa:	3e 00 90    	mov.w     [w14+6], w0
    34fc:	01 88 bb    	tblwth.w  w1, [w0]
    34fe:	3e 00 90    	mov.w     [w14+6], w0
    3500:	00 80 e8    	inc2.w    w0, w0
    3502:	30 07 98    	mov.w     w0, [w14+6]
    }
    3504:	a6 ff 37    	bra       0x3452 <.L387>

00003506 <.L391>:
    3506:	00 00 00    	nop       
    3508:	05 00 37    	bra       0x3514 <.L375>

0000350a <.L392>:
    350a:	00 00 00    	nop       
    350c:	03 00 37    	bra       0x3514 <.L375>

0000350e <.L393>:
    350e:	00 00 00    	nop       
    3510:	01 00 37    	bra       0x3514 <.L375>

00003512 <.L394>:
    3512:	00 00 00    	nop       

00003514 <.L375>:

    __asm__("disi #16");            // disable interrupts for 16 cycles
    3514:	10 00 fc    	disi      #0x10
    __builtin_write_NVM();          // issue the unlock sequence and perform the write
    3516:	50 05 20    	mov.w     #0x55, w0
    3518:	30 3b 88    	mov.w     w0, 0x766
    351a:	a0 0a 20    	mov.w     #0xaa, w0
    351c:	30 3b 88    	mov.w     w0, 0x766
    351e:	61 e7 a8    	bset.b    0x761, #0x7
	...

00003526 <.L388>:
    while (NVMCONbits.WR == 1) {}   // wait until the write is done
    3526:	01 3b 80    	mov.w     0x760, w1
    3528:	00 00 28    	mov.w     #0x8000, w0
    352a:	00 80 60    	and.w     w1, w0, w0
    352c:	00 00 e0    	cp0.w     w0
    352e:	fb ff 3a    	bra       NZ, 0x3526 <.L388>
    NVMCONbits.WREN = 0;            // disable further writes to program memory
    3530:	61 c7 a9    	bclr.b    0x761, #0x6
    __asm__("pop _TBLPAG");         // restore original value to TBLPAG
    3532:	54 00 f9    	pop       0x54
    3534:	03 00 37    	bra       0x353c <.L368>

00003536 <.L389>:
    3536:	00 00 00    	nop       
    3538:	01 00 37    	bra       0x353c <.L368>

0000353a <.L390>:
    353a:	00 00 00    	nop       

0000353c <.L368>:
}
    353c:	00 80 fa    	ulnk      
    353e:	00 00 06    	return    

00003540 <_init_parser>:

// Parser public methods
void init_parser(void) {
    3540:	00 00 fa    	lnk       #0x0
    cdc_cmd_buffer_pos = cdc_cmd_buffer;
    3542:	40 4a 21    	mov.w     #0x14a4, w0
    3544:	20 42 88    	mov.w     w0, 0x844
    cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3546:	00 08 20    	mov.w     #0x80, w0
    3548:	40 42 88    	mov.w     w0, 0x848

    ble_cmd_buffer_pos = ble_cmd_buffer;
    354a:	40 52 21    	mov.w     #0x1524, w0
    354c:	30 42 88    	mov.w     w0, 0x846
    ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    354e:	00 08 20    	mov.w     #0x80, w0
    3550:	50 42 88    	mov.w     w0, 0x84a

    parser_state = parser_disconnected;
    3552:	60 56 23    	mov.w     #0x3566, w0
    3554:	d0 41 88    	mov.w     w0, 0x83a
    parser_last_state = (STATE_HANDLER_T)NULL;
    3556:	3c 28 ef    	clr.w     0x83c
    parser_task = (STATE_HANDLER_T)NULL;
    3558:	3e 28 ef    	clr.w     0x83e

    parser_putc = cdc_putc;
    355a:	00 7f 25    	mov.w     #0x57f0, w0
    355c:	00 42 88    	mov.w     w0, 0x840
    parser_puts = cdc_puts;
    355e:	e0 85 25    	mov.w     #0x585e, w0
    3560:	10 42 88    	mov.w     w0, 0x842
}
    3562:	00 80 fa    	ulnk      
    3564:	00 00 06    	return    

00003566 <_parser_disconnected>:

void parser_disconnected(void) {
    3566:	08 00 fa    	lnk       #0x8
    uint8_t ch;
    uint16_t i;
    char *command, *remainder;

    if (parser_state != parser_last_state) {
    3568:	d1 41 80    	mov.w     0x83a, w1
    356a:	e0 41 80    	mov.w     0x83c, w0
    356c:	80 8f 50    	sub.w     w1, w0, [w15]
    356e:	06 00 32    	bra       Z, 0x357c <.L397>
        parser_last_state = parser_state;
    3570:	d0 41 80    	mov.w     0x83a, w0
    3572:	e0 41 88    	mov.w     w0, 0x83c

        ble_cmd_buffer_pos = ble_cmd_buffer;
    3574:	40 52 21    	mov.w     #0x1524, w0
    3576:	30 42 88    	mov.w     w0, 0x846
        ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3578:	00 08 20    	mov.w     #0x80, w0
    357a:	50 42 88    	mov.w     w0, 0x84a

0000357c <.L397>:
    }

    if (parser_task)
    357c:	f0 41 80    	mov.w     0x83e, w0
    357e:	00 00 e0    	cp0.w     w0
    3580:	02 00 32    	bra       Z, 0x3586 <.L398>
        parser_task();
    3582:	f0 41 80    	mov.w     0x83e, w0
    3584:	00 00 01    	call      w0

00003586 <.L398>:

    if (ble_in_waiting() > 0) {
    3586:	9d 06 07    	rcall     0x42c2 <_ble_in_waiting> <.LFB20> <.LFE19>
    3588:	00 00 e0    	cp0.w     w0
    358a:	48 00 32    	bra       Z, 0x361c <.L399>
        ch = ble_getc();
    358c:	a5 06 07    	rcall     0x42d8 <_ble_getc> <.LFB22> <.LFE21>
    358e:	20 47 98    	mov.b     w0, [w14+2]
        if (ble_cmd_buffer_left == 1) {
    3590:	50 42 80    	mov.w     0x84a, w0
    3592:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3594:	0d 00 3a    	bra       NZ, 0x35b0 <.L400>
            ble_cmd_buffer_pos = ble_cmd_buffer;
    3596:	40 52 21    	mov.w     #0x1524, w0
    3598:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    359a:	00 08 20    	mov.w     #0x80, w0
    359c:	50 42 88    	mov.w     w0, 0x84a

            *ble_cmd_buffer_pos++ = ch;
    359e:	30 42 80    	mov.w     0x846, w0
    35a0:	ae 40 90    	mov.b     [w14+2], w1
    35a2:	01 48 78    	mov.b     w1, [w0]
    35a4:	00 00 e8    	inc.w     w0, w0
    35a6:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left--;
    35a8:	50 42 80    	mov.w     0x84a, w0
    35aa:	00 00 e9    	dec.w     w0, w0
    35ac:	50 42 88    	mov.w     w0, 0x84a
    35ae:	36 00 37    	bra       0x361c <.L399>

000035b0 <.L400>:
        } else if (ch == '%') {
    35b0:	ae 40 90    	mov.b     [w14+2], w1
    35b2:	50 c2 b3    	mov.b     #0x25, w0
    35b4:	80 cf 50    	sub.b     w1, w0, [w15]
    35b6:	2a 00 3a    	bra       NZ, 0x360c <.L401>
            if ((ble_cmd_buffer[0] == '%') && (ble_cmd_buffer_left < CMD_BUFFER_LENGTH)) {
    35b8:	40 52 21    	mov.w     #0x1524, w0
    35ba:	90 40 78    	mov.b     [w0], w1
    35bc:	50 c2 b3    	mov.b     #0x25, w0
    35be:	80 cf 50    	sub.b     w1, w0, [w15]
    35c0:	18 00 3a    	bra       NZ, 0x35f2 <.L402>
    35c2:	51 42 80    	mov.w     0x84a, w1
    35c4:	f0 07 20    	mov.w     #0x7f, w0
    35c6:	80 8f 50    	sub.w     w1, w0, [w15]
    35c8:	14 00 3e    	bra       GTU, 0x35f2 <.L402>
                *ble_cmd_buffer_pos++ = ch;
    35ca:	30 42 80    	mov.w     0x846, w0
    35cc:	ae 40 90    	mov.b     [w14+2], w1
    35ce:	01 48 78    	mov.b     w1, [w0]
    35d0:	00 00 e8    	inc.w     w0, w0
    35d2:	30 42 88    	mov.w     w0, 0x846
                *ble_cmd_buffer_pos = '\0';
    35d4:	30 42 80    	mov.w     0x846, w0
    35d6:	80 40 eb    	clr.b     w1
    35d8:	01 48 78    	mov.b     w1, [w0]

                if (str_cmp(ble_cmd_buffer, "%STREAM_OPEN%") == 0)
    35da:	21 64 29    	mov.w     #0x9642, w1
    35dc:	40 52 21    	mov.w     #0x1524, w0
    35de:	92 f1 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    35e0:	00 00 e0    	cp0.w     w0
    35e2:	02 00 3a    	bra       NZ, 0x35e8 <.L403>
                    parser_state = parser_connected;
    35e4:	c0 6c 23    	mov.w     #0x36cc, w0
    35e6:	d0 41 88    	mov.w     w0, 0x83a

000035e8 <.L403>:

                ble_cmd_buffer_pos = ble_cmd_buffer;
    35e8:	40 52 21    	mov.w     #0x1524, w0
    35ea:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    35ec:	00 08 20    	mov.w     #0x80, w0
    35ee:	50 42 88    	mov.w     w0, 0x84a
    35f0:	15 00 37    	bra       0x361c <.L399>

000035f2 <.L402>:
            } else {
                ble_cmd_buffer_pos = ble_cmd_buffer;
    35f2:	40 52 21    	mov.w     #0x1524, w0
    35f4:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    35f6:	00 08 20    	mov.w     #0x80, w0
    35f8:	50 42 88    	mov.w     w0, 0x84a

                *ble_cmd_buffer_pos++ = ch;
    35fa:	30 42 80    	mov.w     0x846, w0
    35fc:	ae 40 90    	mov.b     [w14+2], w1
    35fe:	01 48 78    	mov.b     w1, [w0]
    3600:	00 00 e8    	inc.w     w0, w0
    3602:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left--;
    3604:	50 42 80    	mov.w     0x84a, w0
    3606:	00 00 e9    	dec.w     w0, w0
    3608:	50 42 88    	mov.w     w0, 0x84a
    360a:	08 00 37    	bra       0x361c <.L399>

0000360c <.L401>:
            }
        } else {
            *ble_cmd_buffer_pos++ = ch;
    360c:	30 42 80    	mov.w     0x846, w0
    360e:	ae 40 90    	mov.b     [w14+2], w1
    3610:	01 48 78    	mov.b     w1, [w0]
    3612:	00 00 e8    	inc.w     w0, w0
    3614:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left--;
    3616:	50 42 80    	mov.w     0x84a, w0
    3618:	00 00 e9    	dec.w     w0, w0
    361a:	50 42 88    	mov.w     w0, 0x84a

0000361c <.L399>:
        }
    }

    if (cdc_in_waiting() > 0) {
    361c:	df 10 07    	rcall     0x57dc <_cdc_in_waiting> <.LFB5> <.LFE4>
    361e:	00 00 e0    	cp0.w     w0
    3620:	4e 00 32    	bra       Z, 0x36be <.L405>
        ch = cdc_getc();
    3622:	02 11 07    	rcall     0x5828 <_cdc_getc> <.LFB8> <.LFE7>
    3624:	20 47 98    	mov.b     w0, [w14+2]
        if (cdc_cmd_buffer_left == 1) {
    3626:	40 42 80    	mov.w     0x848, w0
    3628:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    362a:	0d 00 3a    	bra       NZ, 0x3646 <.L406>
            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    362c:	40 4a 21    	mov.w     #0x14a4, w0
    362e:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3630:	00 08 20    	mov.w     #0x80, w0
    3632:	40 42 88    	mov.w     w0, 0x848

            *cdc_cmd_buffer_pos++ = ch;
    3634:	20 42 80    	mov.w     0x844, w0
    3636:	ae 40 90    	mov.b     [w14+2], w1
    3638:	01 48 78    	mov.b     w1, [w0]
    363a:	00 00 e8    	inc.w     w0, w0
    363c:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left--;
    363e:	40 42 80    	mov.w     0x848, w0
    3640:	00 00 e9    	dec.w     w0, w0
    3642:	40 42 88    	mov.w     w0, 0x848
    3644:	3c 00 37    	bra       0x36be <.L405>

00003646 <.L406>:
        } else if (ch == '\r') {
    3646:	2e 40 90    	mov.b     [w14+2], w0
    3648:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    364a:	31 00 3a    	bra       NZ, 0x36ae <.L407>
            *cdc_cmd_buffer_pos = '\0';
    364c:	20 42 80    	mov.w     0x844, w0
    364e:	80 40 eb    	clr.b     w1
    3650:	01 48 78    	mov.b     w1, [w0]

//            cdc_putc('[');
//            cdc_puts(cdc_cmd_buffer);
//            cdc_puts("]\r\n");

            parser_putc = cdc_putc;
    3652:	00 7f 25    	mov.w     #0x57f0, w0
    3654:	00 42 88    	mov.w     w0, 0x840
            parser_puts = cdc_puts;
    3656:	e0 85 25    	mov.w     #0x585e, w0
    3658:	10 42 88    	mov.w     w0, 0x842

            remainder = (char *)NULL;
    365a:	00 00 eb    	clr.w     w0
    365c:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(cdc_cmd_buffer, ":, ", &remainder);
    365e:	66 00 47    	add.w     w14, #0x6, w0
    3660:	00 01 78    	mov.w     w0, w2
    3662:	21 62 29    	mov.w     #0x9622, w1
    3664:	40 4a 21    	mov.w     #0x14a4, w0
    3666:	a9 f1 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3668:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    366a:	2e 00 90    	mov.w     [w14+4], w0
    366c:	00 00 e0    	cp0.w     w0
    366e:	1a 00 32    	bra       Z, 0x36a4 <.L408>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    3670:	00 00 eb    	clr.w     w0
    3672:	00 0f 78    	mov.w     w0, [w14]
    3674:	14 00 37    	bra       0x369e <.L409>

00003676 <.L411>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    3676:	1e 00 78    	mov.w     [w14], w0
    3678:	c2 00 dd    	sl.w      w0, #0x2, w1
    367a:	00 32 21    	mov.w     #0x1320, w0
    367c:	00 80 40    	add.w     w1, w0, w0
    367e:	10 00 78    	mov.w     [w0], w0
    3680:	80 00 78    	mov.w     w0, w1
    3682:	2e 00 90    	mov.w     [w14+4], w0
    3684:	3f f1 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    3686:	00 00 e0    	cp0.w     w0
    3688:	09 00 3a    	bra       NZ, 0x369c <.L410>
                        root_table[i].handler(remainder);
    368a:	1e 00 78    	mov.w     [w14], w0
    368c:	42 00 dd    	sl.w      w0, #0x2, w0
    368e:	80 80 e8    	inc2.w    w0, w1
    3690:	00 32 21    	mov.w     #0x1320, w0
    3692:	00 80 40    	add.w     w1, w0, w0
    3694:	90 00 78    	mov.w     [w0], w1
    3696:	3e 00 90    	mov.w     [w14+6], w0
    3698:	01 00 01    	call      w1
                        break;
    369a:	04 00 37    	bra       0x36a4 <.L408>

0000369c <.L410>:
    369c:	1e 0f e8    	inc.w     [w14], [w14]

0000369e <.L409>:
    369e:	1e 00 78    	mov.w     [w14], w0
    36a0:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    36a2:	e9 ff 36    	bra       LEU, 0x3676 <.L411>

000036a4 <.L408>:
                    }
                }
            }

            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    36a4:	40 4a 21    	mov.w     #0x14a4, w0
    36a6:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    36a8:	00 08 20    	mov.w     #0x80, w0
    36aa:	40 42 88    	mov.w     w0, 0x848
    36ac:	08 00 37    	bra       0x36be <.L405>

000036ae <.L407>:
        } else {
            *cdc_cmd_buffer_pos++ = ch;
    36ae:	20 42 80    	mov.w     0x844, w0
    36b0:	ae 40 90    	mov.b     [w14+2], w1
    36b2:	01 48 78    	mov.b     w1, [w0]
    36b4:	00 00 e8    	inc.w     w0, w0
    36b6:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left--;
    36b8:	40 42 80    	mov.w     0x848, w0
    36ba:	00 00 e9    	dec.w     w0, w0
    36bc:	40 42 88    	mov.w     w0, 0x848

000036be <.L405>:
        }
    }

    if (parser_state != parser_last_state) {
    36be:	d1 41 80    	mov.w     0x83a, w1
    36c0:	e0 41 80    	mov.w     0x83c, w0
    36c2:	80 8f 50    	sub.w     w1, w0, [w15]
    36c4:	01 00 32    	bra       Z, 0x36c8 <.L396>
        parser_task = (STATE_HANDLER_T)NULL;
    36c6:	3e 28 ef    	clr.w     0x83e

000036c8 <.L396>:
    }
}
    36c8:	00 80 fa    	ulnk      
    36ca:	00 00 06    	return    

000036cc <_parser_connected>:

void parser_connected(void) {
    36cc:	08 00 fa    	lnk       #0x8
    uint8_t ch;
    uint16_t i;
    char *command, *remainder;

    if (parser_state != parser_last_state) {
    36ce:	d1 41 80    	mov.w     0x83a, w1
    36d0:	e0 41 80    	mov.w     0x83c, w0
    36d2:	80 8f 50    	sub.w     w1, w0, [w15]
    36d4:	07 00 32    	bra       Z, 0x36e4 <.L414>
        parser_last_state = parser_state;
    36d6:	d0 41 80    	mov.w     0x83a, w0
    36d8:	e0 41 88    	mov.w     w0, 0x83c

        LED1 = 0;
    36da:	dc e2 a9    	bclr.b    0x2dc, #0x7

        ble_cmd_buffer_pos = ble_cmd_buffer;
    36dc:	40 52 21    	mov.w     #0x1524, w0
    36de:	30 42 88    	mov.w     w0, 0x846
        ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    36e0:	00 08 20    	mov.w     #0x80, w0
    36e2:	50 42 88    	mov.w     w0, 0x84a

000036e4 <.L414>:
    }

    if (parser_task)
    36e4:	f0 41 80    	mov.w     0x83e, w0
    36e6:	00 00 e0    	cp0.w     w0
    36e8:	02 00 32    	bra       Z, 0x36ee <.L415>
        parser_task();
    36ea:	f0 41 80    	mov.w     0x83e, w0
    36ec:	00 00 01    	call      w0

000036ee <.L415>:

    if (ble_in_waiting() > 0) {
    36ee:	e9 05 07    	rcall     0x42c2 <_ble_in_waiting> <.LFB20> <.LFE19>
    36f0:	00 00 e0    	cp0.w     w0
    36f2:	7c 00 32    	bra       Z, 0x37ec <.L416>
        ch = ble_getc();
    36f4:	f1 05 07    	rcall     0x42d8 <_ble_getc> <.LFB22> <.LFE21>
    36f6:	20 47 98    	mov.b     w0, [w14+2]
        if (ble_cmd_buffer_left == 1) {
    36f8:	50 42 80    	mov.w     0x84a, w0
    36fa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    36fc:	0d 00 3a    	bra       NZ, 0x3718 <.L417>
            ble_cmd_buffer_pos = ble_cmd_buffer;
    36fe:	40 52 21    	mov.w     #0x1524, w0
    3700:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3702:	00 08 20    	mov.w     #0x80, w0
    3704:	50 42 88    	mov.w     w0, 0x84a

            *ble_cmd_buffer_pos++ = ch;
    3706:	30 42 80    	mov.w     0x846, w0
    3708:	ae 40 90    	mov.b     [w14+2], w1
    370a:	01 48 78    	mov.b     w1, [w0]
    370c:	00 00 e8    	inc.w     w0, w0
    370e:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left--;
    3710:	50 42 80    	mov.w     0x84a, w0
    3712:	00 00 e9    	dec.w     w0, w0
    3714:	50 42 88    	mov.w     w0, 0x84a
    3716:	6a 00 37    	bra       0x37ec <.L416>

00003718 <.L417>:
        } else if (ch == '%') {
    3718:	ae 40 90    	mov.b     [w14+2], w1
    371a:	50 c2 b3    	mov.b     #0x25, w0
    371c:	80 cf 50    	sub.b     w1, w0, [w15]
    371e:	2a 00 3a    	bra       NZ, 0x3774 <.L418>
            if ((ble_cmd_buffer[0] == '%') && (ble_cmd_buffer_left < CMD_BUFFER_LENGTH)) {
    3720:	40 52 21    	mov.w     #0x1524, w0
    3722:	90 40 78    	mov.b     [w0], w1
    3724:	50 c2 b3    	mov.b     #0x25, w0
    3726:	80 cf 50    	sub.b     w1, w0, [w15]
    3728:	18 00 3a    	bra       NZ, 0x375a <.L419>
    372a:	51 42 80    	mov.w     0x84a, w1
    372c:	f0 07 20    	mov.w     #0x7f, w0
    372e:	80 8f 50    	sub.w     w1, w0, [w15]
    3730:	14 00 3e    	bra       GTU, 0x375a <.L419>
                *ble_cmd_buffer_pos++ = ch;
    3732:	30 42 80    	mov.w     0x846, w0
    3734:	ae 40 90    	mov.b     [w14+2], w1
    3736:	01 48 78    	mov.b     w1, [w0]
    3738:	00 00 e8    	inc.w     w0, w0
    373a:	30 42 88    	mov.w     w0, 0x846
                *ble_cmd_buffer_pos = '\0';
    373c:	30 42 80    	mov.w     0x846, w0
    373e:	80 40 eb    	clr.b     w1
    3740:	01 48 78    	mov.b     w1, [w0]

                if (str_cmp(ble_cmd_buffer, "%DISCONNECT%") == 0)
    3742:	01 65 29    	mov.w     #0x9650, w1
    3744:	40 52 21    	mov.w     #0x1524, w0
    3746:	de f0 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    3748:	00 00 e0    	cp0.w     w0
    374a:	02 00 3a    	bra       NZ, 0x3750 <.L420>
                    parser_state = parser_disconnected;
    374c:	60 56 23    	mov.w     #0x3566, w0
    374e:	d0 41 88    	mov.w     w0, 0x83a

00003750 <.L420>:

                ble_cmd_buffer_pos = ble_cmd_buffer;
    3750:	40 52 21    	mov.w     #0x1524, w0
    3752:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3754:	00 08 20    	mov.w     #0x80, w0
    3756:	50 42 88    	mov.w     w0, 0x84a
    3758:	49 00 37    	bra       0x37ec <.L416>

0000375a <.L419>:
            } else {
                ble_cmd_buffer_pos = ble_cmd_buffer;
    375a:	40 52 21    	mov.w     #0x1524, w0
    375c:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    375e:	00 08 20    	mov.w     #0x80, w0
    3760:	50 42 88    	mov.w     w0, 0x84a

                *ble_cmd_buffer_pos++ = ch;
    3762:	30 42 80    	mov.w     0x846, w0
    3764:	ae 40 90    	mov.b     [w14+2], w1
    3766:	01 48 78    	mov.b     w1, [w0]
    3768:	00 00 e8    	inc.w     w0, w0
    376a:	30 42 88    	mov.w     w0, 0x846
                ble_cmd_buffer_left--;
    376c:	50 42 80    	mov.w     0x84a, w0
    376e:	00 00 e9    	dec.w     w0, w0
    3770:	50 42 88    	mov.w     w0, 0x84a
    3772:	3c 00 37    	bra       0x37ec <.L416>

00003774 <.L418>:
            }
        } else if (ch == '\r') {
    3774:	2e 40 90    	mov.b     [w14+2], w0
    3776:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3778:	31 00 3a    	bra       NZ, 0x37dc <.L422>
            *ble_cmd_buffer_pos = '\0';
    377a:	30 42 80    	mov.w     0x846, w0
    377c:	80 40 eb    	clr.b     w1
    377e:	01 48 78    	mov.b     w1, [w0]

//            ble_putc('[');
//            ble_puts(ble_cmd_buffer);
//            ble_puts("]\n\r");

            parser_putc = ble_putc;
    3780:	a0 2c 24    	mov.w     #0x42ca, w0
    3782:	00 42 88    	mov.w     w0, 0x840
            parser_puts = ble_puts;
    3784:	00 2e 24    	mov.w     #0x42e0, w0
    3786:	10 42 88    	mov.w     w0, 0x842

            remainder = (char *)NULL;
    3788:	00 00 eb    	clr.w     w0
    378a:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(ble_cmd_buffer, ":, ", &remainder);
    378c:	66 00 47    	add.w     w14, #0x6, w0
    378e:	00 01 78    	mov.w     w0, w2
    3790:	21 62 29    	mov.w     #0x9622, w1
    3792:	40 52 21    	mov.w     #0x1524, w0
    3794:	12 f1 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3796:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    3798:	2e 00 90    	mov.w     [w14+4], w0
    379a:	00 00 e0    	cp0.w     w0
    379c:	1a 00 32    	bra       Z, 0x37d2 <.L423>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    379e:	00 00 eb    	clr.w     w0
    37a0:	00 0f 78    	mov.w     w0, [w14]
    37a2:	14 00 37    	bra       0x37cc <.L424>

000037a4 <.L426>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    37a4:	1e 00 78    	mov.w     [w14], w0
    37a6:	c2 00 dd    	sl.w      w0, #0x2, w1
    37a8:	00 32 21    	mov.w     #0x1320, w0
    37aa:	00 80 40    	add.w     w1, w0, w0
    37ac:	10 00 78    	mov.w     [w0], w0
    37ae:	80 00 78    	mov.w     w0, w1
    37b0:	2e 00 90    	mov.w     [w14+4], w0
    37b2:	a8 f0 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    37b4:	00 00 e0    	cp0.w     w0
    37b6:	09 00 3a    	bra       NZ, 0x37ca <.L425>
                        root_table[i].handler(remainder);
    37b8:	1e 00 78    	mov.w     [w14], w0
    37ba:	42 00 dd    	sl.w      w0, #0x2, w0
    37bc:	80 80 e8    	inc2.w    w0, w1
    37be:	00 32 21    	mov.w     #0x1320, w0
    37c0:	00 80 40    	add.w     w1, w0, w0
    37c2:	90 00 78    	mov.w     [w0], w1
    37c4:	3e 00 90    	mov.w     [w14+6], w0
    37c6:	01 00 01    	call      w1
                        break;
    37c8:	04 00 37    	bra       0x37d2 <.L423>

000037ca <.L425>:
    37ca:	1e 0f e8    	inc.w     [w14], [w14]

000037cc <.L424>:
    37cc:	1e 00 78    	mov.w     [w14], w0
    37ce:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    37d0:	e9 ff 36    	bra       LEU, 0x37a4 <.L426>

000037d2 <.L423>:
                    }
                }
            }

            ble_cmd_buffer_pos = ble_cmd_buffer;
    37d2:	40 52 21    	mov.w     #0x1524, w0
    37d4:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    37d6:	00 08 20    	mov.w     #0x80, w0
    37d8:	50 42 88    	mov.w     w0, 0x84a
    37da:	08 00 37    	bra       0x37ec <.L416>

000037dc <.L422>:
        } else {
            *ble_cmd_buffer_pos++ = ch;
    37dc:	30 42 80    	mov.w     0x846, w0
    37de:	ae 40 90    	mov.b     [w14+2], w1
    37e0:	01 48 78    	mov.b     w1, [w0]
    37e2:	00 00 e8    	inc.w     w0, w0
    37e4:	30 42 88    	mov.w     w0, 0x846
            ble_cmd_buffer_left--;
    37e6:	50 42 80    	mov.w     0x84a, w0
    37e8:	00 00 e9    	dec.w     w0, w0
    37ea:	50 42 88    	mov.w     w0, 0x84a

000037ec <.L416>:
        }
    }

    if (cdc_in_waiting() > 0) {
    37ec:	f7 0f 07    	rcall     0x57dc <_cdc_in_waiting> <.LFB5> <.LFE4>
    37ee:	00 00 e0    	cp0.w     w0
    37f0:	4e 00 32    	bra       Z, 0x388e <.L427>
        ch = cdc_getc();
    37f2:	1a 10 07    	rcall     0x5828 <_cdc_getc> <.LFB8> <.LFE7>
    37f4:	20 47 98    	mov.b     w0, [w14+2]
        if (cdc_cmd_buffer_left == 1) {
    37f6:	40 42 80    	mov.w     0x848, w0
    37f8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    37fa:	0d 00 3a    	bra       NZ, 0x3816 <.L428>
            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    37fc:	40 4a 21    	mov.w     #0x14a4, w0
    37fe:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3800:	00 08 20    	mov.w     #0x80, w0
    3802:	40 42 88    	mov.w     w0, 0x848

            *cdc_cmd_buffer_pos++ = ch;
    3804:	20 42 80    	mov.w     0x844, w0
    3806:	ae 40 90    	mov.b     [w14+2], w1
    3808:	01 48 78    	mov.b     w1, [w0]
    380a:	00 00 e8    	inc.w     w0, w0
    380c:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left--;
    380e:	40 42 80    	mov.w     0x848, w0
    3810:	00 00 e9    	dec.w     w0, w0
    3812:	40 42 88    	mov.w     w0, 0x848
    3814:	3c 00 37    	bra       0x388e <.L427>

00003816 <.L428>:
        } else if (ch == '\r') {
    3816:	2e 40 90    	mov.b     [w14+2], w0
    3818:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    381a:	31 00 3a    	bra       NZ, 0x387e <.L429>
            *cdc_cmd_buffer_pos = '\0';
    381c:	20 42 80    	mov.w     0x844, w0
    381e:	80 40 eb    	clr.b     w1
    3820:	01 48 78    	mov.b     w1, [w0]

//            cdc_putc('[');
//            cdc_puts(cdc_cmd_buffer);
//            cdc_puts("]\r\n");

            parser_putc = cdc_putc;
    3822:	00 7f 25    	mov.w     #0x57f0, w0
    3824:	00 42 88    	mov.w     w0, 0x840
            parser_puts = cdc_puts;
    3826:	e0 85 25    	mov.w     #0x585e, w0
    3828:	10 42 88    	mov.w     w0, 0x842

            remainder = (char *)NULL;
    382a:	00 00 eb    	clr.w     w0
    382c:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(cdc_cmd_buffer, ":, ", &remainder);
    382e:	66 00 47    	add.w     w14, #0x6, w0
    3830:	00 01 78    	mov.w     w0, w2
    3832:	21 62 29    	mov.w     #0x9622, w1
    3834:	40 4a 21    	mov.w     #0x14a4, w0
    3836:	c1 f0 07    	rcall     0x19ba <_str_tok_r> <.LFB6> <.LFE5>
    3838:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    383a:	2e 00 90    	mov.w     [w14+4], w0
    383c:	00 00 e0    	cp0.w     w0
    383e:	1a 00 32    	bra       Z, 0x3874 <.L430>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    3840:	00 00 eb    	clr.w     w0
    3842:	00 0f 78    	mov.w     w0, [w14]
    3844:	14 00 37    	bra       0x386e <.L431>

00003846 <.L433>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    3846:	1e 00 78    	mov.w     [w14], w0
    3848:	c2 00 dd    	sl.w      w0, #0x2, w1
    384a:	00 32 21    	mov.w     #0x1320, w0
    384c:	00 80 40    	add.w     w1, w0, w0
    384e:	10 00 78    	mov.w     [w0], w0
    3850:	80 00 78    	mov.w     w0, w1
    3852:	2e 00 90    	mov.w     [w14+4], w0
    3854:	57 f0 07    	rcall     0x1904 <_str_cmp> <.LFB4> <.LFE3>
    3856:	00 00 e0    	cp0.w     w0
    3858:	09 00 3a    	bra       NZ, 0x386c <.L432>
                        root_table[i].handler(remainder);
    385a:	1e 00 78    	mov.w     [w14], w0
    385c:	42 00 dd    	sl.w      w0, #0x2, w0
    385e:	80 80 e8    	inc2.w    w0, w1
    3860:	00 32 21    	mov.w     #0x1320, w0
    3862:	00 80 40    	add.w     w1, w0, w0
    3864:	90 00 78    	mov.w     [w0], w1
    3866:	3e 00 90    	mov.w     [w14+6], w0
    3868:	01 00 01    	call      w1
                        break;
    386a:	04 00 37    	bra       0x3874 <.L430>

0000386c <.L432>:
    386c:	1e 0f e8    	inc.w     [w14], [w14]

0000386e <.L431>:
    386e:	1e 00 78    	mov.w     [w14], w0
    3870:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    3872:	e9 ff 36    	bra       LEU, 0x3846 <.L433>

00003874 <.L430>:
                    }
                }
            }

            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    3874:	40 4a 21    	mov.w     #0x14a4, w0
    3876:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3878:	00 08 20    	mov.w     #0x80, w0
    387a:	40 42 88    	mov.w     w0, 0x848
    387c:	08 00 37    	bra       0x388e <.L427>

0000387e <.L429>:
        } else {
            *cdc_cmd_buffer_pos++ = ch;
    387e:	20 42 80    	mov.w     0x844, w0
    3880:	ae 40 90    	mov.b     [w14+2], w1
    3882:	01 48 78    	mov.b     w1, [w0]
    3884:	00 00 e8    	inc.w     w0, w0
    3886:	20 42 88    	mov.w     w0, 0x844
            cdc_cmd_buffer_left--;
    3888:	40 42 80    	mov.w     0x848, w0
    388a:	00 00 e9    	dec.w     w0, w0
    388c:	40 42 88    	mov.w     w0, 0x848

0000388e <.L427>:
        }
    }

    if (parser_state != parser_last_state) {
    388e:	d1 41 80    	mov.w     0x83a, w1
    3890:	e0 41 80    	mov.w     0x83c, w0
    3892:	80 8f 50    	sub.w     w1, w0, [w15]
    3894:	02 00 32    	bra       Z, 0x389a <.L413>
        parser_task = (STATE_HANDLER_T)NULL;
    3896:	3e 28 ef    	clr.w     0x83e
        LED1 = 1;
    3898:	dc e2 a8    	bset.b    0x2dc, #0x7

0000389a <.L413>:
    }
}
    389a:	00 80 fa    	ulnk      
    389c:	00 00 06    	return    

0000389e <_parser_forwarding>:

void parser_forwarding(void) {
    389e:	04 00 fa    	lnk       #0x4
    uint8_t ch;
    uint16_t i;

    if (parser_state != parser_last_state) {
    38a0:	d1 41 80    	mov.w     0x83a, w1
    38a2:	e0 41 80    	mov.w     0x83c, w0
    38a4:	80 8f 50    	sub.w     w1, w0, [w15]
    38a6:	04 00 32    	bra       Z, 0x38b0 <.L436>
        parser_last_state = parser_state;
    38a8:	d0 41 80    	mov.w     0x83a, w0
    38aa:	e0 41 88    	mov.w     w0, 0x83c
        end_fwd_char_count = 0;
    38ac:	4c 28 ef    	clr.w     0x84c
        LED2 = 0;
    38ae:	ec 02 a9    	bclr.b    0x2ec, #0x0

000038b0 <.L436>:
    }

    if (parser_task)
    38b0:	f0 41 80    	mov.w     0x83e, w0
    38b2:	00 00 e0    	cp0.w     w0
    38b4:	02 00 32    	bra       Z, 0x38ba <.L437>
        parser_task();
    38b6:	f0 41 80    	mov.w     0x83e, w0
    38b8:	00 00 01    	call      w0

000038ba <.L437>:

    if (cdc_in_waiting() > 0) {
    38ba:	90 0f 07    	rcall     0x57dc <_cdc_in_waiting> <.LFB5> <.LFE4>
    38bc:	00 00 e0    	cp0.w     w0
    38be:	28 00 32    	bra       Z, 0x3910 <.L438>
        ch = cdc_getc();
    38c0:	b3 0f 07    	rcall     0x5828 <_cdc_getc> <.LFB8> <.LFE7>
    38c2:	20 47 98    	mov.b     w0, [w14+2]
        if (ch == END_FWD_CHAR) {
    38c4:	ae 40 90    	mov.b     [w14+2], w1
    38c6:	00 c6 b3    	mov.b     #0x60, w0
    38c8:	80 cf 50    	sub.b     w1, w0, [w15]
    38ca:	09 00 3a    	bra       NZ, 0x38de <.L439>
            end_fwd_char_count++;
    38cc:	60 42 80    	mov.w     0x84c, w0
    38ce:	00 00 e8    	inc.w     w0, w0
    38d0:	60 42 88    	mov.w     w0, 0x84c
            if (end_fwd_char_count == 3) {
    38d2:	60 42 80    	mov.w     0x84c, w0
    38d4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    38d6:	1c 00 3a    	bra       NZ, 0x3910 <.L438>
                parser_state = parser_disconnected;
    38d8:	60 56 23    	mov.w     #0x3566, w0
    38da:	d0 41 88    	mov.w     w0, 0x83a
    38dc:	19 00 37    	bra       0x3910 <.L438>

000038de <.L439>:
            }
        } else if ((ch != END_FWD_CHAR) && (end_fwd_char_count > 0)) {
    38de:	ae 40 90    	mov.b     [w14+2], w1
    38e0:	00 c6 b3    	mov.b     #0x60, w0
    38e2:	80 cf 50    	sub.b     w1, w0, [w15]
    38e4:	12 00 32    	bra       Z, 0x390a <.L440>
    38e6:	60 42 80    	mov.w     0x84c, w0
    38e8:	00 00 e0    	cp0.w     w0
    38ea:	0f 00 32    	bra       Z, 0x390a <.L440>
            for (i = 0; i < end_fwd_char_count; i++)
    38ec:	00 00 eb    	clr.w     w0
    38ee:	00 0f 78    	mov.w     w0, [w14]
    38f0:	03 00 37    	bra       0x38f8 <.L441>

000038f2 <.L442>:
                U1putc(END_FWD_CHAR);
    38f2:	00 c6 b3    	mov.b     #0x60, w0
    38f4:	19 05 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    38f6:	1e 0f e8    	inc.w     [w14], [w14]

000038f8 <.L441>:
    38f8:	60 42 80    	mov.w     0x84c, w0
    38fa:	9e 00 78    	mov.w     [w14], w1
    38fc:	80 8f 50    	sub.w     w1, w0, [w15]
    38fe:	f9 ff 39    	bra       NC, 0x38f2 <.L442>
            U1putc(ch);
    3900:	2e 40 90    	mov.b     [w14+2], w0
    3902:	12 05 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
            U1flushTxBuffer();
    3904:	08 05 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
            end_fwd_char_count = 0;
    3906:	4c 28 ef    	clr.w     0x84c
    3908:	03 00 37    	bra       0x3910 <.L438>

0000390a <.L440>:
        } else {
            U1putc(ch);
    390a:	2e 40 90    	mov.b     [w14+2], w0
    390c:	0d 05 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
            U1flushTxBuffer();
    390e:	03 05 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>

00003910 <.L438>:
        }
    }

    if (U1inWaiting() > 0) {
    3910:	fe 04 07    	rcall     0x430e <_U1inWaiting> <.LFB30> <.LFE27>
    3912:	00 00 e0    	cp0.w     w0
    3914:	02 00 32    	bra       Z, 0x391a <.L443>
        cdc_putc(U1getc());
    3916:	28 05 07    	rcall     0x4368 <_U1getc> <.LFB33> <.LFE32>
    3918:	6b 0f 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>

0000391a <.L443>:
    }

    if (parser_state != parser_last_state) {
    391a:	d1 41 80    	mov.w     0x83a, w1
    391c:	e0 41 80    	mov.w     0x83c, w0
    391e:	80 8f 50    	sub.w     w1, w0, [w15]
    3920:	02 00 32    	bra       Z, 0x3926 <.L435>
        parser_task = (STATE_HANDLER_T)NULL;
    3922:	3e 28 ef    	clr.w     0x83e
        LED2 = 1;
    3924:	ec 02 a8    	bset.b    0x2ec, #0x0

00003926 <.L435>:
    }
}
    3926:	00 80 fa    	ulnk      
    3928:	00 00 06    	return    

0000392a <_init_smu_base>:
uint8_t U1TX_buffer[U1TX_BUFFER_LENGTH];
uint8_t U1RX_buffer[U1RX_BUFFER_LENGTH];
uint16_t U1TXthreshold;

void init_smu_base(void) {
    392a:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2),
    392c:	00 10 20    	mov.w     #0x100, w0
    392e:	30 3a 88    	mov.w     w0, 0x746
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

//    OSCTUN = 0x9000;        // enable FRC self tuning with USB host clock
    OSCCONbits.SOSCEN = 1;  // enable secondary oscillator (SOSC)
    3930:	42 27 a8    	bset.b    0x742, #0x1
    OSCTUNbits.STEN = 1;    // enable FRC oscillator self tuning from SOSC
    3932:	49 e7 a8    	bset.b    0x749, #0x7

    // Make all pins digital I/Os
    ANSB = 0;
    3934:	e2 24 ef    	clr.w     0x4e2
    ANSC = 0;
    3936:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    3938:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    393a:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    393c:	ec 24 ef    	clr.w     0x4ec

    ANSBbits.ANSB0 = 1;     // configure RB0 (AN0) for analog function
    393e:	e2 04 a8    	bset.b    0x4e2, #0x0
    TRISBbits.TRISB0 = 1;   // tristate RB0's output driver
    3940:	c8 02 a8    	bset.b    0x2c8, #0x0

    ANSGbits.ANSG9 = 1;     // configure RG9 (DAC1) for analog function
    3942:	ed 24 a8    	bset.b    0x4ed, #0x1
    TRISGbits.TRISG9 = 1;   // tristate RG9's output driver
    3944:	f1 22 a8    	bset.b    0x2f1, #0x1
    DAC1CON = 0x8081;       // enable DAC1, no trigger, and reference is DREF+
    3946:	10 08 28    	mov.w     #0x8081, w0
    3948:	00 22 88    	mov.w     w0, 0x440
    DAC1DAT = 0;
    394a:	42 24 ef    	clr.w     0x442

    ANSBbits.ANSB13 = 1;    // configure RB13 (DAC2) for analog function
    394c:	e3 a4 a8    	bset.b    0x4e3, #0x5
    TRISBbits.TRISB13 = 1;  // tristate RB13's output driver
    394e:	c9 a2 a8    	bset.b    0x2c9, #0x5
    DAC2CON = 0x8081;       // enable DAC2, no trigger, and reference is DREF+
    3950:	10 08 28    	mov.w     #0x8081, w0
    3952:	20 22 88    	mov.w     w0, 0x444
    DAC2DAT = 0;
    3954:	46 24 ef    	clr.w     0x446

    // Configure LED pins as outputs, set to high (off)
    LED1 = 1; LED1_DIR = OUT;
    3956:	dc e2 a8    	bset.b    0x2dc, #0x7
    3958:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    LED2 = 1; LED2_DIR = OUT;
    395a:	ec 02 a8    	bset.b    0x2ec, #0x0
    395c:	e8 02 a9    	bclr.b    0x2e8, #0x0
    LED3 = 1; LED3_DIR = OUT;
    395e:	ec 22 a8    	bset.b    0x2ec, #0x1
    3960:	e8 22 a9    	bclr.b    0x2e8, #0x1

    // Configure SW pin as inputs
    SW1_DIR = IN;
    3962:	d1 e2 a8    	bset.b    0x2d1, #0x7

    // Configure ENA12V pin as an output, set to low (off)
    ENA12V = OFF; ENA12V_DIR = OUT;
    3964:	d5 82 a9    	bclr.b    0x2d5, #0x4
    3966:	d1 82 a9    	bclr.b    0x2d1, #0x4

    // Configure mode and range pins as outputs, set to low
    RD0_DIR = OUT; RD0_ = 0;
    3968:	d8 02 a9    	bclr.b    0x2d8, #0x0
    396a:	dc 02 a9    	bclr.b    0x2dc, #0x0
    RD1_DIR = OUT; RD1_ = 0;
    396c:	d8 22 a9    	bclr.b    0x2d8, #0x1
    396e:	dc 22 a9    	bclr.b    0x2dc, #0x1
    RD2_DIR = OUT; RD2_ = 0;
    3970:	d8 42 a9    	bclr.b    0x2d8, #0x2
    3972:	dc 42 a9    	bclr.b    0x2dc, #0x2
    RD3_DIR = OUT; RD3_ = 0;
    3974:	d8 62 a9    	bclr.b    0x2d8, #0x3
    3976:	dc 62 a9    	bclr.b    0x2dc, #0x3
    RD4_DIR = OUT; RD4_ = 0;
    3978:	d8 82 a9    	bclr.b    0x2d8, #0x4
    397a:	dc 82 a9    	bclr.b    0x2dc, #0x4
    RD5_DIR = OUT; RD5_ = 0;
    397c:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    397e:	dc a2 a9    	bclr.b    0x2dc, #0x5
    RD6_DIR = OUT; RD6_ = 0;
    3980:	d8 c2 a9    	bclr.b    0x2d8, #0x6
    3982:	dc c2 a9    	bclr.b    0x2dc, #0x6

    RE0_DIR = OUT; RE0_ = 0;
    3984:	e0 02 a9    	bclr.b    0x2e0, #0x0
    3986:	e4 02 a9    	bclr.b    0x2e4, #0x0
    RE1_DIR = OUT; RE1_ = 0;
    3988:	e0 22 a9    	bclr.b    0x2e0, #0x1
    398a:	e4 22 a9    	bclr.b    0x2e4, #0x1
    RE2_DIR = OUT; RE2_ = 0;
    398c:	e0 42 a9    	bclr.b    0x2e0, #0x2
    398e:	e4 42 a9    	bclr.b    0x2e4, #0x2
    RE3_DIR = OUT; RE3_ = 0;
    3990:	e0 62 a9    	bclr.b    0x2e0, #0x3
    3992:	e4 62 a9    	bclr.b    0x2e4, #0x3
    RE4_DIR = OUT; RE4_ = 0;
    3994:	e0 82 a9    	bclr.b    0x2e0, #0x4
    3996:	e4 82 a9    	bclr.b    0x2e4, #0x4
    RE5_DIR = OUT; RE5_ = 0;
    3998:	e0 a2 a9    	bclr.b    0x2e0, #0x5
    399a:	e4 a2 a9    	bclr.b    0x2e4, #0x5
    RE6_DIR = OUT; RE6_ = 0;
    399c:	e0 c2 a9    	bclr.b    0x2e0, #0x6
    399e:	e4 c2 a9    	bclr.b    0x2e4, #0x6

    // Configure digital pins to be outputs
    D0_DIR = OUT; D0 = 0;
    39a0:	f0 e2 a9    	bclr.b    0x2f0, #0x7
    39a2:	f2 e2 a9    	bclr.b    0x2f2, #0x7
    D1_DIR = OUT; D1 = 0;
    39a4:	c8 82 a9    	bclr.b    0x2c8, #0x4
    39a6:	ca 82 a9    	bclr.b    0x2ca, #0x4
    D2_DIR = OUT; D2 = 0;
    39a8:	c8 c2 a9    	bclr.b    0x2c8, #0x6
    39aa:	ca c2 a9    	bclr.b    0x2ca, #0x6
    D3_DIR = OUT; D3 = 0;
    39ac:	c8 e2 a9    	bclr.b    0x2c8, #0x7
    39ae:	ca e2 a9    	bclr.b    0x2ca, #0x7

    // Configure initial PWM frequencies to 1 kHz and duty cycles to 50%
    OC1RS = 15999;
    39b0:	f0 e7 23    	mov.w     #0x3e7f, w0
    39b2:	a0 0c 88    	mov.w     w0, 0x194
    OC1R = 7999;
    39b4:	f0 f3 21    	mov.w     #0x1f3f, w0
    39b6:	b0 0c 88    	mov.w     w0, 0x196
    OC1TMR = 0;
    39b8:	98 21 ef    	clr.w     0x198

    OC2RS = 15999;
    39ba:	f0 e7 23    	mov.w     #0x3e7f, w0
    39bc:	f0 0c 88    	mov.w     w0, 0x19e
    OC2R = 7999;
    39be:	f0 f3 21    	mov.w     #0x1f3f, w0
    39c0:	00 0d 88    	mov.w     w0, 0x1a0
    OC2TMR = 0;
    39c2:	a2 21 ef    	clr.w     0x1a2

    OC3RS = 15999;
    39c4:	f0 e7 23    	mov.w     #0x3e7f, w0
    39c6:	40 0d 88    	mov.w     w0, 0x1a8
    OC3R = 7999;
    39c8:	f0 f3 21    	mov.w     #0x1f3f, w0
    39ca:	50 0d 88    	mov.w     w0, 0x1aa
    OC3TMR = 0;
    39cc:	ac 21 ef    	clr.w     0x1ac

    OC4RS = 15999;
    39ce:	f0 e7 23    	mov.w     #0x3e7f, w0
    39d0:	90 0d 88    	mov.w     w0, 0x1b2
    OC4R = 7999;
    39d2:	f0 f3 21    	mov.w     #0x1f3f, w0
    39d4:	a0 0d 88    	mov.w     w0, 0x1b4
    OC4TMR = 0;
    39d6:	b6 21 ef    	clr.w     0x1b6

    // Configure Timer1 to have a period of 20 ms
    T1CON = 0x0010;
    39d8:	00 01 20    	mov.w     #0x10, w0
    39da:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0x9C3F;
    39dc:	f0 c3 29    	mov.w     #0x9c3f, w0
    39de:	10 08 88    	mov.w     w0, 0x102

    TMR1 = 0;
    39e0:	00 21 ef    	clr.w     0x100
    T1CONbits.TON = 1;
    39e2:	05 e1 a8    	bset.b    0x105, #0x7

    init_dac16();
    39e4:	04 00 07    	rcall     0x39ee <_init_dac16> <.LFB1> <.LFE0>
    init_adc18();
    39e6:	71 01 07    	rcall     0x3cca <_init_adc18> <.LFB12> <.LFE11>
    init_ble();
    39e8:	10 04 07    	rcall     0x420a <_init_ble> <.LFB19> <.LFE18>
}
    39ea:	00 80 fa    	ulnk      
    39ec:	00 00 06    	return    

000039ee <_init_dac16>:

// Functions for interfacing with the quad 16-bit DAC (DAC8564)
void init_dac16(void) {
    39ee:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure DAC16 pins and SPI peripheral (SPI1)
    DAC_CSN_DIR = OUT; DAC_CSN = 1;
    39f0:	d9 02 a9    	bclr.b    0x2d9, #0x0
    39f2:	dd 02 a8    	bset.b    0x2dd, #0x0
    DAC_SCK_DIR = OUT; DAC_SCK = 1;
    39f4:	d9 62 a9    	bclr.b    0x2d9, #0x3
    39f6:	dd 62 a8    	bset.b    0x2dd, #0x3
    DAC_MOSI_DIR = OUT; DAC_MOSI = 0;
    39f8:	d9 42 a9    	bclr.b    0x2d9, #0x2
    39fa:	dd 42 a9    	bclr.b    0x2dd, #0x2
    DAC_MISO_DIR = IN;
    39fc:	d9 22 a8    	bset.b    0x2d9, #0x1

    RPOR = (uint8_t *)&RPOR0;
    39fe:	00 6c 20    	mov.w     #0x6c0, w0
    3a00:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    3a02:	00 68 20    	mov.w     #0x680, w0
    3a04:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    3a06:	11 3a 80    	mov.w     0x742, w1
    3a08:	f0 0b 20    	mov.w     #0xbf, w0
    3a0a:	00 81 60    	and.w     w1, w0, w2
    3a0c:	60 04 20    	mov.w     #0x46, w0
    3a0e:	71 05 20    	mov.w     #0x57, w1
    3a10:	23 74 20    	mov.w     #0x742, w3
    3a12:	80 49 78    	mov.b     w0, [w3]
    3a14:	81 49 78    	mov.b     w1, [w3]
    3a16:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO1_RP] = DAC_MISO_RP;
    3a18:	1e 00 90    	mov.w     [w14+2], w0
    3a1a:	80 02 b0    	add.w     #0x28, w0
    3a1c:	41 c0 b3    	mov.b     #0x4, w1
    3a1e:	01 48 78    	mov.b     w1, [w0]
    RPOR[DAC_MOSI_RP] = MOSI1_RP;
    3a20:	9e 00 78    	mov.w     [w14], w1
    3a22:	63 80 40    	add.w     w1, #0x3, w0
    3a24:	71 c0 b3    	mov.b     #0x7, w1
    3a26:	01 48 78    	mov.b     w1, [w0]
    RPOR[DAC_SCK_RP] = SCK1OUT_RP;
    3a28:	9e 00 78    	mov.w     [w14], w1
    3a2a:	6c 80 40    	add.w     w1, #0xc, w0
    3a2c:	81 c0 b3    	mov.b     #0x8, w1
    3a2e:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    3a30:	10 3a 80    	mov.w     0x742, w0
    3a32:	00 01 78    	mov.w     w0, w2
    3a34:	02 60 a0    	bset.w    w2, #0x6
    3a36:	60 04 20    	mov.w     #0x46, w0
    3a38:	71 05 20    	mov.w     #0x57, w1
    3a3a:	23 74 20    	mov.w     #0x742, w3
    3a3c:	80 49 78    	mov.b     w0, [w3]
    3a3e:	81 49 78    	mov.b     w1, [w3]
    3a40:	82 49 78    	mov.b     w2, [w3]

    SPI1CON1 = 0x017B;      // SPI1 mode = 2, SCK freq = 2 MHz
    3a42:	b0 17 20    	mov.w     #0x17b, w0
    3a44:	10 12 88    	mov.w     w0, 0x242
    SPI1CON2 = 0;
    3a46:	44 22 ef    	clr.w     0x244
    SPI1STAT = 0x8000;
    3a48:	00 00 28    	mov.w     #0x8000, w0
    3a4a:	00 12 88    	mov.w     w0, 0x240

    dac16_dac0 = 0;
    3a4c:	4e 28 ef    	clr.w     0x84e
    dac16_dac1 = 0;
    3a4e:	50 28 ef    	clr.w     0x850
    dac16_dac2 = 0;
    3a50:	52 28 ef    	clr.w     0x852
    dac16_dac3 = 0;
    3a52:	54 28 ef    	clr.w     0x854
}
    3a54:	00 80 fa    	ulnk      
    3a56:	00 00 06    	return    

00003a58 <_dac16_get_dac0>:

uint16_t dac16_get_dac0(void) {
    3a58:	00 00 fa    	lnk       #0x0
    return dac16_dac0;
    3a5a:	70 42 80    	mov.w     0x84e, w0
}
    3a5c:	00 80 fa    	ulnk      
    3a5e:	00 00 06    	return    

00003a60 <_dac16_set_dac0>:

void dac16_set_dac0(uint16_t val) {
    3a60:	04 00 fa    	lnk       #0x4
    3a62:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac0 = val;
    3a64:	9e 00 90    	mov.w     [w14+2], w1
    3a66:	71 42 88    	mov.w     w1, 0x84e

    DAC_CSN = 0;
    3a68:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC0
    SPI1BUF = 0b00010000;
    3a6a:	00 01 20    	mov.w     #0x10, w0
    3a6c:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3a6e:	00 00 00    	nop       

00003a70 <.L5>:
    3a70:	00 12 80    	mov.w     0x240, w0
    3a72:	61 00 60    	and.w     w0, #0x1, w0
    3a74:	00 00 e0    	cp0.w     w0
    3a76:	fc ff 32    	bra       Z, 0x3a70 <.L5>
    temp = SPI1BUF;
    3a78:	41 12 80    	mov.w     0x248, w1
    3a7a:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC0 value
    SPI1BUF = dac16_dac0 >> 8;
    3a7c:	70 42 80    	mov.w     0x84e, w0
    3a7e:	48 00 de    	lsr.w     w0, #0x8, w0
    3a80:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3a82:	00 00 00    	nop       

00003a84 <.L6>:
    3a84:	00 12 80    	mov.w     0x240, w0
    3a86:	61 00 60    	and.w     w0, #0x1, w0
    3a88:	00 00 e0    	cp0.w     w0
    3a8a:	fc ff 32    	bra       Z, 0x3a84 <.L6>
    temp = SPI1BUF;
    3a8c:	41 12 80    	mov.w     0x248, w1
    3a8e:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC0 value
    SPI1BUF = dac16_dac0 & 0xFF;
    3a90:	71 42 80    	mov.w     0x84e, w1
    3a92:	f0 0f 20    	mov.w     #0xff, w0
    3a94:	00 80 60    	and.w     w1, w0, w0
    3a96:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3a98:	00 00 00    	nop       

00003a9a <.L7>:
    3a9a:	00 12 80    	mov.w     0x240, w0
    3a9c:	61 00 60    	and.w     w0, #0x1, w0
    3a9e:	00 00 e0    	cp0.w     w0
    3aa0:	fc ff 32    	bra       Z, 0x3a9a <.L7>
    temp = SPI1BUF;
    3aa2:	41 12 80    	mov.w     0x248, w1
    3aa4:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3aa6:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3aa8:	00 80 fa    	ulnk      
    3aaa:	00 00 06    	return    

00003aac <_dac16_get_dac1>:

uint16_t dac16_get_dac1(void) {
    3aac:	00 00 fa    	lnk       #0x0
    return dac16_dac1;
    3aae:	80 42 80    	mov.w     0x850, w0
}
    3ab0:	00 80 fa    	ulnk      
    3ab2:	00 00 06    	return    

00003ab4 <_dac16_set_dac1>:

void dac16_set_dac1(uint16_t val) {
    3ab4:	04 00 fa    	lnk       #0x4
    3ab6:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac1 = val;
    3ab8:	9e 00 90    	mov.w     [w14+2], w1
    3aba:	81 42 88    	mov.w     w1, 0x850

    DAC_CSN = 0;
    3abc:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC1
    SPI1BUF = 0b00010010;
    3abe:	20 01 20    	mov.w     #0x12, w0
    3ac0:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ac2:	00 00 00    	nop       

00003ac4 <.L10>:
    3ac4:	00 12 80    	mov.w     0x240, w0
    3ac6:	61 00 60    	and.w     w0, #0x1, w0
    3ac8:	00 00 e0    	cp0.w     w0
    3aca:	fc ff 32    	bra       Z, 0x3ac4 <.L10>
    temp = SPI1BUF;
    3acc:	41 12 80    	mov.w     0x248, w1
    3ace:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC1 value
    SPI1BUF = dac16_dac1 >> 8;
    3ad0:	80 42 80    	mov.w     0x850, w0
    3ad2:	48 00 de    	lsr.w     w0, #0x8, w0
    3ad4:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ad6:	00 00 00    	nop       

00003ad8 <.L11>:
    3ad8:	00 12 80    	mov.w     0x240, w0
    3ada:	61 00 60    	and.w     w0, #0x1, w0
    3adc:	00 00 e0    	cp0.w     w0
    3ade:	fc ff 32    	bra       Z, 0x3ad8 <.L11>
    temp = SPI1BUF;
    3ae0:	41 12 80    	mov.w     0x248, w1
    3ae2:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC1 value
    SPI1BUF = dac16_dac1 & 0xFF;
    3ae4:	81 42 80    	mov.w     0x850, w1
    3ae6:	f0 0f 20    	mov.w     #0xff, w0
    3ae8:	00 80 60    	and.w     w1, w0, w0
    3aea:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3aec:	00 00 00    	nop       

00003aee <.L12>:
    3aee:	00 12 80    	mov.w     0x240, w0
    3af0:	61 00 60    	and.w     w0, #0x1, w0
    3af2:	00 00 e0    	cp0.w     w0
    3af4:	fc ff 32    	bra       Z, 0x3aee <.L12>
    temp = SPI1BUF;
    3af6:	41 12 80    	mov.w     0x248, w1
    3af8:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3afa:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3afc:	00 80 fa    	ulnk      
    3afe:	00 00 06    	return    

00003b00 <_dac16_get_dac2>:

uint16_t dac16_get_dac2(void) {
    3b00:	00 00 fa    	lnk       #0x0
    return dac16_dac2;
    3b02:	90 42 80    	mov.w     0x852, w0
}
    3b04:	00 80 fa    	ulnk      
    3b06:	00 00 06    	return    

00003b08 <_dac16_set_dac2>:

void dac16_set_dac2(uint16_t val) {
    3b08:	04 00 fa    	lnk       #0x4
    3b0a:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac2 = val;
    3b0c:	9e 00 90    	mov.w     [w14+2], w1
    3b0e:	91 42 88    	mov.w     w1, 0x852

    DAC_CSN = 0;
    3b10:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC2
    SPI1BUF = 0b00010100;
    3b12:	40 01 20    	mov.w     #0x14, w0
    3b14:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b16:	00 00 00    	nop       

00003b18 <.L15>:
    3b18:	00 12 80    	mov.w     0x240, w0
    3b1a:	61 00 60    	and.w     w0, #0x1, w0
    3b1c:	00 00 e0    	cp0.w     w0
    3b1e:	fc ff 32    	bra       Z, 0x3b18 <.L15>
    temp = SPI1BUF;
    3b20:	41 12 80    	mov.w     0x248, w1
    3b22:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC2 value
    SPI1BUF = dac16_dac2 >> 8;
    3b24:	90 42 80    	mov.w     0x852, w0
    3b26:	48 00 de    	lsr.w     w0, #0x8, w0
    3b28:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b2a:	00 00 00    	nop       

00003b2c <.L16>:
    3b2c:	00 12 80    	mov.w     0x240, w0
    3b2e:	61 00 60    	and.w     w0, #0x1, w0
    3b30:	00 00 e0    	cp0.w     w0
    3b32:	fc ff 32    	bra       Z, 0x3b2c <.L16>
    temp = SPI1BUF;
    3b34:	41 12 80    	mov.w     0x248, w1
    3b36:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC2 value
    SPI1BUF = dac16_dac2 & 0xFF;
    3b38:	91 42 80    	mov.w     0x852, w1
    3b3a:	f0 0f 20    	mov.w     #0xff, w0
    3b3c:	00 80 60    	and.w     w1, w0, w0
    3b3e:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b40:	00 00 00    	nop       

00003b42 <.L17>:
    3b42:	00 12 80    	mov.w     0x240, w0
    3b44:	61 00 60    	and.w     w0, #0x1, w0
    3b46:	00 00 e0    	cp0.w     w0
    3b48:	fc ff 32    	bra       Z, 0x3b42 <.L17>
    temp = SPI1BUF;
    3b4a:	41 12 80    	mov.w     0x248, w1
    3b4c:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3b4e:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3b50:	00 80 fa    	ulnk      
    3b52:	00 00 06    	return    

00003b54 <_dac16_get_dac3>:

uint16_t dac16_get_dac3(void) {
    3b54:	00 00 fa    	lnk       #0x0
    return dac16_dac3;
    3b56:	a0 42 80    	mov.w     0x854, w0
}
    3b58:	00 80 fa    	ulnk      
    3b5a:	00 00 06    	return    

00003b5c <_dac16_set_dac3>:

void dac16_set_dac3(uint16_t val) {
    3b5c:	04 00 fa    	lnk       #0x4
    3b5e:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac3 = val;
    3b60:	9e 00 90    	mov.w     [w14+2], w1
    3b62:	a1 42 88    	mov.w     w1, 0x854

    DAC_CSN = 0;
    3b64:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC3
    SPI1BUF = 0b00010110;
    3b66:	60 01 20    	mov.w     #0x16, w0
    3b68:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b6a:	00 00 00    	nop       

00003b6c <.L20>:
    3b6c:	00 12 80    	mov.w     0x240, w0
    3b6e:	61 00 60    	and.w     w0, #0x1, w0
    3b70:	00 00 e0    	cp0.w     w0
    3b72:	fc ff 32    	bra       Z, 0x3b6c <.L20>
    temp = SPI1BUF;
    3b74:	41 12 80    	mov.w     0x248, w1
    3b76:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC3 value
    SPI1BUF = dac16_dac3 >> 8;
    3b78:	a0 42 80    	mov.w     0x854, w0
    3b7a:	48 00 de    	lsr.w     w0, #0x8, w0
    3b7c:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b7e:	00 00 00    	nop       

00003b80 <.L21>:
    3b80:	00 12 80    	mov.w     0x240, w0
    3b82:	61 00 60    	and.w     w0, #0x1, w0
    3b84:	00 00 e0    	cp0.w     w0
    3b86:	fc ff 32    	bra       Z, 0x3b80 <.L21>
    temp = SPI1BUF;
    3b88:	41 12 80    	mov.w     0x248, w1
    3b8a:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC3 value
    SPI1BUF = dac16_dac3 & 0xFF;
    3b8c:	a1 42 80    	mov.w     0x854, w1
    3b8e:	f0 0f 20    	mov.w     #0xff, w0
    3b90:	00 80 60    	and.w     w1, w0, w0
    3b92:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3b94:	00 00 00    	nop       

00003b96 <.L22>:
    3b96:	00 12 80    	mov.w     0x240, w0
    3b98:	61 00 60    	and.w     w0, #0x1, w0
    3b9a:	00 00 e0    	cp0.w     w0
    3b9c:	fc ff 32    	bra       Z, 0x3b96 <.L22>
    temp = SPI1BUF;
    3b9e:	41 12 80    	mov.w     0x248, w1
    3ba0:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3ba2:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3ba4:	00 80 fa    	ulnk      
    3ba6:	00 00 06    	return    

00003ba8 <_dac16_set_ch1>:

void dac16_set_ch1(uint16_t pos, uint16_t neg) {
    3ba8:	06 00 fa    	lnk       #0x6
    3baa:	10 07 98    	mov.w     w0, [w14+2]
    3bac:	21 07 98    	mov.w     w1, [w14+4]
    uint16_t temp;

    dac16_dac2 = neg;
    3bae:	ae 00 90    	mov.w     [w14+4], w1
    3bb0:	91 42 88    	mov.w     w1, 0x852

    DAC_CSN = 0;
    3bb2:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 2 with data
    SPI1BUF = 0b00000100;
    3bb4:	40 00 20    	mov.w     #0x4, w0
    3bb6:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3bb8:	00 00 00    	nop       

00003bba <.L24>:
    3bba:	00 12 80    	mov.w     0x240, w0
    3bbc:	61 00 60    	and.w     w0, #0x1, w0
    3bbe:	00 00 e0    	cp0.w     w0
    3bc0:	fc ff 32    	bra       Z, 0x3bba <.L24>
    temp = SPI1BUF;
    3bc2:	41 12 80    	mov.w     0x248, w1
    3bc4:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC2 value
    SPI1BUF = dac16_dac2 >> 8;
    3bc6:	90 42 80    	mov.w     0x852, w0
    3bc8:	48 00 de    	lsr.w     w0, #0x8, w0
    3bca:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3bcc:	00 00 00    	nop       

00003bce <.L25>:
    3bce:	00 12 80    	mov.w     0x240, w0
    3bd0:	61 00 60    	and.w     w0, #0x1, w0
    3bd2:	00 00 e0    	cp0.w     w0
    3bd4:	fc ff 32    	bra       Z, 0x3bce <.L25>
    temp = SPI1BUF;
    3bd6:	41 12 80    	mov.w     0x248, w1
    3bd8:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC2 value
    SPI1BUF = dac16_dac2 & 0xFF;
    3bda:	91 42 80    	mov.w     0x852, w1
    3bdc:	f0 0f 20    	mov.w     #0xff, w0
    3bde:	00 80 60    	and.w     w1, w0, w0
    3be0:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3be2:	00 00 00    	nop       

00003be4 <.L26>:
    3be4:	00 12 80    	mov.w     0x240, w0
    3be6:	61 00 60    	and.w     w0, #0x1, w0
    3be8:	00 00 e0    	cp0.w     w0
    3bea:	fc ff 32    	bra       Z, 0x3be4 <.L26>
    temp = SPI1BUF;
    3bec:	41 12 80    	mov.w     0x248, w1
    3bee:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3bf0:	dd 02 a8    	bset.b    0x2dd, #0x0

    dac16_dac3 = pos;
    3bf2:	9e 00 90    	mov.w     [w14+2], w1
    3bf4:	a1 42 88    	mov.w     w1, 0x854

    DAC_CSN = 0;
    3bf6:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 3 with data and load all DACs simultaneously
    SPI1BUF = 0b00100110;
    3bf8:	60 02 20    	mov.w     #0x26, w0
    3bfa:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3bfc:	00 00 00    	nop       

00003bfe <.L27>:
    3bfe:	00 12 80    	mov.w     0x240, w0
    3c00:	61 00 60    	and.w     w0, #0x1, w0
    3c02:	00 00 e0    	cp0.w     w0
    3c04:	fc ff 32    	bra       Z, 0x3bfe <.L27>
    temp = SPI1BUF;
    3c06:	41 12 80    	mov.w     0x248, w1
    3c08:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC3 value
    SPI1BUF = dac16_dac3 >> 8;
    3c0a:	a0 42 80    	mov.w     0x854, w0
    3c0c:	48 00 de    	lsr.w     w0, #0x8, w0
    3c0e:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c10:	00 00 00    	nop       

00003c12 <.L28>:
    3c12:	00 12 80    	mov.w     0x240, w0
    3c14:	61 00 60    	and.w     w0, #0x1, w0
    3c16:	00 00 e0    	cp0.w     w0
    3c18:	fc ff 32    	bra       Z, 0x3c12 <.L28>
    temp = SPI1BUF;
    3c1a:	41 12 80    	mov.w     0x248, w1
    3c1c:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC3 value
    SPI1BUF = dac16_dac3 & 0xFF;
    3c1e:	a1 42 80    	mov.w     0x854, w1
    3c20:	f0 0f 20    	mov.w     #0xff, w0
    3c22:	00 80 60    	and.w     w1, w0, w0
    3c24:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c26:	00 00 00    	nop       

00003c28 <.L29>:
    3c28:	00 12 80    	mov.w     0x240, w0
    3c2a:	61 00 60    	and.w     w0, #0x1, w0
    3c2c:	00 00 e0    	cp0.w     w0
    3c2e:	fc ff 32    	bra       Z, 0x3c28 <.L29>
    temp = SPI1BUF;
    3c30:	41 12 80    	mov.w     0x248, w1
    3c32:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3c34:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3c36:	00 80 fa    	ulnk      
    3c38:	00 00 06    	return    

00003c3a <_dac16_set_ch2>:

void dac16_set_ch2(uint16_t pos, uint16_t neg) {
    3c3a:	06 00 fa    	lnk       #0x6
    3c3c:	10 07 98    	mov.w     w0, [w14+2]
    3c3e:	21 07 98    	mov.w     w1, [w14+4]
    uint16_t temp;

    dac16_dac0 = neg;
    3c40:	ae 00 90    	mov.w     [w14+4], w1
    3c42:	71 42 88    	mov.w     w1, 0x84e

    DAC_CSN = 0;
    3c44:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 0 with data
    SPI1BUF = 0b00000000;
    3c46:	48 22 ef    	clr.w     0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c48:	00 00 00    	nop       

00003c4a <.L31>:
    3c4a:	00 12 80    	mov.w     0x240, w0
    3c4c:	61 00 60    	and.w     w0, #0x1, w0
    3c4e:	00 00 e0    	cp0.w     w0
    3c50:	fc ff 32    	bra       Z, 0x3c4a <.L31>
    temp = SPI1BUF;
    3c52:	41 12 80    	mov.w     0x248, w1
    3c54:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC0 value
    SPI1BUF = dac16_dac0 >> 8;
    3c56:	70 42 80    	mov.w     0x84e, w0
    3c58:	48 00 de    	lsr.w     w0, #0x8, w0
    3c5a:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c5c:	00 00 00    	nop       

00003c5e <.L32>:
    3c5e:	00 12 80    	mov.w     0x240, w0
    3c60:	61 00 60    	and.w     w0, #0x1, w0
    3c62:	00 00 e0    	cp0.w     w0
    3c64:	fc ff 32    	bra       Z, 0x3c5e <.L32>
    temp = SPI1BUF;
    3c66:	41 12 80    	mov.w     0x248, w1
    3c68:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC0 value
    SPI1BUF = dac16_dac0 & 0xFF;
    3c6a:	71 42 80    	mov.w     0x84e, w1
    3c6c:	f0 0f 20    	mov.w     #0xff, w0
    3c6e:	00 80 60    	and.w     w1, w0, w0
    3c70:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c72:	00 00 00    	nop       

00003c74 <.L33>:
    3c74:	00 12 80    	mov.w     0x240, w0
    3c76:	61 00 60    	and.w     w0, #0x1, w0
    3c78:	00 00 e0    	cp0.w     w0
    3c7a:	fc ff 32    	bra       Z, 0x3c74 <.L33>
    temp = SPI1BUF;
    3c7c:	41 12 80    	mov.w     0x248, w1
    3c7e:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3c80:	dd 02 a8    	bset.b    0x2dd, #0x0

    dac16_dac1 = pos;
    3c82:	9e 00 90    	mov.w     [w14+2], w1
    3c84:	81 42 88    	mov.w     w1, 0x850

    DAC_CSN = 0;
    3c86:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 1 with data and load all DACs simultaneously
    SPI1BUF = 0b00100010;
    3c88:	20 02 20    	mov.w     #0x22, w0
    3c8a:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3c8c:	00 00 00    	nop       

00003c8e <.L34>:
    3c8e:	00 12 80    	mov.w     0x240, w0
    3c90:	61 00 60    	and.w     w0, #0x1, w0
    3c92:	00 00 e0    	cp0.w     w0
    3c94:	fc ff 32    	bra       Z, 0x3c8e <.L34>
    temp = SPI1BUF;
    3c96:	41 12 80    	mov.w     0x248, w1
    3c98:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC1 value
    SPI1BUF = dac16_dac1 >> 8;
    3c9a:	80 42 80    	mov.w     0x850, w0
    3c9c:	48 00 de    	lsr.w     w0, #0x8, w0
    3c9e:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ca0:	00 00 00    	nop       

00003ca2 <.L35>:
    3ca2:	00 12 80    	mov.w     0x240, w0
    3ca4:	61 00 60    	and.w     w0, #0x1, w0
    3ca6:	00 00 e0    	cp0.w     w0
    3ca8:	fc ff 32    	bra       Z, 0x3ca2 <.L35>
    temp = SPI1BUF;
    3caa:	41 12 80    	mov.w     0x248, w1
    3cac:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC1 value
    SPI1BUF = dac16_dac1 & 0xFF;
    3cae:	81 42 80    	mov.w     0x850, w1
    3cb0:	f0 0f 20    	mov.w     #0xff, w0
    3cb2:	00 80 60    	and.w     w1, w0, w0
    3cb4:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3cb6:	00 00 00    	nop       

00003cb8 <.L36>:
    3cb8:	00 12 80    	mov.w     0x240, w0
    3cba:	61 00 60    	and.w     w0, #0x1, w0
    3cbc:	00 00 e0    	cp0.w     w0
    3cbe:	fc ff 32    	bra       Z, 0x3cb8 <.L36>
    temp = SPI1BUF;
    3cc0:	41 12 80    	mov.w     0x248, w1
    3cc2:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3cc4:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3cc6:	00 80 fa    	ulnk      
    3cc8:	00 00 06    	return    

00003cca <_init_adc18>:

// Functions for interfacing with the 18-bit SAR ADCs (ADS8887)
void init_adc18(void) {
    3cca:	00 00 fa    	lnk       #0x0
    uint8_t *RPOR, *RPINR;

    // Configure ADC18 pins and Timer2
    ADC_CONVST_DIR = OUT; ADC_CONVST = 0;
    3ccc:	f1 02 a9    	bclr.b    0x2f1, #0x0
    3cce:	f5 02 a9    	bclr.b    0x2f5, #0x0
    ADC_CSN1_DIR = OUT; ADC_CSN1 = 1;
    3cd0:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    3cd2:	ec a2 a8    	bset.b    0x2ec, #0x5
    ADC_CSN2_DIR = OUT; ADC_CSN2 = 1;
    3cd4:	e8 62 a9    	bclr.b    0x2e8, #0x3
    3cd6:	ec 62 a8    	bset.b    0x2ec, #0x3
    ADC_SCK_DIR = OUT; ADC_SCK = 0;
    3cd8:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    3cda:	cb e2 a9    	bclr.b    0x2cb, #0x7
    ADC_MOSI_DIR = OUT; ADC_MOSI = 0;
    3cdc:	c9 c2 a9    	bclr.b    0x2c9, #0x6
    3cde:	cb c2 a9    	bclr.b    0x2cb, #0x6
    ADC_MISO_DIR = IN;
    3ce0:	e8 82 a8    	bset.b    0x2e8, #0x4

    // Configure Timer2 to have a period of 102.25us so 163 cycles is 16.667ms
    T2CON = 0x0000;
    3ce2:	10 21 ef    	clr.w     0x110
    PR2 = 0x0663;
    3ce4:	30 66 20    	mov.w     #0x663, w0
    3ce6:	60 08 88    	mov.w     w0, 0x10c
}
    3ce8:	00 80 fa    	ulnk      
    3cea:	00 00 06    	return    

00003cec <_adc18_meas_ch1>:

int32_t adc18_meas_ch1(void) {
    3cec:	04 00 fa    	lnk       #0x4
    WORD32 result;

    adc18_high = 0;
    3cee:	56 28 ef    	clr.w     0x856
    adc18_low = 0;
    3cf0:	58 28 ef    	clr.w     0x858

    disable_interrupts();
    3cf2:	ff 3f fc    	disi      #0x3fff
    ADC_CONVST = 1;
    3cf4:	f5 02 a8    	bset.b    0x2f5, #0x0
    __asm__("repeat #139");
    3cf6:	8b 00 09    	repeat    #0x8b
    __asm__("nop");
    3cf8:	00 00 00    	nop       
    ADC_CSN1 = 0;
    3cfa:	ec a2 a9    	bclr.b    0x2ec, #0x5
    __asm__("clr W1");
    3cfc:	80 00 eb    	clr.w     w1
    ADC_SCK = 1;                    // SCK1, D17
    3cfe:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");      // RF4 is ADC_MISO
    3d00:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d02:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d04:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d06:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d08:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK2, D16
    3d0a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d0c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d0e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d10:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d12:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d14:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK3, D15
    3d16:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d18:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d1a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d1c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d1e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d20:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK4, D14
    3d22:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d24:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d26:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d28:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d2a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d2c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK5, D13
    3d2e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d30:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d32:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d34:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d36:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d38:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK6, D12
    3d3a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d3c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d3e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d40:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d42:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d44:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK7, D11
    3d46:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d48:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d4a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d4c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d4e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d50:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK8, D10
    3d52:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d54:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d56:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d58:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d5a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d5c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK9, D9
    3d5e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d60:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d62:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d64:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d66:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d68:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK10, D8
    3d6a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d6c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d6e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d70:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d72:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d74:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK11, D7
    3d76:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d78:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d7a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d7c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d7e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d80:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK12, D6
    3d82:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d84:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d86:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d88:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d8a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d8c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK13, D5
    3d8e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d90:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d92:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3d94:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3d96:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3d98:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK14, D4
    3d9a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3d9c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3d9e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3da0:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3da2:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3da4:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK15, D3
    3da6:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3da8:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3daa:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3dac:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3dae:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3db0:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK16, D2
    3db2:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3db4:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3db6:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3db8:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3dba:	01 80 b0    	addc.w    #0x0, w1
    __asm__("clr W2");
    3dbc:	00 01 eb    	clr.w     w2
    ADC_SCK = 1;                    // SCK17, D1
    3dbe:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3dc0:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3dc2:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3dc4:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3dc6:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, W2");
    3dc8:	02 01 d0    	sl.w      w2, w2
    ADC_SCK = 1;                    // SCK18, D0
    3dca:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3dcc:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3dce:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3dd0:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3dd2:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, #14, W2");
    3dd4:	4e 11 dd    	sl.w      w2, #0xe, w2
    ADC_CSN1 = 1;
    3dd6:	ec a2 a8    	bset.b    0x2ec, #0x5
    __asm__("mov W1, _adc18_high");
    3dd8:	b1 42 88    	mov.w     w1, 0x856
    __asm__("mov W2, _adc18_low");
    3dda:	c2 42 88    	mov.w     w2, 0x858
    ADC_CONVST = 0;
    3ddc:	f5 02 a9    	bclr.b    0x2f5, #0x0
    enable_interrupts();
    3dde:	52 20 ef    	clr.w     0x52

    result.w[1] = adc18_high;
    3de0:	b2 42 80    	mov.w     0x856, w2
    3de2:	12 07 98    	mov.w     w2, [w14+2]
    result.w[0] = adc18_low;
    3de4:	c2 42 80    	mov.w     0x858, w2
    3de6:	02 0f 78    	mov.w     w2, [w14]
    return result.l >> 14;
    3de8:	1e 01 be    	mov.d     [w14], w2
    3dea:	42 1a dd    	sl.w      w3, #0x2, w4
    3dec:	4e 10 de    	lsr.w     w2, #0xe, w0
    3dee:	00 00 72    	ior.w     w4, w0, w0
    3df0:	ce 98 de    	asr.w     w3, #0xe, w1
}
    3df2:	00 80 fa    	ulnk      
    3df4:	00 00 06    	return    

00003df6 <_adc18_meas_ch2>:

int32_t adc18_meas_ch2(void) {
    3df6:	04 00 fa    	lnk       #0x4
    WORD32 result;

    adc18_high = 0;
    3df8:	56 28 ef    	clr.w     0x856
    adc18_low = 0;
    3dfa:	58 28 ef    	clr.w     0x858

    disable_interrupts();
    3dfc:	ff 3f fc    	disi      #0x3fff
    ADC_CONVST = 1;
    3dfe:	f5 02 a8    	bset.b    0x2f5, #0x0
    __asm__("repeat #139");
    3e00:	8b 00 09    	repeat    #0x8b
    __asm__("nop");
    3e02:	00 00 00    	nop       
    ADC_CSN2 = 0;
    3e04:	ec 62 a9    	bclr.b    0x2ec, #0x3
    __asm__("clr W1");
    3e06:	80 00 eb    	clr.w     w1
    ADC_SCK = 1;                    // SCK1, D17
    3e08:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");      // RF4 is ADC_MISO
    3e0a:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e0c:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e0e:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e10:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e12:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK2, D16
    3e14:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e16:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e18:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e1a:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e1c:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e1e:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK3, D15
    3e20:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e22:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e24:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e26:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e28:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e2a:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK4, D14
    3e2c:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e2e:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e30:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e32:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e34:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e36:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK5, D13
    3e38:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e3a:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e3c:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e3e:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e40:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e42:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK6, D12
    3e44:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e46:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e48:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e4a:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e4c:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e4e:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK7, D11
    3e50:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e52:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e54:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e56:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e58:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e5a:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK8, D10
    3e5c:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e5e:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e60:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e62:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e64:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e66:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK9, D9
    3e68:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e6a:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e6c:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e6e:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e70:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e72:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK10, D8
    3e74:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e76:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e78:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e7a:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e7c:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e7e:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK11, D7
    3e80:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e82:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e84:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e86:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e88:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e8a:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK12, D6
    3e8c:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e8e:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e90:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e92:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3e94:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3e96:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK13, D5
    3e98:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3e9a:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3e9c:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3e9e:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3ea0:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3ea2:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK14, D4
    3ea4:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3ea6:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3ea8:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3eaa:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3eac:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3eae:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK15, D3
    3eb0:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3eb2:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3eb4:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3eb6:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3eb8:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3eba:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK16, D2
    3ebc:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3ebe:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3ec0:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3ec2:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3ec4:	01 80 b0    	addc.w    #0x0, w1
    __asm__("clr W2");
    3ec6:	00 01 eb    	clr.w     w2
    ADC_SCK = 1;                    // SCK17, D1
    3ec8:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3eca:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3ecc:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3ece:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3ed0:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, W2");
    3ed2:	02 01 d0    	sl.w      w2, w2
    ADC_SCK = 1;                    // SCK18, D0
    3ed4:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3ed6:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3ed8:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3eda:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3edc:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, #14, W2");
    3ede:	4e 11 dd    	sl.w      w2, #0xe, w2
    ADC_CSN2 = 1;
    3ee0:	ec 62 a8    	bset.b    0x2ec, #0x3
    __asm__("mov W1, _adc18_high");
    3ee2:	b1 42 88    	mov.w     w1, 0x856
    __asm__("mov W2, _adc18_low");
    3ee4:	c2 42 88    	mov.w     w2, 0x858
    ADC_CONVST = 0;
    3ee6:	f5 02 a9    	bclr.b    0x2f5, #0x0
    enable_interrupts();
    3ee8:	52 20 ef    	clr.w     0x52

    result.w[1] = adc18_high;
    3eea:	b2 42 80    	mov.w     0x856, w2
    3eec:	12 07 98    	mov.w     w2, [w14+2]
    result.w[0] = adc18_low;
    3eee:	c2 42 80    	mov.w     0x858, w2
    3ef0:	02 0f 78    	mov.w     w2, [w14]
    return result.l >> 14;
    3ef2:	1e 01 be    	mov.d     [w14], w2
    3ef4:	42 1a dd    	sl.w      w3, #0x2, w4
    3ef6:	4e 10 de    	lsr.w     w2, #0xe, w0
    3ef8:	00 00 72    	ior.w     w4, w0, w0
    3efa:	ce 98 de    	asr.w     w3, #0xe, w1
}
    3efc:	00 80 fa    	ulnk      
    3efe:	00 00 06    	return    

00003f00 <_adc18_meas_both>:

void adc18_meas_both(int32_t *ch1val, int32_t *ch2val) {
    3f00:	08 00 fa    	lnk       #0x8
    3f02:	20 07 98    	mov.w     w0, [w14+4]
    3f04:	31 07 98    	mov.w     w1, [w14+6]
    WORD32 result;

    adc18_high = 0;
    3f06:	56 28 ef    	clr.w     0x856
    adc18_low = 0;
    3f08:	58 28 ef    	clr.w     0x858

    disable_interrupts();
    3f0a:	ff 3f fc    	disi      #0x3fff
    ADC_CONVST = 1;
    3f0c:	f5 02 a8    	bset.b    0x2f5, #0x0
    __asm__("repeat #139");
    3f0e:	8b 00 09    	repeat    #0x8b
    __asm__("nop");
    3f10:	00 00 00    	nop       

    ADC_CSN1 = 0;
    3f12:	ec a2 a9    	bclr.b    0x2ec, #0x5
    __asm__("clr W1");
    3f14:	80 00 eb    	clr.w     w1
    ADC_SCK = 1;                    // SCK1, D17
    3f16:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");      // RF4 is ADC_MISO
    3f18:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f1a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f1c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f1e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f20:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK2, D16
    3f22:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f24:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f26:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f28:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f2a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f2c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK3, D15
    3f2e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f30:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f32:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f34:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f36:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f38:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK4, D14
    3f3a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f3c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f3e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f40:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f42:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f44:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK5, D13
    3f46:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f48:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f4a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f4c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f4e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f50:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK6, D12
    3f52:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f54:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f56:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f58:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f5a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f5c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK7, D11
    3f5e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f60:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f62:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f64:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f66:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f68:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK8, D10
    3f6a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f6c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f6e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f70:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f72:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f74:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK9, D9
    3f76:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f78:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f7a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f7c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f7e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f80:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK10, D8
    3f82:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f84:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f86:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f88:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f8a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f8c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK11, D7
    3f8e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f90:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f92:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3f94:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3f96:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3f98:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK12, D6
    3f9a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3f9c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3f9e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fa0:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3fa2:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3fa4:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK13, D5
    3fa6:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fa8:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3faa:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fac:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3fae:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3fb0:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK14, D4
    3fb2:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fb4:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3fb6:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fb8:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3fba:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3fbc:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK15, D3
    3fbe:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fc0:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3fc2:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fc4:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3fc6:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    3fc8:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK16, D2
    3fca:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fcc:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3fce:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fd0:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    3fd2:	01 80 b0    	addc.w    #0x0, w1
    __asm__("clr W2");
    3fd4:	00 01 eb    	clr.w     w2
    ADC_SCK = 1;                    // SCK17, D1
    3fd6:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fd8:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3fda:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fdc:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3fde:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, W2");
    3fe0:	02 01 d0    	sl.w      w2, w2
    ADC_SCK = 1;                    // SCK18, D0
    3fe2:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    3fe4:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    3fe6:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    3fe8:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    3fea:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, #14, W2");
    3fec:	4e 11 dd    	sl.w      w2, #0xe, w2
    ADC_CSN1 = 1;
    3fee:	ec a2 a8    	bset.b    0x2ec, #0x5

    __asm__("mov W1, _adc18_high");
    3ff0:	b1 42 88    	mov.w     w1, 0x856
    __asm__("mov W2, _adc18_low");
    3ff2:	c2 42 88    	mov.w     w2, 0x858
    result.w[1] = adc18_high;
    3ff4:	b0 42 80    	mov.w     0x856, w0
    3ff6:	10 07 98    	mov.w     w0, [w14+2]
    result.w[0] = adc18_low;
    3ff8:	c0 42 80    	mov.w     0x858, w0
    3ffa:	00 0f 78    	mov.w     w0, [w14]
    *ch1val = result.l >> 14;
    3ffc:	1e 00 be    	mov.d     [w14], w0
    3ffe:	42 09 dd    	sl.w      w1, #0x2, w2
    4000:	4e 02 de    	lsr.w     w0, #0xe, w4
    4002:	04 02 71    	ior.w     w2, w4, w4
    4004:	ce 8a de    	asr.w     w1, #0xe, w5
    4006:	2e 00 90    	mov.w     [w14+4], w0
    4008:	04 88 be    	mov.d     w4, [w0]
    adc18_high = 0;
    400a:	56 28 ef    	clr.w     0x856
    adc18_low = 0;
    400c:	58 28 ef    	clr.w     0x858

    ADC_CSN2 = 0;
    400e:	ec 62 a9    	bclr.b    0x2ec, #0x3
    __asm__("clr W1");
    4010:	80 00 eb    	clr.w     w1
    ADC_SCK = 1;                    // SCK1, D17
    4012:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");      // RF4 is ADC_MISO
    4014:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4016:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4018:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    401a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    401c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK2, D16
    401e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4020:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4022:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4024:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4026:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4028:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK3, D15
    402a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    402c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    402e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4030:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4032:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4034:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK4, D14
    4036:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4038:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    403a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    403c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    403e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4040:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK5, D13
    4042:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4044:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4046:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4048:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    404a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    404c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK6, D12
    404e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4050:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4052:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4054:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4056:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4058:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK7, D11
    405a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    405c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    405e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4060:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4062:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4064:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK8, D10
    4066:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4068:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    406a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    406c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    406e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4070:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK9, D9
    4072:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4074:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4076:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4078:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    407a:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    407c:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK10, D8
    407e:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4080:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    4082:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4084:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4086:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4088:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK11, D7
    408a:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    408c:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    408e:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    4090:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    4092:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    4094:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK12, D6
    4096:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    4098:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    409a:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    409c:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    409e:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    40a0:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK13, D5
    40a2:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40a4:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40a6:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40a8:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    40aa:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    40ac:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK14, D4
    40ae:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40b0:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40b2:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40b4:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    40b6:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    40b8:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK15, D3
    40ba:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40bc:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40be:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40c0:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    40c2:	01 80 b0    	addc.w    #0x0, w1
    __asm__("sl W1, W1");
    40c4:	81 00 d0    	sl.w      w1, w1
    ADC_SCK = 1;                    // SCK16, D2
    40c6:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40c8:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40ca:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40cc:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W1");
    40ce:	01 80 b0    	addc.w    #0x0, w1
    __asm__("clr W2");
    40d0:	00 01 eb    	clr.w     w2
    ADC_SCK = 1;                    // SCK17, D1
    40d2:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40d4:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40d6:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40d8:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    40da:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, W2");
    40dc:	02 01 d0    	sl.w      w2, w2
    ADC_SCK = 1;                    // SCK18, D0
    40de:	cb e2 a8    	bset.b    0x2cb, #0x7
    __asm__("mov _PORTF, W0");
    40e0:	50 17 80    	mov.w     0x2ea, w0
    __asm__("btst.c W0, #4");
    40e2:	00 40 a3    	btst.c    w0, #0x4
    ADC_SCK = 0;
    40e4:	cb e2 a9    	bclr.b    0x2cb, #0x7
    __asm__("addc #0, W2");
    40e6:	02 80 b0    	addc.w    #0x0, w2
    __asm__("sl W2, #14, W2");
    40e8:	4e 11 dd    	sl.w      w2, #0xe, w2
    ADC_CSN2 = 1;
    40ea:	ec 62 a8    	bset.b    0x2ec, #0x3

    __asm__("mov W1, _adc18_high");
    40ec:	b1 42 88    	mov.w     w1, 0x856
    __asm__("mov W2, _adc18_low");
    40ee:	c2 42 88    	mov.w     w2, 0x858
    result.w[1] = adc18_high;
    40f0:	b0 42 80    	mov.w     0x856, w0
    40f2:	10 07 98    	mov.w     w0, [w14+2]
    result.w[0] = adc18_low;
    40f4:	c0 42 80    	mov.w     0x858, w0
    40f6:	00 0f 78    	mov.w     w0, [w14]
    *ch2val = result.l >> 14;
    40f8:	1e 00 be    	mov.d     [w14], w0
    40fa:	42 0a dd    	sl.w      w1, #0x2, w4
    40fc:	4e 01 de    	lsr.w     w0, #0xe, w2
    40fe:	02 01 72    	ior.w     w4, w2, w2
    4100:	ce 89 de    	asr.w     w1, #0xe, w3
    4102:	3e 00 90    	mov.w     [w14+6], w0
    4104:	02 88 be    	mov.d     w2, [w0]

    ADC_CONVST = 0;
    4106:	f5 02 a9    	bclr.b    0x2f5, #0x0
    enable_interrupts();
    4108:	52 20 ef    	clr.w     0x52
}
    410a:	00 80 fa    	ulnk      
    410c:	00 00 06    	return    

0000410e <_adc18_meas_ch1_avg>:

int32_t adc18_meas_ch1_avg(void) {
    410e:	06 00 fa    	lnk       #0x6
    int32_t avg_result;
    uint16_t i;

    // Lower Timer2 interrupt flag and start Timer2
    IFS0bits.T2IF = 0;
    4110:	84 e0 a9    	bclr.b    0x84, #0x7
    TMR2 = 0;
    4112:	06 21 ef    	clr.w     0x106
    T2CONbits.TON = 1;
    4114:	11 e1 a8    	bset.b    0x111, #0x7

    avg_result = 0;
    4116:	60 00 b8    	mul.uu    w0, #0x0, w0
    4118:	00 8f be    	mov.d     w0, [w14]
    for (i = 163; i > 0; i--) {
    411a:	30 0a 20    	mov.w     #0xa3, w0
    411c:	20 07 98    	mov.w     w0, [w14+4]
    411e:	0d 00 37    	bra       0x413a <.L42>

00004120 <.L44>:
        avg_result += adc18_meas_ch1();
    4120:	e5 fd 07    	rcall     0x3cec <_adc18_meas_ch1> <.LFB13> <.LFE12>
    4122:	1e 0f 40    	add.w     w0, [w14], [w14]
    4124:	5e 97 48    	addc.w    w1, [++w14], [w14--]

        while (IFS0bits.T2IF == 0) {}
    4126:	00 00 00    	nop       

00004128 <.L43>:
    4128:	21 04 80    	mov.w     0x84, w1
    412a:	00 08 20    	mov.w     #0x80, w0
    412c:	00 80 60    	and.w     w1, w0, w0
    412e:	00 00 e0    	cp0.w     w0
    4130:	fb ff 32    	bra       Z, 0x4128 <.L43>
        IFS0bits.T2IF = 0;
    4132:	84 e0 a9    	bclr.b    0x84, #0x7
    4134:	2e 00 90    	mov.w     [w14+4], w0
    4136:	00 00 e9    	dec.w     w0, w0
    4138:	20 07 98    	mov.w     w0, [w14+4]

0000413a <.L42>:
    413a:	2e 00 90    	mov.w     [w14+4], w0
    413c:	00 00 e0    	cp0.w     w0
    413e:	f0 ff 3a    	bra       NZ, 0x4120 <.L44>
    }

    // Stop Timer2
    T2CONbits.TON = 0;
    4140:	11 e1 a9    	bclr.b    0x111, #0x7

    return avg_result / 163;
    4142:	1e 00 be    	mov.d     [w14], w0
    4144:	32 0a 20    	mov.w     #0xa3, w2
    4146:	03 00 20    	mov.w     #0x0, w3
    4148:	5c e9 07    	rcall     0x1402 <___divsi3> <.L0> <.L0>
}
    414a:	00 80 fa    	ulnk      
    414c:	00 00 06    	return    

0000414e <_adc18_meas_ch2_avg>:

int32_t adc18_meas_ch2_avg(void) {
    414e:	06 00 fa    	lnk       #0x6
    int32_t avg_result;
    uint16_t i;

    // Lower Timer2 interrupt flag and start Timer2
    IFS0bits.T2IF = 0;
    4150:	84 e0 a9    	bclr.b    0x84, #0x7
    TMR2 = 0;
    4152:	06 21 ef    	clr.w     0x106
    T2CONbits.TON = 1;
    4154:	11 e1 a8    	bset.b    0x111, #0x7

    avg_result = 0;
    4156:	60 00 b8    	mul.uu    w0, #0x0, w0
    4158:	00 8f be    	mov.d     w0, [w14]
    for (i = 163; i > 0; i--) {
    415a:	30 0a 20    	mov.w     #0xa3, w0
    415c:	20 07 98    	mov.w     w0, [w14+4]
    415e:	0d 00 37    	bra       0x417a <.L46>

00004160 <.L48>:
        avg_result += adc18_meas_ch2();
    4160:	4a fe 07    	rcall     0x3df6 <_adc18_meas_ch2> <.LFB14> <.LFE13>
    4162:	1e 0f 40    	add.w     w0, [w14], [w14]
    4164:	5e 97 48    	addc.w    w1, [++w14], [w14--]

        while (IFS0bits.T2IF == 0) {}
    4166:	00 00 00    	nop       

00004168 <.L47>:
    4168:	21 04 80    	mov.w     0x84, w1
    416a:	00 08 20    	mov.w     #0x80, w0
    416c:	00 80 60    	and.w     w1, w0, w0
    416e:	00 00 e0    	cp0.w     w0
    4170:	fb ff 32    	bra       Z, 0x4168 <.L47>
        IFS0bits.T2IF = 0;
    4172:	84 e0 a9    	bclr.b    0x84, #0x7
    4174:	2e 00 90    	mov.w     [w14+4], w0
    4176:	00 00 e9    	dec.w     w0, w0
    4178:	20 07 98    	mov.w     w0, [w14+4]

0000417a <.L46>:
    417a:	2e 00 90    	mov.w     [w14+4], w0
    417c:	00 00 e0    	cp0.w     w0
    417e:	f0 ff 3a    	bra       NZ, 0x4160 <.L48>
    }

    // Stop Timer2
    T2CONbits.TON = 0;
    4180:	11 e1 a9    	bclr.b    0x111, #0x7

    return avg_result / 163;
    4182:	1e 00 be    	mov.d     [w14], w0
    4184:	32 0a 20    	mov.w     #0xa3, w2
    4186:	03 00 20    	mov.w     #0x0, w3
    4188:	3c e9 07    	rcall     0x1402 <___divsi3> <.L0> <.L0>
}
    418a:	00 80 fa    	ulnk      
    418c:	00 00 06    	return    

0000418e <_adc18_meas_both_avg>:

void adc18_meas_both_avg(int32_t *ch1val, int32_t *ch2val) {
    418e:	0e 00 fa    	lnk       #0xe
    4190:	50 07 98    	mov.w     w0, [w14+10]
    4192:	61 07 98    	mov.w     w1, [w14+12]
    int32_t val1, val2;
    uint16_t i;

    // Lower Timer2 interrupt flag and start Timer2
    IFS0bits.T2IF = 0;
    4194:	84 e0 a9    	bclr.b    0x84, #0x7
    TMR2 = 0;
    4196:	06 21 ef    	clr.w     0x106
    T2CONbits.TON = 1;
    4198:	11 e1 a8    	bset.b    0x111, #0x7

    *ch1val = 0;
    419a:	5e 01 90    	mov.w     [w14+10], w2
    419c:	60 00 b8    	mul.uu    w0, #0x0, w0
    419e:	00 89 be    	mov.d     w0, [w2]
    *ch2val = 0;
    41a0:	6e 01 90    	mov.w     [w14+12], w2
    41a2:	60 00 b8    	mul.uu    w0, #0x0, w0
    41a4:	00 89 be    	mov.d     w0, [w2]
    for (i = 163; i > 0; i--) {
    41a6:	30 0a 20    	mov.w     #0xa3, w0
    41a8:	00 0f 78    	mov.w     w0, [w14]
    41aa:	1b 00 37    	bra       0x41e2 <.L50>

000041ac <.L52>:
        adc18_meas_both(&val1, &val2);
    41ac:	e6 00 47    	add.w     w14, #0x6, w1
    41ae:	0e 80 e8    	inc2.w    w14, w0
    41b0:	a7 fe 07    	rcall     0x3f00 <_adc18_meas_both> <.LFB15> <.LFE14>
        *ch1val += val1;
    41b2:	5e 00 90    	mov.w     [w14+10], w0
    41b4:	10 01 be    	mov.d     [w0], w2
    41b6:	1e 00 90    	mov.w     [w14+2], w0
    41b8:	ae 00 90    	mov.w     [w14+4], w1
    41ba:	02 00 40    	add.w     w0, w2, w0
    41bc:	83 80 48    	addc.w    w1, w3, w1
    41be:	5e 01 90    	mov.w     [w14+10], w2
    41c0:	00 89 be    	mov.d     w0, [w2]
        *ch2val += val2;
    41c2:	6e 00 90    	mov.w     [w14+12], w0
    41c4:	10 01 be    	mov.d     [w0], w2
    41c6:	3e 00 90    	mov.w     [w14+6], w0
    41c8:	ce 00 90    	mov.w     [w14+8], w1
    41ca:	02 00 40    	add.w     w0, w2, w0
    41cc:	83 80 48    	addc.w    w1, w3, w1
    41ce:	6e 01 90    	mov.w     [w14+12], w2
    41d0:	00 89 be    	mov.d     w0, [w2]

        while (IFS0bits.T2IF == 0) {}
    41d2:	00 00 00    	nop       

000041d4 <.L51>:
    41d4:	21 04 80    	mov.w     0x84, w1
    41d6:	00 08 20    	mov.w     #0x80, w0
    41d8:	00 80 60    	and.w     w1, w0, w0
    41da:	00 00 e0    	cp0.w     w0
    41dc:	fb ff 32    	bra       Z, 0x41d4 <.L51>
        IFS0bits.T2IF = 0;
    41de:	84 e0 a9    	bclr.b    0x84, #0x7
    41e0:	1e 0f e9    	dec.w     [w14], [w14]

000041e2 <.L50>:
    41e2:	1e 00 78    	mov.w     [w14], w0
    41e4:	00 00 e0    	cp0.w     w0
    41e6:	e2 ff 3a    	bra       NZ, 0x41ac <.L52>
    }

    // Stop Timer2
    T2CONbits.TON = 0;
    41e8:	11 e1 a9    	bclr.b    0x111, #0x7

    *ch1val = (*ch1val) / 163;
    41ea:	5e 00 90    	mov.w     [w14+10], w0
    41ec:	10 00 be    	mov.d     [w0], w0
    41ee:	32 0a 20    	mov.w     #0xa3, w2
    41f0:	03 00 20    	mov.w     #0x0, w3
    41f2:	07 e9 07    	rcall     0x1402 <___divsi3> <.L0> <.L0>
    41f4:	5e 01 90    	mov.w     [w14+10], w2
    41f6:	00 89 be    	mov.d     w0, [w2]
    *ch2val = (*ch2val) / 163;
    41f8:	6e 00 90    	mov.w     [w14+12], w0
    41fa:	10 00 be    	mov.d     [w0], w0
    41fc:	32 0a 20    	mov.w     #0xa3, w2
    41fe:	03 00 20    	mov.w     #0x0, w3
    4200:	00 e9 07    	rcall     0x1402 <___divsi3> <.L0> <.L0>
    4202:	6e 01 90    	mov.w     [w14+12], w2
    4204:	00 89 be    	mov.d     w0, [w2]
}
    4206:	00 80 fa    	ulnk      
    4208:	00 00 06    	return    

0000420a <_init_ble>:

// Functions relating to the BLE module (RN4871)
void init_ble(void) {
    420a:	06 00 fa    	lnk       #0x6
    uint8_t *RPOR, *RPINR;
    uint16_t i;

    RPOR = (uint8_t *)&RPOR0;
    420c:	00 6c 20    	mov.w     #0x6c0, w0
    420e:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    4210:	00 68 20    	mov.w     #0x680, w0
    4212:	20 07 98    	mov.w     w0, [w14+4]

    // Configure BLE module pins
    BLE_RST_N_DIR = OUT; BLE_RST_N = 1;
    4214:	e0 e2 a9    	bclr.b    0x2e0, #0x7
    4216:	e4 e2 a8    	bset.b    0x2e4, #0x7
    BLE_RX_DIR = OUT; BLE_RX = 1;
    4218:	c8 22 a9    	bclr.b    0x2c8, #0x1
    421a:	ca 22 a8    	bset.b    0x2ca, #0x1
    BLE_TX_DIR = IN;
    421c:	c8 42 a8    	bset.b    0x2c8, #0x2
    BLE_CTS_DIR = OUT; BLE_CTS = 1;
    421e:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    4220:	f2 c2 a8    	bset.b    0x2f2, #0x6
    BLE_RTS_DIR = IN;
    4222:	c8 a2 a8    	bset.b    0x2c8, #0x5

    // Configure BLE pins to use UART1
    __builtin_write_OSCCONL(OSCCON & 0xBF);
    4224:	11 3a 80    	mov.w     0x742, w1
    4226:	f0 0b 20    	mov.w     #0xbf, w0
    4228:	00 81 60    	and.w     w1, w0, w2
    422a:	60 04 20    	mov.w     #0x46, w0
    422c:	71 05 20    	mov.w     #0x57, w1
    422e:	23 74 20    	mov.w     #0x742, w3
    4230:	80 49 78    	mov.b     w0, [w3]
    4232:	81 49 78    	mov.b     w1, [w3]
    4234:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = BLE_TX_RP;
    4236:	2e 00 90    	mov.w     [w14+4], w0
    4238:	40 02 b0    	add.w     #0x24, w0
    423a:	d1 c0 b3    	mov.b     #0xd, w1
    423c:	01 48 78    	mov.b     w1, [w0]
    RPOR[BLE_RX_RP] = U1TX_RP;
    423e:	1e 00 90    	mov.w     [w14+2], w0
    4240:	00 00 e8    	inc.w     w0, w0
    4242:	31 c0 b3    	mov.b     #0x3, w1
    4244:	01 48 78    	mov.b     w1, [w0]
    RPINR[U1CTS_RP] = BLE_RTS_RP;
    4246:	2e 00 90    	mov.w     [w14+4], w0
    4248:	50 02 b0    	add.w     #0x25, w0
    424a:	21 c1 b3    	mov.b     #0x12, w1
    424c:	01 48 78    	mov.b     w1, [w0]
    RPOR[BLE_CTS_RP] = U1RTS_RP;
    424e:	1e 00 90    	mov.w     [w14+2], w0
    4250:	75 00 40    	add.w     w0, #0x15, w0
    4252:	41 c0 b3    	mov.b     #0x4, w1
    4254:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    4256:	10 3a 80    	mov.w     0x742, w0
    4258:	00 01 78    	mov.w     w0, w2
    425a:	02 60 a0    	bset.w    w2, #0x6
    425c:	60 04 20    	mov.w     #0x46, w0
    425e:	71 05 20    	mov.w     #0x57, w1
    4260:	23 74 20    	mov.w     #0x742, w3
    4262:	80 49 78    	mov.b     w0, [w3]
    4264:	81 49 78    	mov.b     w1, [w3]
    4266:	82 49 78    	mov.b     w2, [w3]

#ifdef NO_FLOW_CONTROL
    U1MODE = 0x0008;            // configure UART1 for transmission at
    U1BRG = 0x0022;             //   115,200 baud, no parity, 1 stop bit
#else
    U1MODE = 0x0208;            // configure UART1 for transmission at
    4268:	80 20 20    	mov.w     #0x208, w0
    426a:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;             //   115,200 baud, no parity, 1 stop bit
    426c:	20 02 20    	mov.w     #0x22, w0
    426e:	40 11 88    	mov.w     w0, 0x228
                                //   with hardware flow control
#endif

    U1TXbuffer.data = U1TX_buffer;
    4270:	20 88 20    	mov.w     #0x882, w0
    4272:	70 43 88    	mov.w     w0, 0x86e
    U1TXbuffer.length = U1TX_BUFFER_LENGTH;
    4274:	00 40 20    	mov.w     #0x400, w0
    4276:	80 43 88    	mov.w     w0, 0x870
    U1TXbuffer.head = 0;
    4278:	00 00 eb    	clr.w     w0
    427a:	90 43 88    	mov.w     w0, 0x872
    U1TXbuffer.tail = 0;
    427c:	00 00 eb    	clr.w     w0
    427e:	a0 43 88    	mov.w     w0, 0x874
    U1TXbuffer.count = 0;
    4280:	00 00 eb    	clr.w     w0
    4282:	b0 43 88    	mov.w     w0, 0x876
    U1TXthreshold = 3 * U1TX_BUFFER_LENGTH / 4;
    4284:	00 30 20    	mov.w     #0x300, w0
    4286:	d0 42 88    	mov.w     w0, 0x85a

    U1RXbuffer.data = U1RX_buffer;
    4288:	20 c8 20    	mov.w     #0xc82, w0
    428a:	c0 43 88    	mov.w     w0, 0x878
    U1RXbuffer.length = U1RX_BUFFER_LENGTH;
    428c:	00 40 20    	mov.w     #0x400, w0
    428e:	d0 43 88    	mov.w     w0, 0x87a
    U1RXbuffer.head = 0;
    4290:	00 00 eb    	clr.w     w0
    4292:	e0 43 88    	mov.w     w0, 0x87c
    U1RXbuffer.tail = 0;
    4294:	00 00 eb    	clr.w     w0
    4296:	f0 43 88    	mov.w     w0, 0x87e
    U1RXbuffer.count = 0;
    4298:	00 00 eb    	clr.w     w0
    429a:	00 44 88    	mov.w     w0, 0x880

    U1STAbits.UTXISEL1 = 0;     // set UART1 UTXISEL<1:0> = 01, TX interrupt
    429c:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;     //   when all transmit operations are done
    429e:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;        // lower UART1 TX interrupt flag
    42a0:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;        // enable UART1 TX interrupt
    42a2:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;        // lower UART1 RX interrupt flag
    42a4:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;        // enable UART1 RX interrupt
    42a6:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;      // enable UART1 module
    42a8:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;        // enable UART1 data transmission
    42aa:	23 42 a8    	bset.b    0x223, #0x2

    BLE_RST_N = 0;
    42ac:	e4 e2 a9    	bclr.b    0x2e4, #0x7
    for (i = 1000; i; i--) {}
    42ae:	80 3e 20    	mov.w     #0x3e8, w0
    42b0:	00 0f 78    	mov.w     w0, [w14]
    42b2:	01 00 37    	bra       0x42b6 <.L54>

000042b4 <.L55>:
    42b4:	1e 0f e9    	dec.w     [w14], [w14]

000042b6 <.L54>:
    42b6:	1e 00 78    	mov.w     [w14], w0
    42b8:	00 00 e0    	cp0.w     w0
    42ba:	fc ff 3a    	bra       NZ, 0x42b4 <.L55>
    BLE_RST_N = 1;
    42bc:	e4 e2 a8    	bset.b    0x2e4, #0x7
}
    42be:	00 80 fa    	ulnk      
    42c0:	00 00 06    	return    

000042c2 <_ble_in_waiting>:

uint16_t ble_in_waiting(void) {
    42c2:	00 00 fa    	lnk       #0x0
    return U1inWaiting();
    42c4:	24 00 07    	rcall     0x430e <_U1inWaiting> <.LFB30> <.LFE27>
}
    42c6:	00 80 fa    	ulnk      
    42c8:	00 00 06    	return    

000042ca <_ble_putc>:

void ble_putc(uint8_t ch) {
    42ca:	02 00 fa    	lnk       #0x2
    42cc:	00 4f 78    	mov.b     w0, [w14]
    U1putc(ch);
    42ce:	1e 40 78    	mov.b     [w14], w0
    42d0:	2b 00 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    U1flushTxBuffer();
    42d2:	21 00 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
}
    42d4:	00 80 fa    	ulnk      
    42d6:	00 00 06    	return    

000042d8 <_ble_getc>:

uint8_t ble_getc(void) {
    42d8:	00 00 fa    	lnk       #0x0
    return U1getc();
    42da:	46 00 07    	rcall     0x4368 <_U1getc> <.LFB33> <.LFE32>
}
    42dc:	00 80 fa    	ulnk      
    42de:	00 00 06    	return    

000042e0 <_ble_puts>:

void ble_puts(uint8_t *str) {
    42e0:	02 00 fa    	lnk       #0x2
    42e2:	00 0f 78    	mov.w     w0, [w14]
    U1puts(str);
    42e4:	1e 00 78    	mov.w     [w14], w0
    42e6:	5a 00 07    	rcall     0x439c <_U1puts> <.LFB34> <.LFE33>
    U1flushTxBuffer();
    42e8:	16 00 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
}
    42ea:	00 80 fa    	ulnk      
    42ec:	00 00 06    	return    

000042ee <_dummy_in_waiting>:

uint16_t dummy_in_waiting(void) {
    42ee:	00 00 fa    	lnk       #0x0
    return 0;
    42f0:	00 00 eb    	clr.w     w0
}
    42f2:	00 80 fa    	ulnk      
    42f4:	00 00 06    	return    

000042f6 <_dummy_putc>:

void dummy_putc(uint8_t ch) {
    42f6:	02 00 fa    	lnk       #0x2
    42f8:	00 4f 78    	mov.b     w0, [w14]
    // Do nothing...
}
    42fa:	00 80 fa    	ulnk      
    42fc:	00 00 06    	return    

000042fe <_dummy_getc>:

uint8_t dummy_getc(void) {
    42fe:	00 00 fa    	lnk       #0x0
    return 0;
    4300:	00 40 eb    	clr.b     w0
}
    4302:	00 80 fa    	ulnk      
    4304:	00 00 06    	return    

00004306 <_dummy_puts>:

void dummy_puts(uint8_t *str) {
    4306:	02 00 fa    	lnk       #0x2
    4308:	00 0f 78    	mov.w     w0, [w14]
    // Do nothing...
}
    430a:	00 80 fa    	ulnk      
    430c:	00 00 06    	return    

0000430e <_U1inWaiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1TXbuffer.count == 0)      // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1TXbuffer.count != 0)) {
        disable_interrupts();
        ch = U1TXbuffer.data[U1TXbuffer.head];
        U1TXbuffer.head++;
        if (U1TXbuffer.head == U1TXbuffer.length)
            U1TXbuffer.head = 0;
        U1TXbuffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1RXbuffer.count != U1RXbuffer.length)) {
        disable_interrupts();
        U1RXbuffer.data[U1RXbuffer.tail] = (uint8_t)U1RXREG;
        U1RXbuffer.tail++;
        if (U1RXbuffer.tail == U1RXbuffer.length)
            U1RXbuffer.tail = 0;
        U1RXbuffer.count++;
        enable_interrupts();
    }
}

uint16_t U1inWaiting(void) {
    430e:	00 00 fa    	lnk       #0x0
    return U1RXbuffer.count;
    4310:	00 44 80    	mov.w     0x880, w0
}
    4312:	00 80 fa    	ulnk      
    4314:	00 00 06    	return    

00004316 <_U1flushTxBuffer>:

void U1flushTxBuffer(void) {
    4316:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    4318:	11 11 80    	mov.w     0x222, w1
    431a:	00 40 20    	mov.w     #0x400, w0
    431c:	00 80 60    	and.w     w1, w0, w0
    431e:	00 00 e0    	cp0.w     w0
    4320:	01 00 3a    	bra       NZ, 0x4324 <.L77>
        U1STAbits.UTXEN = 1;        //   enable it
    4322:	23 42 a8    	bset.b    0x223, #0x2

00004324 <.L77>:
}
    4324:	00 80 fa    	ulnk      
    4326:	00 00 06    	return    

00004328 <_U1putc>:

void U1putc(uint8_t ch) {
    4328:	02 00 fa    	lnk       #0x2
    432a:	00 4f 78    	mov.b     w0, [w14]
    while (U1TXbuffer.count == U1TXbuffer.length) {}    // wait until UART1 TX 
    432c:	00 00 00    	nop       

0000432e <.L80>:
    432e:	b1 43 80    	mov.w     0x876, w1
    4330:	80 43 80    	mov.w     0x870, w0
    4332:	80 8f 50    	sub.w     w1, w0, [w15]
    4334:	fc ff 32    	bra       Z, 0x432e <.L80>
                                                        //   buffer is not full
    disable_interrupts();
    4336:	ff 3f fc    	disi      #0x3fff
    U1TXbuffer.data[U1TXbuffer.tail] = ch;
    4338:	71 43 80    	mov.w     0x86e, w1
    433a:	a0 43 80    	mov.w     0x874, w0
    433c:	00 80 40    	add.w     w1, w0, w0
    433e:	1e 48 78    	mov.b     [w14], [w0]
    U1TXbuffer.tail++;
    4340:	a0 43 80    	mov.w     0x874, w0
    4342:	00 00 e8    	inc.w     w0, w0
    4344:	a0 43 88    	mov.w     w0, 0x874
    if (U1TXbuffer.tail == U1TXbuffer.length)
    4346:	a1 43 80    	mov.w     0x874, w1
    4348:	80 43 80    	mov.w     0x870, w0
    434a:	80 8f 50    	sub.w     w1, w0, [w15]
    434c:	02 00 3a    	bra       NZ, 0x4352 <.L81>
        U1TXbuffer.tail = 0;
    434e:	00 00 eb    	clr.w     w0
    4350:	a0 43 88    	mov.w     w0, 0x874

00004352 <.L81>:
    U1TXbuffer.count++;
    4352:	b0 43 80    	mov.w     0x876, w0
    4354:	00 00 e8    	inc.w     w0, w0
    4356:	b0 43 88    	mov.w     w0, 0x876
    enable_interrupts();
    4358:	52 20 ef    	clr.w     0x52

    if (U1TXbuffer.count >= U1TXthreshold)          // if UART1 TX buffer is 
    435a:	b1 43 80    	mov.w     0x876, w1
    435c:	d0 42 80    	mov.w     0x85a, w0
    435e:	80 8f 50    	sub.w     w1, w0, [w15]
    4360:	01 00 39    	bra       NC, 0x4364 <.L79>
        U1STAbits.UTXEN = 1;                        //   full enough, enable 
    4362:	23 42 a8    	bset.b    0x223, #0x2

00004364 <.L79>:
                                                    //   data transmission
}
    4364:	00 80 fa    	ulnk      
    4366:	00 00 06    	return    

00004368 <_U1getc>:

uint8_t U1getc(void) {
    4368:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (U1RXbuffer.count == 0) {}    // wait until UART1 RX buffer is not empty
    436a:	00 00 00    	nop       

0000436c <.L84>:
    436c:	00 44 80    	mov.w     0x880, w0
    436e:	00 00 e0    	cp0.w     w0
    4370:	fd ff 32    	bra       Z, 0x436c <.L84>

    disable_interrupts();
    4372:	ff 3f fc    	disi      #0x3fff
    ch = U1RXbuffer.data[U1RXbuffer.head];
    4374:	c1 43 80    	mov.w     0x878, w1
    4376:	e0 43 80    	mov.w     0x87c, w0
    4378:	00 80 40    	add.w     w1, w0, w0
    437a:	10 4f 78    	mov.b     [w0], [w14]
    U1RXbuffer.head++;
    437c:	e0 43 80    	mov.w     0x87c, w0
    437e:	00 00 e8    	inc.w     w0, w0
    4380:	e0 43 88    	mov.w     w0, 0x87c
    if (U1RXbuffer.head == U1RXbuffer.length)
    4382:	e1 43 80    	mov.w     0x87c, w1
    4384:	d0 43 80    	mov.w     0x87a, w0
    4386:	80 8f 50    	sub.w     w1, w0, [w15]
    4388:	02 00 3a    	bra       NZ, 0x438e <.L85>
        U1RXbuffer.head = 0;
    438a:	00 00 eb    	clr.w     w0
    438c:	e0 43 88    	mov.w     w0, 0x87c

0000438e <.L85>:
    U1RXbuffer.count--;
    438e:	00 44 80    	mov.w     0x880, w0
    4390:	00 00 e9    	dec.w     w0, w0
    4392:	00 44 88    	mov.w     w0, 0x880
    enable_interrupts();
    4394:	52 20 ef    	clr.w     0x52

    return ch;
    4396:	1e 40 78    	mov.b     [w14], w0
}
    4398:	00 80 fa    	ulnk      
    439a:	00 00 06    	return    

0000439c <_U1puts>:

void U1puts(uint8_t *str) {
    439c:	02 00 fa    	lnk       #0x2
    439e:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    43a0:	04 00 37    	bra       0x43aa <.L87>

000043a2 <.L88>:
        U1putc(*str++);
    43a2:	1e 00 78    	mov.w     [w14], w0
    43a4:	10 40 78    	mov.b     [w0], w0
    43a6:	1e 0f e8    	inc.w     [w14], [w14]
    43a8:	bf ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>

000043aa <.L87>:
    43aa:	1e 00 78    	mov.w     [w14], w0
    43ac:	10 40 78    	mov.b     [w0], w0
    43ae:	00 04 e0    	cp0.b     w0
    43b0:	f8 ff 3a    	bra       NZ, 0x43a2 <.L88>
    U1flushTxBuffer();
    43b2:	b1 ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
}
    43b4:	00 80 fa    	ulnk      
    43b6:	00 00 06    	return    

000043b8 <_U1gets>:

void U1gets(uint8_t *str, uint16_t len) {
    43b8:	04 00 fa    	lnk       #0x4
    43ba:	00 0f 78    	mov.w     w0, [w14]
    43bc:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    43be:	1e 00 90    	mov.w     [w14+2], w0
    43c0:	00 00 e0    	cp0.w     w0
    43c2:	1a 00 32    	bra       Z, 0x43f8 <.L94>
        return;

    if (len == 1) {
    43c4:	1e 00 90    	mov.w     [w14+2], w0
    43c6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    43c8:	04 00 3a    	bra       NZ, 0x43d2 <.L92>
        *str = '\0';
    43ca:	1e 00 78    	mov.w     [w14], w0
    43cc:	80 40 eb    	clr.b     w1
    43ce:	01 48 78    	mov.b     w1, [w0]
        return;
    43d0:	14 00 37    	bra       0x43fa <.L89>

000043d2 <.L92>:
    }

    while (1) {
        *str = U1getc();
    43d2:	ca ff 07    	rcall     0x4368 <_U1getc> <.LFB33> <.LFE32>
    43d4:	9e 00 78    	mov.w     [w14], w1
    43d6:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    43d8:	1e 00 78    	mov.w     [w14], w0
    43da:	10 40 78    	mov.b     [w0], w0
    43dc:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    43de:	08 00 32    	bra       Z, 0x43f0 <.L93>
    43e0:	1e 00 90    	mov.w     [w14+2], w0
    43e2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    43e4:	05 00 32    	bra       Z, 0x43f0 <.L93>
            break;
        str++;
    43e6:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    43e8:	1e 00 90    	mov.w     [w14+2], w0
    43ea:	00 00 e9    	dec.w     w0, w0
    43ec:	10 07 98    	mov.w     w0, [w14+2]
    }
    43ee:	f1 ff 37    	bra       0x43d2 <.L92>

000043f0 <.L93>:
    *str = '\0';
    43f0:	1e 00 78    	mov.w     [w14], w0
    43f2:	80 40 eb    	clr.b     w1
    43f4:	01 48 78    	mov.b     w1, [w0]
    43f6:	01 00 37    	bra       0x43fa <.L89>

000043f8 <.L94>:
    43f8:	00 00 00    	nop       

000043fa <.L89>:
}
    43fa:	00 80 fa    	ulnk      
    43fc:	00 00 06    	return    

000043fe <_U1gets_term>:

void U1gets_term(uint8_t *str, uint16_t len) {
    43fe:	08 00 fa    	lnk       #0x8
    4400:	20 07 98    	mov.w     w0, [w14+4]
    4402:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    4404:	3e 00 90    	mov.w     [w14+6], w0
    4406:	00 00 e0    	cp0.w     w0
    4408:	6f 00 32    	bra       Z, 0x44e8 <.L108>
        return;

    if (len == 1) {
    440a:	3e 00 90    	mov.w     [w14+6], w0
    440c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    440e:	04 00 3a    	bra       NZ, 0x4418 <.L98>
        *str = '\0';
    4410:	2e 00 90    	mov.w     [w14+4], w0
    4412:	80 40 eb    	clr.b     w1
    4414:	01 48 78    	mov.b     w1, [w0]
        return;
    4416:	69 00 37    	bra       0x44ea <.L95>

00004418 <.L98>:
    }

    U1putc(0x1B);                           // save current cursor position
    4418:	b0 c1 b3    	mov.b     #0x1b, w0
    441a:	86 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    U1putc('7');
    441c:	70 c3 b3    	mov.b     #0x37, w0
    441e:	84 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    U1flushTxBuffer();
    4420:	7a ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    start = str;
    4422:	ae 00 90    	mov.w     [w14+4], w1
    4424:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    4426:	be 00 90    	mov.w     [w14+6], w1
    4428:	01 0f 78    	mov.w     w1, [w14]
    442a:	03 00 37    	bra       0x4432 <.L107>

0000442c <.L109>:
    while (1) {
        *str = U1getc();                    // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1putc(0x1B);                   //   restore cursor position,
            U1putc('8');
            U1putc(0x1B);                   //   clear to end of line, and
            U1putc('[');
            U1putc('K');
            U1flushTxBuffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1putc('\b');               //   erase the last character and
                U1putc(' ');
                U1putc('\b');
                U1flushTxBuffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1putc('\a');               //   send alert/bell character
                U1flushTxBuffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1putc('\a');                   //   send alert/bell character
            U1flushTxBuffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1putc(*str);                   //   echo the received character
            U1flushTxBuffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    442c:	00 00 00    	nop       
    442e:	01 00 37    	bra       0x4432 <.L107>

00004430 <.L110>:
    4430:	00 00 00    	nop       

00004432 <.L107>:
    4432:	9a ff 07    	rcall     0x4368 <_U1getc> <.LFB33> <.LFE32>
    4434:	ae 00 90    	mov.w     [w14+4], w1
    4436:	80 48 78    	mov.b     w0, [w1]
    4438:	2e 00 90    	mov.w     [w14+4], w0
    443a:	10 40 78    	mov.b     [w0], w0
    443c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    443e:	09 00 3a    	bra       NZ, 0x4452 <.L99>
    *str = '\0';                            // terminarte the string with null
    4440:	2e 00 90    	mov.w     [w14+4], w0
    4442:	80 40 eb    	clr.b     w1
    4444:	01 48 78    	mov.b     w1, [w0]
    U1putc('\n');                           // send newline and
    4446:	a0 c0 b3    	mov.b     #0xa, w0
    4448:	6f ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    U1putc('\r');                           //   carriage return
    444a:	d0 c0 b3    	mov.b     #0xd, w0
    444c:	6d ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    U1flushTxBuffer();
    444e:	63 ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    4450:	4c 00 37    	bra       0x44ea <.L95>

00004452 <.L99>:
    4452:	2e 00 90    	mov.w     [w14+4], w0
    4454:	10 40 78    	mov.b     [w0], w0
    4456:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    4458:	10 00 3a    	bra       NZ, 0x447a <.L100>
    445a:	b0 c1 b3    	mov.b     #0x1b, w0
    445c:	65 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    445e:	80 c3 b3    	mov.b     #0x38, w0
    4460:	63 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    4462:	b0 c1 b3    	mov.b     #0x1b, w0
    4464:	61 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    4466:	b0 c5 b3    	mov.b     #0x5b, w0
    4468:	5f ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    446a:	b0 c4 b3    	mov.b     #0x4b, w0
    446c:	5d ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    446e:	53 ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    4470:	9e 00 90    	mov.w     [w14+2], w1
    4472:	21 07 98    	mov.w     w1, [w14+4]
    4474:	be 00 90    	mov.w     [w14+6], w1
    4476:	01 0f 78    	mov.w     w1, [w14]
    4478:	36 00 37    	bra       0x44e6 <.L101>

0000447a <.L100>:
    447a:	2e 00 90    	mov.w     [w14+4], w0
    447c:	10 40 78    	mov.b     [w0], w0
    447e:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    4480:	05 00 32    	bra       Z, 0x448c <.L102>
    4482:	2e 00 90    	mov.w     [w14+4], w0
    4484:	90 40 78    	mov.b     [w0], w1
    4486:	f0 c7 b3    	mov.b     #0x7f, w0
    4488:	80 cf 50    	sub.b     w1, w0, [w15]
    448a:	14 00 3a    	bra       NZ, 0x44b4 <.L103>

0000448c <.L102>:
    448c:	ae 00 90    	mov.w     [w14+4], w1
    448e:	1e 00 90    	mov.w     [w14+2], w0
    4490:	80 8f 50    	sub.w     w1, w0, [w15]
    4492:	0c 00 36    	bra       LEU, 0x44ac <.L104>
    4494:	80 c0 b3    	mov.b     #0x8, w0
    4496:	48 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    4498:	00 c2 b3    	mov.b     #0x20, w0
    449a:	46 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    449c:	80 c0 b3    	mov.b     #0x8, w0
    449e:	44 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    44a0:	3a ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    44a2:	2e 00 90    	mov.w     [w14+4], w0
    44a4:	00 00 e9    	dec.w     w0, w0
    44a6:	20 07 98    	mov.w     w0, [w14+4]
    44a8:	1e 0f e8    	inc.w     [w14], [w14]
    44aa:	03 00 37    	bra       0x44b2 <.L105>

000044ac <.L104>:
    44ac:	70 c0 b3    	mov.b     #0x7, w0
    44ae:	3c ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    44b0:	32 ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>

000044b2 <.L105>:
    44b2:	19 00 37    	bra       0x44e6 <.L101>

000044b4 <.L103>:
    44b4:	1e 00 78    	mov.w     [w14], w0
    44b6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    44b8:	04 00 3a    	bra       NZ, 0x44c2 <.L106>
    44ba:	70 c0 b3    	mov.b     #0x7, w0
    44bc:	35 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    44be:	2b ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    44c0:	12 00 37    	bra       0x44e6 <.L101>

000044c2 <.L106>:
    44c2:	2e 00 90    	mov.w     [w14+4], w0
    44c4:	10 40 78    	mov.b     [w0], w0
    44c6:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    44c8:	b1 ff 36    	bra       LEU, 0x442c <.L109>
    44ca:	2e 00 90    	mov.w     [w14+4], w0
    44cc:	90 40 78    	mov.b     [w0], w1
    44ce:	e0 c7 b3    	mov.b     #0x7e, w0
    44d0:	80 cf 50    	sub.b     w1, w0, [w15]
    44d2:	ae ff 3e    	bra       GTU, 0x4430 <.L110>
    44d4:	2e 00 90    	mov.w     [w14+4], w0
    44d6:	10 40 78    	mov.b     [w0], w0
    44d8:	27 ff 07    	rcall     0x4328 <_U1putc> <.LFB32> <.LFE31>
    44da:	1d ff 07    	rcall     0x4316 <_U1flushTxBuffer> <.LFB31> <.LFE30>
    44dc:	2e 00 90    	mov.w     [w14+4], w0
    44de:	00 00 e8    	inc.w     w0, w0
    44e0:	20 07 98    	mov.w     w0, [w14+4]
    44e2:	1e 0f e9    	dec.w     [w14], [w14]
    44e4:	a6 ff 37    	bra       0x4432 <.L107>

000044e6 <.L101>:
    44e6:	a5 ff 37    	bra       0x4432 <.L107>

000044e8 <.L108>:
    44e8:	00 00 00    	nop       

000044ea <.L95>:
}
    44ea:	00 80 fa    	ulnk      
    44ec:	00 00 06    	return    

000044ee <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    44ee:	06 00 fa    	lnk       #0x6
    44f0:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    44f2:	a0 4a 20    	mov.w     #0x4aa, w0
    44f4:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    44f6:	ce 40 90    	mov.b     [w14+4], w1
    44f8:	01 4f 78    	mov.b     w1, [w14]
    44fa:	13 00 37    	bra       0x4522 <.L2>

000044fc <.L3>:
        U1EP[ep] = ENDPT_DISABLED;
    44fc:	1e 80 fb    	ze        [w14], w0
    44fe:	00 00 40    	add.w     w0, w0, w0
    4500:	9e 00 90    	mov.w     [w14+2], w1
    4502:	00 80 40    	add.w     w1, w0, w0
    4504:	80 00 eb    	clr.w     w1
    4506:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    4508:	1e 80 fb    	ze        [w14], w0
    450a:	80 00 40    	add.w     w0, w0, w1
    450c:	20 5b 21    	mov.w     #0x15b2, w0
    450e:	00 80 40    	add.w     w1, w0, w0
    4510:	80 00 eb    	clr.w     w1
    4512:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    4514:	1e 80 fb    	ze        [w14], w0
    4516:	80 00 40    	add.w     w0, w0, w1
    4518:	20 5d 21    	mov.w     #0x15d2, w0
    451a:	00 80 40    	add.w     w1, w0, w0
    451c:	80 00 eb    	clr.w     w1
    451e:	01 08 78    	mov.w     w1, [w0]
    4520:	1e 4f e8    	inc.b     [w14], [w14]

00004522 <.L2>:
    4522:	1e 40 78    	mov.b     [w14], w0
    4524:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    4526:	ea ff 36    	bra       LEU, 0x44fc <.L3>
    }
}
    4528:	00 80 fa    	ulnk      
    452a:	00 00 06    	return    

0000452c <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    452c:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    452e:	60 5a 21    	mov.w     #0x15a6, w0
    4530:	10 40 78    	mov.b     [w0], w0
    4532:	00 80 fb    	ze        w0, w0
    4534:	b0 24 88    	mov.w     w0, 0x496
    4536:	b0 24 80    	mov.w     0x496, w0
    4538:	00 00 e0    	cp0.w     w0
    453a:	03 00 3a    	bra       NZ, 0x4542 <.L8>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    453c:	10 c0 b3    	mov.b     #0x1, w0
    453e:	30 e8 b7    	mov.b     WREG, 0x830
            break;
    4540:	02 00 37    	bra       0x4546 <.L7>

00004542 <.L8>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    4542:	20 c0 b3    	mov.b     #0x2, w0
    4544:	30 e8 b7    	mov.b     WREG, 0x830

00004546 <.L7>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    4546:	00 00 eb    	clr.w     w0
    4548:	90 ad 88    	mov.w     w0, 0x15b2
}
    454a:	00 80 fa    	ulnk      
    454c:	00 00 06    	return    

0000454e <_init_usb>:

void init_usb(void) {
    454e:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    4550:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    4552:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    4554:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    4556:	f0 0f 20    	mov.w     #0xff, w0
    4558:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    455a:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    455c:	00 40 eb    	clr.b     w0
    455e:	c7 ff 07    	rcall     0x44ee <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE36> <.Letext0> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    4560:	d0 00 20    	mov.w     #0xd, w0
    4562:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    4564:	00 60 21    	mov.w     #0x1600, w0
    4566:	01 c4 b3    	mov.b     #0x40, w1
    4568:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    456a:	00 68 21    	mov.w     #0x1680, w0
    456c:	10 b0 88    	mov.w     w0, 0x1602
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    456e:	10 60 21    	mov.w     #0x1601, w0
    4570:	81 c8 b3    	mov.b     #0x88, w1
    4572:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    4574:	00 6c 21    	mov.w     #0x16c0, w0
    4576:	30 b0 88    	mov.w     w0, 0x1606
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    4578:	50 60 21    	mov.w     #0x1605, w0
    457a:	81 c0 b3    	mov.b     #0x8, w1
    457c:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    457e:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    4580:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    4582:	00 60 21    	mov.w     #0x1600, w0
    4584:	48 00 de    	lsr.w     w0, #0x8, w0
    4586:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    4588:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    458a:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    458c:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    458e:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    4590:	2d 68 ef    	clr.b     0x82d
    USB_USWSTAT = POWERED_STATE;
    4592:	30 68 ef    	clr.b     0x830
    USB_device_status = 1;
    4594:	10 c0 b3    	mov.b     #0x1, w0
    4596:	2e e8 b7    	mov.b     WREG, 0x82e
    USB_request.setup.bmRequestType = NO_REQUEST;
    4598:	40 5a 21    	mov.w     #0x15a4, w0
    459a:	80 c0 eb    	setm.b    w1
    459c:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    459e:	50 5a 21    	mov.w     #0x15a5, w0
    45a0:	80 c0 eb    	setm.b    w1
    45a2:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    45a4:	00 00 eb    	clr.w     w0
    45a6:	70 ad 88    	mov.w     w0, 0x15ae
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    45a8:	00 00 eb    	clr.w     w0
    45aa:	80 ad 88    	mov.w     w0, 0x15b0
    while (U1CONbits.SE0) {}
    45ac:	00 00 00    	nop       

000045ae <.L10>:
    45ae:	a1 24 80    	mov.w     0x494, w1
    45b0:	00 04 20    	mov.w     #0x40, w0
    45b2:	00 80 60    	and.w     w1, w0, w0
    45b4:	00 00 e0    	cp0.w     w0
    45b6:	fb ff 3a    	bra       NZ, 0x45ae <.L10>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    U1EIE = 0xFF;
    IFS5bits.USB1IF = 0;
    IEC5bits.USB1IE = 1;
#endif
}
    45b8:	00 80 fa    	ulnk      
    45ba:	00 00 06    	return    

000045bc <_usb_service>:

void usb_service(void) {
    45bc:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    45be:	50 24 80    	mov.w     0x48a, w0
    45c0:	62 00 60    	and.w     w0, #0x2, w0
    45c2:	00 00 e0    	cp0.w     w0
    45c4:	05 00 32    	bra       Z, 0x45d0 <.L12>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    45c6:	f0 0f 20    	mov.w     #0xff, w0
    45c8:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    45ca:	20 00 20    	mov.w     #0x2, w0
    45cc:	50 24 88    	mov.w     w0, 0x48a
    45ce:	ba 00 37    	bra       0x4744 <.L13>

000045d0 <.L12>:
    } else if (U1IRbits.SOFIF) {
    45d0:	50 24 80    	mov.w     0x48a, w0
    45d2:	64 00 60    	and.w     w0, #0x4, w0
    45d4:	00 00 e0    	cp0.w     w0
    45d6:	03 00 32    	bra       Z, 0x45de <.L14>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    45d8:	40 00 20    	mov.w     #0x4, w0
    45da:	50 24 88    	mov.w     w0, 0x48a
    45dc:	b3 00 37    	bra       0x4744 <.L13>

000045de <.L14>:
    } else if (U1IRbits.IDLEIF) {
    45de:	50 24 80    	mov.w     0x48a, w0
    45e0:	70 00 60    	and.w     w0, #0x10, w0
    45e2:	00 00 e0    	cp0.w     w0
    45e4:	03 00 32    	bra       Z, 0x45ec <.L15>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    45e6:	00 01 20    	mov.w     #0x10, w0
    45e8:	50 24 88    	mov.w     w0, 0x48a
    45ea:	ac 00 37    	bra       0x4744 <.L13>

000045ec <.L15>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    45ec:	51 24 80    	mov.w     0x48a, w1
    45ee:	00 02 20    	mov.w     #0x20, w0
    45f0:	00 80 60    	and.w     w1, w0, w0
    45f2:	00 00 e0    	cp0.w     w0
    45f4:	03 00 32    	bra       Z, 0x45fc <.L16>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    45f6:	00 02 20    	mov.w     #0x20, w0
    45f8:	50 24 88    	mov.w     w0, 0x48a
    45fa:	a4 00 37    	bra       0x4744 <.L13>

000045fc <.L16>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    45fc:	51 24 80    	mov.w     0x48a, w1
    45fe:	00 08 20    	mov.w     #0x80, w0
    4600:	00 80 60    	and.w     w1, w0, w0
    4602:	00 00 e0    	cp0.w     w0
    4604:	03 00 32    	bra       Z, 0x460c <.L17>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    4606:	00 08 20    	mov.w     #0x80, w0
    4608:	50 24 88    	mov.w     w0, 0x48a
    460a:	9c 00 37    	bra       0x4744 <.L13>

0000460c <.L17>:
    } else if (U1IRbits.URSTIF) {
    460c:	50 24 80    	mov.w     0x48a, w0
    460e:	61 00 60    	and.w     w0, #0x1, w0
    4610:	00 00 e0    	cp0.w     w0
    4612:	27 00 32    	bra       Z, 0x4662 <.L18>
        USB_curr_config = 0;
    4614:	2d 68 ef    	clr.b     0x82d
        while (U1IRbits.TRNIF) {
    4616:	08 00 37    	bra       0x4628 <.L19>

00004618 <.L20>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    4618:	80 00 20    	mov.w     #0x8, w0
    461a:	50 24 88    	mov.w     w0, 0x48a
	...

00004628 <.L19>:
    4628:	50 24 80    	mov.w     0x48a, w0
    462a:	68 00 60    	and.w     w0, #0x8, w0
    462c:	00 00 e0    	cp0.w     w0
    462e:	f4 ff 3a    	bra       NZ, 0x4618 <.L20>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    4630:	00 40 eb    	clr.b     w0
    4632:	5d ff 07    	rcall     0x44ee <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE36> <.Letext0> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    4634:	00 60 21    	mov.w     #0x1600, w0
    4636:	01 c4 b3    	mov.b     #0x40, w1
    4638:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    463a:	00 68 21    	mov.w     #0x1680, w0
    463c:	10 b0 88    	mov.w     w0, 0x1602
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    463e:	10 60 21    	mov.w     #0x1601, w0
    4640:	81 c8 b3    	mov.b     #0x88, w1
    4642:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    4644:	00 6c 21    	mov.w     #0x16c0, w0
    4646:	30 b0 88    	mov.w     w0, 0x1606
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    4648:	50 60 21    	mov.w     #0x1605, w0
    464a:	81 c0 b3    	mov.b     #0x8, w1
    464c:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    464e:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    4650:	f0 0f 20    	mov.w     #0xff, w0
    4652:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    4654:	d0 00 20    	mov.w     #0xd, w0
    4656:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    4658:	10 c0 b3    	mov.b     #0x1, w0
    465a:	30 e8 b7    	mov.b     WREG, 0x830
        USB_device_status = 1;              // self powered, remote wakeup disabled
    465c:	10 c0 b3    	mov.b     #0x1, w0
    465e:	2e e8 b7    	mov.b     WREG, 0x82e
    4660:	71 00 37    	bra       0x4744 <.L13>

00004662 <.L18>:
    } else if (U1IRbits.TRNIF) {
    4662:	50 24 80    	mov.w     0x48a, w0
    4664:	68 00 60    	and.w     w0, #0x8, w0
    4666:	00 00 e0    	cp0.w     w0
    4668:	6d 00 32    	bra       Z, 0x4744 <.L13>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    466a:	90 24 80    	mov.w     0x492, w0
    466c:	43 00 de    	lsr.w     w0, #0x3, w0
    466e:	c2 00 dd    	sl.w      w0, #0x2, w1
    4670:	00 60 21    	mov.w     #0x1600, w0
    4672:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    4674:	1e 00 78    	mov.w     [w14], w0
    4676:	10 40 90    	mov.b     [w0+1], w0
    4678:	21 e8 b7    	mov.b     WREG, 0x821
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    467a:	1e 00 78    	mov.w     [w14], w0
    467c:	10 40 78    	mov.b     [w0], w0
    467e:	20 e8 b7    	mov.b     WREG, 0x820
        USB_buffer_desc.address = buf_desc_ptr->address;
    4680:	1e 00 78    	mov.w     [w14], w0
    4682:	10 00 90    	mov.w     [w0+2], w0
    4684:	10 41 88    	mov.w     w0, 0x822
        USB_USTAT = U1STAT;                 // save the USB status register
    4686:	90 24 80    	mov.w     0x492, w0
    4688:	00 40 78    	mov.b     w0, w0
    468a:	2f e8 b7    	mov.b     WREG, 0x82f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    468c:	80 00 20    	mov.w     #0x8, w0
    468e:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    4690:	2c 68 ef    	clr.b     0x82c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    4692:	21 c8 bf    	mov.b     0x821, WREG
    4694:	80 80 fb    	ze        w0, w1
    4696:	c0 03 20    	mov.w     #0x3c, w0
    4698:	00 80 60    	and.w     w1, w0, w0
    469a:	41 02 20    	mov.w     #0x24, w1
    469c:	81 0f 50    	sub.w     w0, w1, [w15]
    469e:	08 00 32    	bra       Z, 0x46b0 <.L23>
    46a0:	41 03 20    	mov.w     #0x34, w1
    46a2:	81 0f 50    	sub.w     w0, w1, [w15]
    46a4:	03 00 32    	bra       Z, 0x46ac <.L24>
    46a6:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    46a8:	17 00 32    	bra       Z, 0x46d8 <.L22>
    46aa:	3d 00 37    	bra       0x4726 <.L21>

000046ac <.L24>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    46ac:	4e 00 07    	rcall     0x474a <_usb_process_setup_token> <.LFB4> <.LFE3>
                break;
    46ae:	3b 00 37    	bra       0x4726 <.L21>

000046b0 <.L23>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    46b0:	2f c8 bf    	mov.b     0x82f, WREG
    46b2:	00 80 fb    	ze        w0, w0
    46b4:	44 00 de    	lsr.w     w0, #0x4, w0
    46b6:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    46b8:	2e 40 90    	mov.b     [w14+2], w0
    46ba:	00 80 fb    	ze        w0, w0
    46bc:	80 00 40    	add.w     w0, w0, w1
    46be:	20 5b 21    	mov.w     #0x15b2, w0
    46c0:	00 80 40    	add.w     w1, w0, w0
    46c2:	10 00 78    	mov.w     [w0], w0
    46c4:	00 00 e0    	cp0.w     w0
    46c6:	2e 00 32    	bra       Z, 0x4724 <.L27>
                    USB_in_callbacks[ep]();
    46c8:	2e 40 90    	mov.b     [w14+2], w0
    46ca:	00 80 fb    	ze        w0, w0
    46cc:	80 00 40    	add.w     w0, w0, w1
    46ce:	20 5b 21    	mov.w     #0x15b2, w0
    46d0:	00 80 40    	add.w     w1, w0, w0
    46d2:	10 00 78    	mov.w     [w0], w0
    46d4:	00 00 01    	call      w0
                break;
    46d6:	27 00 37    	bra       0x4726 <.L21>

000046d8 <.L22>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    46d8:	2f c8 bf    	mov.b     0x82f, WREG
    46da:	00 80 fb    	ze        w0, w0
    46dc:	44 00 de    	lsr.w     w0, #0x4, w0
    46de:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    46e0:	2e 40 90    	mov.b     [w14+2], w0
    46e2:	00 80 fb    	ze        w0, w0
    46e4:	80 00 40    	add.w     w0, w0, w1
    46e6:	20 5d 21    	mov.w     #0x15d2, w0
    46e8:	00 80 40    	add.w     w1, w0, w0
    46ea:	10 00 78    	mov.w     [w0], w0
    46ec:	00 00 e0    	cp0.w     w0
    46ee:	07 00 32    	bra       Z, 0x46fe <.L26>
                    USB_out_callbacks[ep]();
    46f0:	2e 40 90    	mov.b     [w14+2], w0
    46f2:	00 80 fb    	ze        w0, w0
    46f4:	80 00 40    	add.w     w0, w0, w1
    46f6:	20 5d 21    	mov.w     #0x15d2, w0
    46f8:	00 80 40    	add.w     w1, w0, w0
    46fa:	10 00 78    	mov.w     [w0], w0
    46fc:	00 00 01    	call      w0

000046fe <.L26>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    46fe:	2e 40 90    	mov.b     [w14+2], w0
    4700:	00 04 e0    	cp0.b     w0
    4702:	11 00 3a    	bra       NZ, 0x4726 <.L21>
    4704:	70 ad 80    	mov.w     0x15ae, w0
    4706:	00 00 e0    	cp0.w     w0
    4708:	0e 00 3a    	bra       NZ, 0x4726 <.L21>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    470a:	00 60 21    	mov.w     #0x1600, w0
    470c:	01 c4 b3    	mov.b     #0x40, w1
    470e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    4710:	10 60 21    	mov.w     #0x1601, w0
    4712:	81 c8 b3    	mov.b     #0x88, w1
    4714:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    4716:	40 60 21    	mov.w     #0x1604, w0
    4718:	80 40 eb    	clr.b     w1
    471a:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    471c:	50 60 21    	mov.w     #0x1605, w0
    471e:	81 cc b3    	mov.b     #0xc8, w1
    4720:	01 48 78    	mov.b     w1, [w0]
    4722:	01 00 37    	bra       0x4726 <.L21>

00004724 <.L27>:
    4724:	00 00 00    	nop       

00004726 <.L21>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    4726:	2c c8 bf    	mov.b     0x82c, WREG
    4728:	00 80 fb    	ze        w0, w0
    472a:	61 00 60    	and.w     w0, #0x1, w0
    472c:	00 40 78    	mov.b     w0, w0
    472e:	00 04 e0    	cp0.b     w0
    4730:	09 00 32    	bra       Z, 0x4744 <.L13>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    4732:	00 60 21    	mov.w     #0x1600, w0
    4734:	01 c4 b3    	mov.b     #0x40, w1
    4736:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    4738:	50 60 21    	mov.w     #0x1605, w0
    473a:	41 c8 b3    	mov.b     #0x84, w1
    473c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    473e:	10 60 21    	mov.w     #0x1601, w0
    4740:	41 c8 b3    	mov.b     #0x84, w1
    4742:	01 48 78    	mov.b     w1, [w0]

00004744 <.L13>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    4744:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    4746:	00 80 fa    	ulnk      
    4748:	00 00 06    	return    

0000474a <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    474a:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    474c:	11 41 80    	mov.w     0x822, w1
    474e:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    4750:	1e 00 78    	mov.w     [w14], w0
    4752:	90 40 78    	mov.b     [w0], w1
    4754:	40 82 20    	mov.w     #0x824, w0
    4756:	01 48 78    	mov.b     w1, [w0]
    4758:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    475a:	1e 00 78    	mov.w     [w14], w0
    475c:	90 40 78    	mov.b     [w0], w1
    475e:	40 82 20    	mov.w     #0x824, w0
    4760:	11 40 98    	mov.b     w1, [w0+1]
    4762:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    4764:	1e 00 78    	mov.w     [w14], w0
    4766:	90 40 78    	mov.b     [w0], w1
    4768:	40 82 20    	mov.w     #0x824, w0
    476a:	21 40 98    	mov.b     w1, [w0+2]
    476c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    476e:	1e 00 78    	mov.w     [w14], w0
    4770:	90 40 78    	mov.b     [w0], w1
    4772:	40 82 20    	mov.w     #0x824, w0
    4774:	31 40 98    	mov.b     w1, [w0+3]
    4776:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    4778:	1e 00 78    	mov.w     [w14], w0
    477a:	90 40 78    	mov.b     [w0], w1
    477c:	40 82 20    	mov.w     #0x824, w0
    477e:	41 40 98    	mov.b     w1, [w0+4]
    4780:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    4782:	1e 00 78    	mov.w     [w14], w0
    4784:	90 40 78    	mov.b     [w0], w1
    4786:	40 82 20    	mov.w     #0x824, w0
    4788:	51 40 98    	mov.b     w1, [w0+5]
    478a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    478c:	1e 00 78    	mov.w     [w14], w0
    478e:	90 40 78    	mov.b     [w0], w1
    4790:	40 82 20    	mov.w     #0x824, w0
    4792:	61 40 98    	mov.b     w1, [w0+6]
    4794:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    4796:	1e 00 78    	mov.w     [w14], w0
    4798:	90 40 78    	mov.b     [w0], w1
    479a:	40 82 20    	mov.w     #0x824, w0
    479c:	71 40 98    	mov.b     w1, [w0+7]
    479e:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    47a0:	00 60 21    	mov.w     #0x1600, w0
    47a2:	01 c4 b3    	mov.b     #0x40, w1
    47a4:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    47a6:	50 60 21    	mov.w     #0x1605, w0
    47a8:	81 c0 b3    	mov.b     #0x8, w1
    47aa:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    47ac:	40 82 20    	mov.w     #0x824, w0
    47ae:	10 40 78    	mov.b     [w0], w0
    47b0:	00 04 e0    	cp0.b     w0
    47b2:	06 00 35    	bra       LT, 0x47c0 <.L29>
    47b4:	40 82 20    	mov.w     #0x824, w0
    47b6:	30 00 90    	mov.w     [w0+6], w0
    47b8:	00 00 e0    	cp0.w     w0
    47ba:	02 00 32    	bra       Z, 0x47c0 <.L29>
    47bc:	80 cc b3    	mov.b     #0xc8, w0
    47be:	01 00 37    	bra       0x47c2 <.L30>

000047c0 <.L29>:
    47c0:	80 c8 b3    	mov.b     #0x88, w0

000047c2 <.L30>:
    47c2:	11 60 21    	mov.w     #0x1601, w1
    47c4:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    47c6:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    47c8:	40 5a 21    	mov.w     #0x15a4, w0
    47ca:	80 c0 eb    	setm.b    w1
    47cc:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    47ce:	50 5a 21    	mov.w     #0x15a5, w0
    47d0:	80 c0 eb    	setm.b    w1
    47d2:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    47d4:	00 00 eb    	clr.w     w0
    47d6:	70 ad 88    	mov.w     w0, 0x15ae
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    47d8:	00 00 eb    	clr.w     w0
    47da:	80 ad 88    	mov.w     w0, 0x15b0
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    47dc:	40 82 20    	mov.w     #0x824, w0
    47de:	10 40 78    	mov.b     [w0], w0
    47e0:	80 80 fb    	ze        w0, w1
    47e2:	00 06 20    	mov.w     #0x60, w0
    47e4:	00 80 60    	and.w     w1, w0, w0
    47e6:	01 02 20    	mov.w     #0x20, w1
    47e8:	81 0f 50    	sub.w     w0, w1, [w15]
    47ea:	11 00 32    	bra       Z, 0x480e <.L33>
    47ec:	01 04 20    	mov.w     #0x40, w1
    47ee:	81 0f 50    	sub.w     w0, w1, [w15]
    47f0:	04 00 32    	bra       Z, 0x47fa <.L34>
    47f2:	00 00 e0    	cp0.w     w0
    47f4:	16 00 3a    	bra       NZ, 0x4822 <.L40>
        case STANDARD_REQ:
            usb_standard_requests();
    47f6:	1a 00 07    	rcall     0x482c <_usb_standard_requests> <.LFB5> <.LFE4>
            break;
    47f8:	17 00 37    	bra       0x4828 <.L28>

000047fa <.L34>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    47fa:	c0 41 80    	mov.w     0x838, w0
    47fc:	00 00 e0    	cp0.w     w0
    47fe:	03 00 32    	bra       Z, 0x4806 <.L36>
                USB_setup_vendor_callback();
    4800:	c0 41 80    	mov.w     0x838, w0
    4802:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    4804:	11 00 37    	bra       0x4828 <.L28>

00004806 <.L36>:
    4806:	2c c8 bf    	mov.b     0x82c, WREG
    4808:	00 04 a0    	bset.b    w0, #0x0
    480a:	2c e8 b7    	mov.b     WREG, 0x82c
    480c:	0d 00 37    	bra       0x4828 <.L28>

0000480e <.L33>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    480e:	b0 41 80    	mov.w     0x836, w0
    4810:	00 00 e0    	cp0.w     w0
    4812:	03 00 32    	bra       Z, 0x481a <.L38>
                USB_setup_class_callback();
    4814:	b0 41 80    	mov.w     0x836, w0
    4816:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    4818:	07 00 37    	bra       0x4828 <.L28>

0000481a <.L38>:
    481a:	2c c8 bf    	mov.b     0x82c, WREG
    481c:	00 04 a0    	bset.b    w0, #0x0
    481e:	2c e8 b7    	mov.b     WREG, 0x82c
    4820:	03 00 37    	bra       0x4828 <.L28>

00004822 <.L40>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    4822:	2c c8 bf    	mov.b     0x82c, WREG
    4824:	00 04 a0    	bset.b    w0, #0x0
    4826:	2c e8 b7    	mov.b     WREG, 0x82c

00004828 <.L28>:
    }
}
    4828:	00 80 fa    	ulnk      
    482a:	00 00 06    	return    

0000482c <_usb_standard_requests>:

void usb_standard_requests(void) {
    482c:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    482e:	40 82 20    	mov.w     #0x824, w0
    4830:	10 40 90    	mov.b     [w0+1], w0
    4832:	00 80 fb    	ze        w0, w0
    4834:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    4836:	7d 01 32    	bra       Z, 0x4b32 <.L46>
    4838:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    483a:	0c 00 3c    	bra       GT, 0x4854 <.L51>
    483c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    483e:	c1 00 32    	bra       Z, 0x49c2 <.L44>
    4840:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4842:	03 00 3c    	bra       GT, 0x484a <.L52>
    4844:	00 00 e0    	cp0.w     w0
    4846:	12 00 32    	bra       Z, 0x486c <.L43>
    4848:	48 02 37    	bra       0x4cda <.L42>

0000484a <.L52>:
    484a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    484c:	ba 00 32    	bra       Z, 0x49c2 <.L44>
    484e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4850:	4e 01 32    	bra       Z, 0x4aee <.L45>
    4852:	43 02 37    	bra       0x4cda <.L42>

00004854 <.L51>:
    4854:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    4856:	e3 01 32    	bra       Z, 0x4c1e <.L48>
    4858:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    485a:	03 00 3c    	bra       GT, 0x4862 <.L53>
    485c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    485e:	d4 01 32    	bra       Z, 0x4c08 <.L47>
    4860:	3c 02 37    	bra       0x4cda <.L42>

00004862 <.L53>:
    4862:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    4864:	fe 01 32    	bra       Z, 0x4c62 <.L49>
    4866:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    4868:	17 02 32    	bra       Z, 0x4c98 <.L50>
    486a:	37 02 37    	bra       0x4cda <.L42>

0000486c <.L43>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    486c:	40 82 20    	mov.w     #0x824, w0
    486e:	10 40 78    	mov.b     [w0], w0
    4870:	00 80 fb    	ze        w0, w0
    4872:	7f 00 60    	and.w     w0, #0x1f, w0
    4874:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4876:	13 00 32    	bra       Z, 0x489e <.L56>
    4878:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    487a:	32 00 32    	bra       Z, 0x48e0 <.L57>
    487c:	00 00 e0    	cp0.w     w0
    487e:	9c 00 3a    	bra       NZ, 0x49b8 <.L132>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    4880:	30 b0 80    	mov.w     0x1606, w0
    4882:	e1 82 20    	mov.w     #0x82e, w1
    4884:	91 40 78    	mov.b     [w1], w1
    4886:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    4888:	30 b0 80    	mov.w     0x1606, w0
    488a:	00 00 e8    	inc.w     w0, w0
    488c:	80 40 eb    	clr.b     w1
    488e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    4890:	40 60 21    	mov.w     #0x1604, w0
    4892:	21 c0 b3    	mov.b     #0x2, w1
    4894:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4896:	50 60 21    	mov.w     #0x1605, w0
    4898:	81 cc b3    	mov.b     #0xc8, w1
    489a:	01 48 78    	mov.b     w1, [w0]
                    break;
    489c:	91 00 37    	bra       0x49c0 <.L58>

0000489e <.L56>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    489e:	30 c8 bf    	mov.b     0x830, WREG
    48a0:	00 80 fb    	ze        w0, w0
    48a2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    48a4:	03 00 32    	bra       Z, 0x48ac <.L60>
    48a6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    48a8:	05 00 32    	bra       Z, 0x48b4 <.L61>
    48aa:	19 00 37    	bra       0x48de <.L59>

000048ac <.L60>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    48ac:	2c c8 bf    	mov.b     0x82c, WREG
    48ae:	00 04 a0    	bset.b    w0, #0x0
    48b0:	2c e8 b7    	mov.b     WREG, 0x82c
                            break;
    48b2:	15 00 37    	bra       0x48de <.L59>

000048b4 <.L61>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    48b4:	40 82 20    	mov.w     #0x824, w0
    48b6:	40 40 90    	mov.b     [w0+4], w0
    48b8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    48ba:	0e 00 3e    	bra       GTU, 0x48d8 <.L62>
                                BD[EP0IN].address[0] = 0;
    48bc:	30 b0 80    	mov.w     0x1606, w0
    48be:	80 40 eb    	clr.b     w1
    48c0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    48c2:	30 b0 80    	mov.w     0x1606, w0
    48c4:	00 00 e8    	inc.w     w0, w0
    48c6:	80 40 eb    	clr.b     w1
    48c8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    48ca:	40 60 21    	mov.w     #0x1604, w0
    48cc:	21 c0 b3    	mov.b     #0x2, w1
    48ce:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    48d0:	50 60 21    	mov.w     #0x1605, w0
    48d2:	81 cc b3    	mov.b     #0xc8, w1
    48d4:	01 48 78    	mov.b     w1, [w0]
    48d6:	03 00 37    	bra       0x48de <.L59>

000048d8 <.L62>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    48d8:	2c c8 bf    	mov.b     0x82c, WREG
    48da:	00 04 a0    	bset.b    w0, #0x0
    48dc:	2c e8 b7    	mov.b     WREG, 0x82c

000048de <.L59>:
                            }
                    }
                    break;
    48de:	70 00 37    	bra       0x49c0 <.L58>

000048e0 <.L57>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    48e0:	30 c8 bf    	mov.b     0x830, WREG
    48e2:	00 80 fb    	ze        w0, w0
    48e4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    48e6:	03 00 32    	bra       Z, 0x48ee <.L64>
    48e8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    48ea:	29 00 32    	bra       Z, 0x493e <.L65>
    48ec:	61 00 37    	bra       0x49b0 <.L133>

000048ee <.L64>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    48ee:	40 82 20    	mov.w     #0x824, w0
    48f0:	40 40 90    	mov.b     [w0+4], w0
    48f2:	00 80 fb    	ze        w0, w0
    48f4:	6f 00 60    	and.w     w0, #0xf, w0
    48f6:	00 00 e0    	cp0.w     w0
    48f8:	1e 00 3a    	bra       NZ, 0x4936 <.L66>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    48fa:	31 b0 80    	mov.w     0x1606, w1
    48fc:	40 82 20    	mov.w     #0x824, w0
    48fe:	40 40 90    	mov.b     [w0+4], w0
    4900:	00 04 e0    	cp0.b     w0
    4902:	07 00 3d    	bra       GE, 0x4912 <.L67>
    4904:	50 60 21    	mov.w     #0x1605, w0
    4906:	10 40 78    	mov.b     [w0], w0
    4908:	00 80 fb    	ze        w0, w0
    490a:	64 00 60    	and.w     w0, #0x4, w0
    490c:	42 80 de    	asr.w     w0, #0x2, w0
    490e:	00 40 78    	mov.b     w0, w0
    4910:	06 00 37    	bra       0x491e <.L68>

00004912 <.L67>:
    4912:	10 60 21    	mov.w     #0x1601, w0
    4914:	10 40 78    	mov.b     [w0], w0
    4916:	00 80 fb    	ze        w0, w0
    4918:	64 00 60    	and.w     w0, #0x4, w0
    491a:	42 80 de    	asr.w     w0, #0x2, w0
    491c:	00 40 78    	mov.b     w0, w0

0000491e <.L68>:
    491e:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    4920:	30 b0 80    	mov.w     0x1606, w0
    4922:	00 00 e8    	inc.w     w0, w0
    4924:	80 40 eb    	clr.b     w1
    4926:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    4928:	40 60 21    	mov.w     #0x1604, w0
    492a:	21 c0 b3    	mov.b     #0x2, w1
    492c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    492e:	50 60 21    	mov.w     #0x1605, w0
    4930:	81 cc b3    	mov.b     #0xc8, w1
    4932:	01 48 78    	mov.b     w1, [w0]
    4934:	03 00 37    	bra       0x493c <.L69>

00004936 <.L66>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4936:	2c c8 bf    	mov.b     0x82c, WREG
    4938:	00 04 a0    	bset.b    w0, #0x0
    493a:	2c e8 b7    	mov.b     WREG, 0x82c

0000493c <.L69>:
                            }
                            break;
    493c:	3c 00 37    	bra       0x49b6 <.L70>

0000493e <.L65>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    493e:	a0 4a 20    	mov.w     #0x4aa, w0
    4940:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    4942:	40 82 20    	mov.w     #0x824, w0
    4944:	40 40 90    	mov.b     [w0+4], w0
    4946:	6f 40 60    	and.b     w0, #0xf, w0
    4948:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    494a:	2e 40 90    	mov.b     [w14+2], w0
    494c:	00 80 fb    	ze        w0, w0
    494e:	00 00 40    	add.w     w0, w0, w0
    4950:	80 00 78    	mov.w     w0, w1
    4952:	40 82 20    	mov.w     #0x824, w0
    4954:	40 40 90    	mov.b     [w0+4], w0
    4956:	00 00 fb    	se        w0, w0
    4958:	4f 00 de    	lsr.w     w0, #0xf, w0
    495a:	01 00 70    	ior.w     w0, w1, w0
    495c:	c2 00 dd    	sl.w      w0, #0x2, w1
    495e:	00 60 21    	mov.w     #0x1600, w0
    4960:	00 80 40    	add.w     w1, w0, w0
    4962:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    4964:	2e 40 90    	mov.b     [w14+2], w0
    4966:	00 80 fb    	ze        w0, w0
    4968:	00 00 40    	add.w     w0, w0, w0
    496a:	1e 00 40    	add.w     w0, [w14], w0
    496c:	90 00 78    	mov.w     [w0], w1
    496e:	40 82 20    	mov.w     #0x824, w0
    4970:	40 40 90    	mov.b     [w0+4], w0
    4972:	00 04 e0    	cp0.b     w0
    4974:	02 00 3d    	bra       GE, 0x497a <.L71>
    4976:	40 00 20    	mov.w     #0x4, w0
    4978:	01 00 37    	bra       0x497c <.L72>

0000497a <.L71>:
    497a:	80 00 20    	mov.w     #0x8, w0

0000497c <.L72>:
    497c:	00 80 60    	and.w     w1, w0, w0
    497e:	00 00 e0    	cp0.w     w0
    4980:	13 00 32    	bra       Z, 0x49a8 <.L73>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    4982:	30 b0 80    	mov.w     0x1606, w0
    4984:	ae 00 90    	mov.w     [w14+4], w1
    4986:	91 40 90    	mov.b     [w1+1], w1
    4988:	81 80 fb    	ze        w1, w1
    498a:	e4 80 60    	and.w     w1, #0x4, w1
    498c:	c2 88 de    	asr.w     w1, #0x2, w1
    498e:	81 40 78    	mov.b     w1, w1
    4990:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    4992:	30 b0 80    	mov.w     0x1606, w0
    4994:	00 00 e8    	inc.w     w0, w0
    4996:	80 40 eb    	clr.b     w1
    4998:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    499a:	40 60 21    	mov.w     #0x1604, w0
    499c:	21 c0 b3    	mov.b     #0x2, w1
    499e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    49a0:	50 60 21    	mov.w     #0x1605, w0
    49a2:	81 cc b3    	mov.b     #0xc8, w1
    49a4:	01 48 78    	mov.b     w1, [w0]
    49a6:	03 00 37    	bra       0x49ae <.L74>

000049a8 <.L73>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    49a8:	2c c8 bf    	mov.b     0x82c, WREG
    49aa:	00 04 a0    	bset.b    w0, #0x0
    49ac:	2c e8 b7    	mov.b     WREG, 0x82c

000049ae <.L74>:
                            }
                            break;
    49ae:	03 00 37    	bra       0x49b6 <.L70>

000049b0 <.L133>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    49b0:	2c c8 bf    	mov.b     0x82c, WREG
    49b2:	00 04 a0    	bset.b    w0, #0x0
    49b4:	2c e8 b7    	mov.b     WREG, 0x82c

000049b6 <.L70>:
                    }
                    break;
    49b6:	04 00 37    	bra       0x49c0 <.L58>

000049b8 <.L132>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    49b8:	2c c8 bf    	mov.b     0x82c, WREG
    49ba:	00 04 a0    	bset.b    w0, #0x0
    49bc:	2c e8 b7    	mov.b     WREG, 0x82c
            }
            break;
    49be:	92 01 37    	bra       0x4ce4 <.L41>

000049c0 <.L58>:
    49c0:	91 01 37    	bra       0x4ce4 <.L41>

000049c2 <.L44>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    49c2:	40 82 20    	mov.w     #0x824, w0
    49c4:	10 40 78    	mov.b     [w0], w0
    49c6:	00 80 fb    	ze        w0, w0
    49c8:	7f 00 60    	and.w     w0, #0x1f, w0
    49ca:	00 00 e0    	cp0.w     w0
    49cc:	03 00 32    	bra       Z, 0x49d4 <.L77>
    49ce:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    49d0:	1c 00 32    	bra       Z, 0x4a0a <.L78>
    49d2:	88 00 37    	bra       0x4ae4 <.L134>

000049d4 <.L77>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    49d4:	40 82 20    	mov.w     #0x824, w0
    49d6:	20 40 90    	mov.b     [w0+2], w0
    49d8:	00 80 fb    	ze        w0, w0
    49da:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    49dc:	12 00 3a    	bra       NZ, 0x4a02 <.L135>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    49de:	40 82 20    	mov.w     #0x824, w0
    49e0:	10 40 90    	mov.b     [w0+1], w0
    49e2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    49e4:	04 00 3a    	bra       NZ, 0x49ee <.L81>
                                USB_device_status &= 0xFE;
    49e6:	2e c8 bf    	mov.b     0x82e, WREG
    49e8:	00 04 a1    	bclr.b    w0, #0x0
    49ea:	2e e8 b7    	mov.b     WREG, 0x82e
    49ec:	03 00 37    	bra       0x49f4 <.L82>

000049ee <.L81>:
                            else
                                USB_device_status |= 0x01;
    49ee:	2e c8 bf    	mov.b     0x82e, WREG
    49f0:	00 04 a0    	bset.b    w0, #0x0
    49f2:	2e e8 b7    	mov.b     WREG, 0x82e

000049f4 <.L82>:
                            BD[EP0IN].bytecount = 0;
    49f4:	40 60 21    	mov.w     #0x1604, w0
    49f6:	80 40 eb    	clr.b     w1
    49f8:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    49fa:	50 60 21    	mov.w     #0x1605, w0
    49fc:	81 cc b3    	mov.b     #0xc8, w1
    49fe:	01 48 78    	mov.b     w1, [w0]
                            break;
    4a00:	03 00 37    	bra       0x4a08 <.L83>

00004a02 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    4a02:	2c c8 bf    	mov.b     0x82c, WREG
    4a04:	00 04 a0    	bset.b    w0, #0x0
    4a06:	2c e8 b7    	mov.b     WREG, 0x82c

00004a08 <.L83>:
                    }
                    break;
    4a08:	71 00 37    	bra       0x4aec <.L84>

00004a0a <.L78>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    4a0a:	30 c8 bf    	mov.b     0x830, WREG
    4a0c:	00 80 fb    	ze        w0, w0
    4a0e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4a10:	03 00 32    	bra       Z, 0x4a18 <.L86>
    4a12:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4a14:	12 00 32    	bra       Z, 0x4a3a <.L87>
    4a16:	62 00 37    	bra       0x4adc <.L136>

00004a18 <.L86>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    4a18:	40 82 20    	mov.w     #0x824, w0
    4a1a:	40 40 90    	mov.b     [w0+4], w0
    4a1c:	00 80 fb    	ze        w0, w0
    4a1e:	6f 00 60    	and.w     w0, #0xf, w0
    4a20:	00 00 e0    	cp0.w     w0
    4a22:	07 00 3a    	bra       NZ, 0x4a32 <.L88>
                                BD[EP0IN].bytecount = 0;
    4a24:	40 60 21    	mov.w     #0x1604, w0
    4a26:	80 40 eb    	clr.b     w1
    4a28:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4a2a:	50 60 21    	mov.w     #0x1605, w0
    4a2c:	81 cc b3    	mov.b     #0xc8, w1
    4a2e:	01 48 78    	mov.b     w1, [w0]
    4a30:	03 00 37    	bra       0x4a38 <.L89>

00004a32 <.L88>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4a32:	2c c8 bf    	mov.b     0x82c, WREG
    4a34:	00 04 a0    	bset.b    w0, #0x0
    4a36:	2c e8 b7    	mov.b     WREG, 0x82c

00004a38 <.L89>:
                            }
                            break;
    4a38:	54 00 37    	bra       0x4ae2 <.L90>

00004a3a <.L87>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    4a3a:	a0 4a 20    	mov.w     #0x4aa, w0
    4a3c:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    4a3e:	40 82 20    	mov.w     #0x824, w0
    4a40:	40 40 90    	mov.b     [w0+4], w0
    4a42:	6f 40 60    	and.b     w0, #0xf, w0
    4a44:	20 47 98    	mov.b     w0, [w14+2]
    4a46:	2e 40 90    	mov.b     [w14+2], w0
    4a48:	00 04 e0    	cp0.b     w0
    4a4a:	3c 00 32    	bra       Z, 0x4ac4 <.L91>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    4a4c:	2e 40 90    	mov.b     [w14+2], w0
    4a4e:	00 80 fb    	ze        w0, w0
    4a50:	00 00 40    	add.w     w0, w0, w0
    4a52:	80 00 78    	mov.w     w0, w1
    4a54:	40 82 20    	mov.w     #0x824, w0
    4a56:	40 40 90    	mov.b     [w0+4], w0
    4a58:	00 00 fb    	se        w0, w0
    4a5a:	4f 00 de    	lsr.w     w0, #0xf, w0
    4a5c:	01 00 70    	ior.w     w0, w1, w0
    4a5e:	c2 00 dd    	sl.w      w0, #0x2, w1
    4a60:	00 60 21    	mov.w     #0x1600, w0
    4a62:	00 80 40    	add.w     w1, w0, w0
    4a64:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    4a66:	40 82 20    	mov.w     #0x824, w0
    4a68:	40 40 90    	mov.b     [w0+4], w0
    4a6a:	00 04 e0    	cp0.b     w0
    4a6c:	16 00 3d    	bra       GE, 0x4a9a <.L92>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    4a6e:	2e 40 90    	mov.b     [w14+2], w0
    4a70:	00 80 fb    	ze        w0, w0
    4a72:	00 00 40    	add.w     w0, w0, w0
    4a74:	1e 00 40    	add.w     w0, [w14], w0
    4a76:	10 00 78    	mov.w     [w0], w0
    4a78:	64 00 60    	and.w     w0, #0x4, w0
    4a7a:	00 00 e0    	cp0.w     w0
    4a7c:	0a 00 32    	bra       Z, 0x4a92 <.L93>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? 0 : (UOWN | BSTALL);
    4a7e:	40 82 20    	mov.w     #0x824, w0
    4a80:	10 40 90    	mov.b     [w0+1], w0
    4a82:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4a84:	02 00 3a    	bra       NZ, 0x4a8a <.L94>
    4a86:	00 40 eb    	clr.b     w0
    4a88:	01 00 37    	bra       0x4a8c <.L95>

00004a8a <.L94>:
    4a8a:	40 c8 b3    	mov.b     #0x84, w0

00004a8c <.L95>:
    4a8c:	ae 00 90    	mov.w     [w14+4], w1
    4a8e:	90 40 98    	mov.b     w0, [w1+1]
    4a90:	19 00 37    	bra       0x4ac4 <.L91>

00004a92 <.L93>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    4a92:	2c c8 bf    	mov.b     0x82c, WREG
    4a94:	00 04 a0    	bset.b    w0, #0x0
    4a96:	2c e8 b7    	mov.b     WREG, 0x82c
    4a98:	15 00 37    	bra       0x4ac4 <.L91>

00004a9a <.L92>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    4a9a:	2e 40 90    	mov.b     [w14+2], w0
    4a9c:	00 80 fb    	ze        w0, w0
    4a9e:	00 00 40    	add.w     w0, w0, w0
    4aa0:	1e 00 40    	add.w     w0, [w14], w0
    4aa2:	10 00 78    	mov.w     [w0], w0
    4aa4:	68 00 60    	and.w     w0, #0x8, w0
    4aa6:	00 00 e0    	cp0.w     w0
    4aa8:	0a 00 32    	bra       Z, 0x4abe <.L96>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    4aaa:	40 82 20    	mov.w     #0x824, w0
    4aac:	10 40 90    	mov.b     [w0+1], w0
    4aae:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4ab0:	02 00 3a    	bra       NZ, 0x4ab6 <.L97>
    4ab2:	80 c8 b3    	mov.b     #0x88, w0
    4ab4:	01 00 37    	bra       0x4ab8 <.L98>

00004ab6 <.L97>:
    4ab6:	40 c8 b3    	mov.b     #0x84, w0

00004ab8 <.L98>:
    4ab8:	ae 00 90    	mov.w     [w14+4], w1
    4aba:	90 40 98    	mov.b     w0, [w1+1]
    4abc:	03 00 37    	bra       0x4ac4 <.L91>

00004abe <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    4abe:	2c c8 bf    	mov.b     0x82c, WREG
    4ac0:	00 04 a0    	bset.b    w0, #0x0
    4ac2:	2c e8 b7    	mov.b     WREG, 0x82c

00004ac4 <.L91>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    4ac4:	2c c8 bf    	mov.b     0x82c, WREG
    4ac6:	00 80 fb    	ze        w0, w0
    4ac8:	61 00 60    	and.w     w0, #0x1, w0
    4aca:	00 00 e0    	cp0.w     w0
    4acc:	06 00 3a    	bra       NZ, 0x4ada <.L99>
                                BD[EP0IN].bytecount = 0;
    4ace:	40 60 21    	mov.w     #0x1604, w0
    4ad0:	80 40 eb    	clr.b     w1
    4ad2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    4ad4:	50 60 21    	mov.w     #0x1605, w0
    4ad6:	81 cc b3    	mov.b     #0xc8, w1
    4ad8:	01 48 78    	mov.b     w1, [w0]

00004ada <.L99>:
                            }
                            break;
    4ada:	03 00 37    	bra       0x4ae2 <.L90>

00004adc <.L136>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    4adc:	2c c8 bf    	mov.b     0x82c, WREG
    4ade:	00 04 a0    	bset.b    w0, #0x0
    4ae0:	2c e8 b7    	mov.b     WREG, 0x82c

00004ae2 <.L90>:
                    }
                    break;
    4ae2:	04 00 37    	bra       0x4aec <.L84>

00004ae4 <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    4ae4:	2c c8 bf    	mov.b     0x82c, WREG
    4ae6:	00 04 a0    	bset.b    w0, #0x0
    4ae8:	2c e8 b7    	mov.b     WREG, 0x82c
            }
            break;
    4aea:	fc 00 37    	bra       0x4ce4 <.L41>

00004aec <.L84>:
    4aec:	fb 00 37    	bra       0x4ce4 <.L41>

00004aee <.L45>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    4aee:	40 82 20    	mov.w     #0x824, w0
    4af0:	20 40 90    	mov.b     [w0+2], w0
    4af2:	00 04 e0    	cp0.b     w0
    4af4:	04 00 3d    	bra       GE, 0x4afe <.L100>
                USB_error_flags |= REQUEST_ERROR;
    4af6:	2c c8 bf    	mov.b     0x82c, WREG
    4af8:	00 04 a0    	bset.b    w0, #0x0
    4afa:	2c e8 b7    	mov.b     WREG, 0x82c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    4afc:	f3 00 37    	bra       0x4ce4 <.L41>

00004afe <.L100>:
    4afe:	40 82 20    	mov.w     #0x824, w0
    4b00:	90 40 78    	mov.b     [w0], w1
    4b02:	40 5a 21    	mov.w     #0x15a4, w0
    4b04:	01 48 78    	mov.b     w1, [w0]
    4b06:	40 82 20    	mov.w     #0x824, w0
    4b08:	90 40 90    	mov.b     [w0+1], w1
    4b0a:	50 5a 21    	mov.w     #0x15a5, w0
    4b0c:	01 48 78    	mov.b     w1, [w0]
    4b0e:	40 82 20    	mov.w     #0x824, w0
    4b10:	10 00 90    	mov.w     [w0+2], w0
    4b12:	30 ad 88    	mov.w     w0, 0x15a6
    4b14:	40 82 20    	mov.w     #0x824, w0
    4b16:	20 00 90    	mov.w     [w0+4], w0
    4b18:	40 ad 88    	mov.w     w0, 0x15a8
    4b1a:	40 82 20    	mov.w     #0x824, w0
    4b1c:	30 00 90    	mov.w     [w0+6], w0
    4b1e:	50 ad 88    	mov.w     w0, 0x15aa
    4b20:	c0 52 24    	mov.w     #0x452c, w0
    4b22:	90 ad 88    	mov.w     w0, 0x15b2
    4b24:	40 60 21    	mov.w     #0x1604, w0
    4b26:	80 40 eb    	clr.b     w1
    4b28:	01 48 78    	mov.b     w1, [w0]
    4b2a:	50 60 21    	mov.w     #0x1605, w0
    4b2c:	81 cc b3    	mov.b     #0xc8, w1
    4b2e:	01 48 78    	mov.b     w1, [w0]
    4b30:	d9 00 37    	bra       0x4ce4 <.L41>

00004b32 <.L46>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    4b32:	40 82 20    	mov.w     #0x824, w0
    4b34:	90 40 78    	mov.b     [w0], w1
    4b36:	40 5a 21    	mov.w     #0x15a4, w0
    4b38:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    4b3a:	40 82 20    	mov.w     #0x824, w0
    4b3c:	90 40 90    	mov.b     [w0+1], w1
    4b3e:	50 5a 21    	mov.w     #0x15a5, w0
    4b40:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    4b42:	40 82 20    	mov.w     #0x824, w0
    4b44:	10 00 90    	mov.w     [w0+2], w0
    4b46:	30 ad 88    	mov.w     w0, 0x15a6
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    4b48:	40 82 20    	mov.w     #0x824, w0
    4b4a:	20 00 90    	mov.w     [w0+4], w0
    4b4c:	40 ad 88    	mov.w     w0, 0x15a8
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    4b4e:	40 82 20    	mov.w     #0x824, w0
    4b50:	30 00 90    	mov.w     [w0+6], w0
    4b52:	50 ad 88    	mov.w     w0, 0x15aa
            switch (USB_setup.wValue.b[1]) {
    4b54:	40 82 20    	mov.w     #0x824, w0
    4b56:	30 40 90    	mov.b     [w0+3], w0
    4b58:	00 80 fb    	ze        w0, w0
    4b5a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4b5c:	0b 00 32    	bra       Z, 0x4b74 <.L104>
    4b5e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4b60:	24 00 32    	bra       Z, 0x4baa <.L105>
    4b62:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4b64:	37 00 3a    	bra       NZ, 0x4bd4 <.L137>
                case DEVICE:
                    USB_request.data_ptr = Device;
    4b66:	e0 65 29    	mov.w     #0x965e, w0
    4b68:	60 ad 88    	mov.w     w0, 0x15ac
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    4b6a:	60 ad 80    	mov.w     0x15ac, w0
    4b6c:	10 40 78    	mov.b     [w0], w0
    4b6e:	00 80 fb    	ze        w0, w0
    4b70:	70 ad 88    	mov.w     w0, 0x15ae
                    break;
    4b72:	39 00 37    	bra       0x4be6 <.L106>

00004b74 <.L104>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    4b74:	40 82 20    	mov.w     #0x824, w0
    4b76:	20 40 90    	mov.b     [w0+2], w0
    4b78:	00 04 e0    	cp0.b     w0
    4b7a:	13 00 3a    	bra       NZ, 0x4ba2 <.L107>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    4b7c:	40 82 20    	mov.w     #0x824, w0
    4b7e:	20 40 90    	mov.b     [w0+2], w0
    4b80:	00 80 fb    	ze        w0, w0
    4b82:	80 00 40    	add.w     w0, w0, w1
    4b84:	40 6b 29    	mov.w     #0x96b4, w0
    4b86:	00 80 40    	add.w     w1, w0, w0
    4b88:	10 00 78    	mov.w     [w0], w0
    4b8a:	60 ad 88    	mov.w     w0, 0x15ac
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    4b8c:	60 ad 80    	mov.w     0x15ac, w0
    4b8e:	00 80 e8    	inc2.w    w0, w0
    4b90:	90 40 78    	mov.b     [w0], w1
    4b92:	e0 5a 21    	mov.w     #0x15ae, w0
    4b94:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    4b96:	60 ad 80    	mov.w     0x15ac, w0
    4b98:	63 00 40    	add.w     w0, #0x3, w0
    4b9a:	90 40 78    	mov.b     [w0], w1
    4b9c:	f0 5a 21    	mov.w     #0x15af, w0
    4b9e:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    4ba0:	22 00 37    	bra       0x4be6 <.L106>

00004ba2 <.L107>:
    4ba2:	2c c8 bf    	mov.b     0x82c, WREG
    4ba4:	00 04 a0    	bset.b    w0, #0x0
    4ba6:	2c e8 b7    	mov.b     WREG, 0x82c
    4ba8:	1e 00 37    	bra       0x4be6 <.L106>

00004baa <.L105>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    4baa:	40 82 20    	mov.w     #0x824, w0
    4bac:	20 40 90    	mov.b     [w0+2], w0
    4bae:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    4bb0:	0d 00 3e    	bra       GTU, 0x4bcc <.L109>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    4bb2:	40 82 20    	mov.w     #0x824, w0
    4bb4:	20 40 90    	mov.b     [w0+2], w0
    4bb6:	00 80 fb    	ze        w0, w0
    4bb8:	80 00 40    	add.w     w0, w0, w1
    4bba:	a0 70 29    	mov.w     #0x970a, w0
    4bbc:	00 80 40    	add.w     w1, w0, w0
    4bbe:	10 00 78    	mov.w     [w0], w0
    4bc0:	60 ad 88    	mov.w     w0, 0x15ac
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    4bc2:	60 ad 80    	mov.w     0x15ac, w0
    4bc4:	10 40 78    	mov.b     [w0], w0
    4bc6:	00 80 fb    	ze        w0, w0
    4bc8:	70 ad 88    	mov.w     w0, 0x15ae
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    4bca:	0d 00 37    	bra       0x4be6 <.L106>

00004bcc <.L109>:
    4bcc:	2c c8 bf    	mov.b     0x82c, WREG
    4bce:	00 04 a0    	bset.b    w0, #0x0
    4bd0:	2c e8 b7    	mov.b     WREG, 0x82c
    4bd2:	09 00 37    	bra       0x4be6 <.L106>

00004bd4 <.L137>:
                default:
                    if (USB_get_descriptor_callback)
    4bd4:	a0 41 80    	mov.w     0x834, w0
    4bd6:	00 00 e0    	cp0.w     w0
    4bd8:	03 00 32    	bra       Z, 0x4be0 <.L111>
                        USB_get_descriptor_callback();
    4bda:	a0 41 80    	mov.w     0x834, w0
    4bdc:	00 00 01    	call      w0
    4bde:	03 00 37    	bra       0x4be6 <.L106>

00004be0 <.L111>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    4be0:	2c c8 bf    	mov.b     0x82c, WREG
    4be2:	00 04 a0    	bset.b    w0, #0x0
    4be4:	2c e8 b7    	mov.b     WREG, 0x82c

00004be6 <.L106>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    4be6:	2c c8 bf    	mov.b     0x82c, WREG
    4be8:	00 80 fb    	ze        w0, w0
    4bea:	61 00 60    	and.w     w0, #0x1, w0
    4bec:	00 00 e0    	cp0.w     w0
    4bee:	79 00 3a    	bra       NZ, 0x4ce2 <.L142>
                USB_in_callbacks[0] = usb_send_data_packet;
    4bf0:	80 ce 24    	mov.w     #0x4ce8, w0
    4bf2:	90 ad 88    	mov.w     w0, 0x15b2
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    4bf4:	40 82 20    	mov.w     #0x824, w0
    4bf6:	b0 00 90    	mov.w     [w0+6], w1
    4bf8:	70 ad 80    	mov.w     0x15ae, w0
    4bfa:	80 8f 50    	sub.w     w1, w0, [w15]
    4bfc:	03 00 31    	bra       C, 0x4c04 <.L113>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    4bfe:	40 82 20    	mov.w     #0x824, w0
    4c00:	30 00 90    	mov.w     [w0+6], w0
    4c02:	70 ad 88    	mov.w     w0, 0x15ae

00004c04 <.L113>:
                usb_send_data_packet();
    4c04:	71 00 07    	rcall     0x4ce8 <_usb_send_data_packet> <.LFB6> <.LFE5>
            }
            break;
    4c06:	6e 00 37    	bra       0x4ce4 <.L41>

00004c08 <.L47>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    4c08:	30 b0 80    	mov.w     0x1606, w0
    4c0a:	d1 82 20    	mov.w     #0x82d, w1
    4c0c:	91 40 78    	mov.b     [w1], w1
    4c0e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    4c10:	40 60 21    	mov.w     #0x1604, w0
    4c12:	11 c0 b3    	mov.b     #0x1, w1
    4c14:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4c16:	50 60 21    	mov.w     #0x1605, w0
    4c18:	81 cc b3    	mov.b     #0xc8, w1
    4c1a:	01 48 78    	mov.b     w1, [w0]
            break;
    4c1c:	63 00 37    	bra       0x4ce4 <.L41>

00004c1e <.L48>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    4c1e:	40 82 20    	mov.w     #0x824, w0
    4c20:	20 40 90    	mov.b     [w0+2], w0
    4c22:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4c24:	1a 00 3e    	bra       GTU, 0x4c5a <.L114>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    4c26:	10 c0 b3    	mov.b     #0x1, w0
    4c28:	62 fc 07    	rcall     0x44ee <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE36> <.Letext0> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    4c2a:	40 82 20    	mov.w     #0x824, w0
    4c2c:	20 40 90    	mov.b     [w0+2], w0
    4c2e:	2d e8 b7    	mov.b     WREG, 0x82d
    4c30:	2d c8 bf    	mov.b     0x82d, WREG
    4c32:	00 80 fb    	ze        w0, w0
    4c34:	00 00 e0    	cp0.w     w0
    4c36:	03 00 3a    	bra       NZ, 0x4c3e <.L138>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    4c38:	20 c0 b3    	mov.b     #0x2, w0
    4c3a:	30 e8 b7    	mov.b     WREG, 0x830
                        break;
    4c3c:	07 00 37    	bra       0x4c4c <.L117>

00004c3e <.L138>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    4c3e:	30 c0 b3    	mov.b     #0x3, w0
    4c40:	30 e8 b7    	mov.b     WREG, 0x830
                        if (USB_set_config_callback)
    4c42:	90 41 80    	mov.w     0x832, w0
    4c44:	00 00 e0    	cp0.w     w0
    4c46:	02 00 32    	bra       Z, 0x4c4c <.L117>
                            USB_set_config_callback();
    4c48:	90 41 80    	mov.w     0x832, w0
    4c4a:	00 00 01    	call      w0

00004c4c <.L117>:
                }
                BD[EP0IN].bytecount = 0;
    4c4c:	40 60 21    	mov.w     #0x1604, w0
    4c4e:	80 40 eb    	clr.b     w1
    4c50:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4c52:	50 60 21    	mov.w     #0x1605, w0
    4c54:	81 cc b3    	mov.b     #0xc8, w1
    4c56:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4c58:	45 00 37    	bra       0x4ce4 <.L41>

00004c5a <.L114>:
    4c5a:	2c c8 bf    	mov.b     0x82c, WREG
    4c5c:	00 04 a0    	bset.b    w0, #0x0
    4c5e:	2c e8 b7    	mov.b     WREG, 0x82c
    4c60:	41 00 37    	bra       0x4ce4 <.L41>

00004c62 <.L49>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    4c62:	30 c8 bf    	mov.b     0x830, WREG
    4c64:	00 80 fb    	ze        w0, w0
    4c66:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4c68:	13 00 3a    	bra       NZ, 0x4c90 <.L139>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    4c6a:	40 82 20    	mov.w     #0x824, w0
    4c6c:	40 40 90    	mov.b     [w0+4], w0
    4c6e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4c70:	0a 00 3e    	bra       GTU, 0x4c86 <.L121>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    4c72:	30 b0 80    	mov.w     0x1606, w0
    4c74:	80 40 eb    	clr.b     w1
    4c76:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    4c78:	40 60 21    	mov.w     #0x1604, w0
    4c7a:	11 c0 b3    	mov.b     #0x1, w1
    4c7c:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4c7e:	50 60 21    	mov.w     #0x1605, w0
    4c80:	81 cc b3    	mov.b     #0xc8, w1
    4c82:	01 48 78    	mov.b     w1, [w0]
    4c84:	03 00 37    	bra       0x4c8c <.L122>

00004c86 <.L121>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    4c86:	2c c8 bf    	mov.b     0x82c, WREG
    4c88:	00 04 a0    	bset.b    w0, #0x0
    4c8a:	2c e8 b7    	mov.b     WREG, 0x82c

00004c8c <.L122>:
                    }
                    break;
    4c8c:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4c8e:	2a 00 37    	bra       0x4ce4 <.L41>

00004c90 <.L139>:
    4c90:	2c c8 bf    	mov.b     0x82c, WREG
    4c92:	00 04 a0    	bset.b    w0, #0x0
    4c94:	2c e8 b7    	mov.b     WREG, 0x82c
    4c96:	26 00 37    	bra       0x4ce4 <.L41>

00004c98 <.L50>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    4c98:	30 c8 bf    	mov.b     0x830, WREG
    4c9a:	00 80 fb    	ze        w0, w0
    4c9c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4c9e:	19 00 3a    	bra       NZ, 0x4cd2 <.L140>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    4ca0:	40 82 20    	mov.w     #0x824, w0
    4ca2:	40 40 90    	mov.b     [w0+4], w0
    4ca4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4ca6:	10 00 3e    	bra       GTU, 0x4cc8 <.L126>
                        switch (USB_setup.wValue.b[0]) {
    4ca8:	40 82 20    	mov.w     #0x824, w0
    4caa:	20 40 90    	mov.b     [w0+2], w0
    4cac:	00 80 fb    	ze        w0, w0
    4cae:	00 00 e0    	cp0.w     w0
    4cb0:	07 00 3a    	bra       NZ, 0x4cc0 <.L141>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    4cb2:	40 60 21    	mov.w     #0x1604, w0
    4cb4:	80 40 eb    	clr.b     w1
    4cb6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4cb8:	50 60 21    	mov.w     #0x1605, w0
    4cba:	81 cc b3    	mov.b     #0xc8, w1
    4cbc:	01 48 78    	mov.b     w1, [w0]
                                break;
    4cbe:	07 00 37    	bra       0x4cce <.L130>

00004cc0 <.L141>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    4cc0:	2c c8 bf    	mov.b     0x82c, WREG
    4cc2:	00 04 a0    	bset.b    w0, #0x0
    4cc4:	2c e8 b7    	mov.b     WREG, 0x82c
    4cc6:	03 00 37    	bra       0x4cce <.L130>

00004cc8 <.L126>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    4cc8:	2c c8 bf    	mov.b     0x82c, WREG
    4cca:	00 04 a0    	bset.b    w0, #0x0
    4ccc:	2c e8 b7    	mov.b     WREG, 0x82c

00004cce <.L130>:
                    }
                    break;
    4cce:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4cd0:	09 00 37    	bra       0x4ce4 <.L41>

00004cd2 <.L140>:
    4cd2:	2c c8 bf    	mov.b     0x82c, WREG
    4cd4:	00 04 a0    	bset.b    w0, #0x0
    4cd6:	2c e8 b7    	mov.b     WREG, 0x82c
    4cd8:	05 00 37    	bra       0x4ce4 <.L41>

00004cda <.L42>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    4cda:	2c c8 bf    	mov.b     0x82c, WREG
    4cdc:	00 04 a0    	bset.b    w0, #0x0
    4cde:	2c e8 b7    	mov.b     WREG, 0x82c
    4ce0:	01 00 37    	bra       0x4ce4 <.L41>

00004ce2 <.L142>:
    4ce2:	00 00 00    	nop       

00004ce4 <.L41>:
    }
}
    4ce4:	00 80 fa    	ulnk      
    4ce6:	00 00 06    	return    

00004ce8 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    4ce8:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    4cea:	71 ad 80    	mov.w     0x15ae, w1
    4cec:	f0 03 20    	mov.w     #0x3f, w0
    4cee:	80 8f 50    	sub.w     w1, w0, [w15]
    4cf0:	05 00 3e    	bra       GTU, 0x4cfc <.L144>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    4cf2:	70 ad 80    	mov.w     0x15ae, w0
    4cf4:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    4cf6:	00 00 eb    	clr.w     w0
    4cf8:	70 ad 88    	mov.w     w0, 0x15ae
    4cfa:	05 00 37    	bra       0x4d06 <.L145>

00004cfc <.L144>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    4cfc:	00 c4 b3    	mov.b     #0x40, w0
    4cfe:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    4d00:	70 ad 80    	mov.w     0x15ae, w0
    4d02:	00 04 b1    	sub.w     #0x40, w0
    4d04:	70 ad 88    	mov.w     w0, 0x15ae

00004d06 <.L145>:
    }
    for (i = 0; i < packet_length; i++) {
    4d06:	00 40 eb    	clr.b     w0
    4d08:	10 47 98    	mov.b     w0, [w14+1]
    4d0a:	0c 00 37    	bra       0x4d24 <.L146>

00004d0c <.L147>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    4d0c:	31 b0 80    	mov.w     0x1606, w1
    4d0e:	1e 40 90    	mov.b     [w14+1], w0
    4d10:	00 80 fb    	ze        w0, w0
    4d12:	80 80 40    	add.w     w1, w0, w1
    4d14:	60 ad 80    	mov.w     0x15ac, w0
    4d16:	10 41 78    	mov.b     [w0], w2
    4d18:	82 48 78    	mov.b     w2, [w1]
    4d1a:	00 00 e8    	inc.w     w0, w0
    4d1c:	60 ad 88    	mov.w     w0, 0x15ac
    4d1e:	1e 40 90    	mov.b     [w14+1], w0
    4d20:	00 40 e8    	inc.b     w0, w0
    4d22:	10 47 98    	mov.b     w0, [w14+1]

00004d24 <.L146>:
    4d24:	1e 40 90    	mov.b     [w14+1], w0
    4d26:	9e 4f 50    	sub.b     w0, [w14], [w15]
    4d28:	f1 ff 39    	bra       NC, 0x4d0c <.L147>
    }
    BD[EP0IN].bytecount = packet_length;
    4d2a:	40 60 21    	mov.w     #0x1604, w0
    4d2c:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    4d2e:	50 60 21    	mov.w     #0x1605, w0
    4d30:	10 40 78    	mov.b     [w0], w0
    4d32:	00 c0 ea    	com.b     w0, w0
    4d34:	02 c4 b3    	mov.b     #0x40, w2
    4d36:	82 40 60    	and.b     w0, w2, w1
    4d38:	80 c8 b3    	mov.b     #0x88, w0
    4d3a:	00 c0 70    	ior.b     w1, w0, w0
    4d3c:	80 40 78    	mov.b     w0, w1
    4d3e:	50 60 21    	mov.w     #0x1605, w0
    4d40:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    4d42:	70 ad 80    	mov.w     0x15ae, w0
    4d44:	00 00 e0    	cp0.w     w0
    4d46:	0f 00 3a    	bra       NZ, 0x4d66 <.L143>
        if (USB_request.done_callback)
    4d48:	80 ad 80    	mov.w     0x15b0, w0
    4d4a:	00 00 e0    	cp0.w     w0
    4d4c:	02 00 32    	bra       Z, 0x4d52 <.L149>
            USB_request.done_callback();
    4d4e:	80 ad 80    	mov.w     0x15b0, w0
    4d50:	00 00 01    	call      w0

00004d52 <.L149>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    4d52:	40 5a 21    	mov.w     #0x15a4, w0
    4d54:	80 c0 eb    	setm.b    w1
    4d56:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    4d58:	50 5a 21    	mov.w     #0x15a5, w0
    4d5a:	80 c0 eb    	setm.b    w1
    4d5c:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    4d5e:	00 00 eb    	clr.w     w0
    4d60:	80 ad 88    	mov.w     w0, 0x15b0
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    4d62:	00 00 eb    	clr.w     w0
    4d64:	90 ad 88    	mov.w     w0, 0x15b2

00004d66 <.L143>:
    }
}
    4d66:	00 80 fa    	ulnk      
    4d68:	00 00 06    	return    

00004d6a <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    4d6a:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    4d6c:	00 40 eb    	clr.b     w0
    4d6e:	00 4f 78    	mov.b     w0, [w14]
    4d70:	09 00 37    	bra       0x4d84 <.L151>

00004d72 <.L152>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    4d72:	60 ad 80    	mov.w     0x15ac, w0
    4d74:	12 b0 80    	mov.w     0x1602, w2
    4d76:	9e 80 fb    	ze        [w14], w1
    4d78:	81 00 41    	add.w     w2, w1, w1
    4d7a:	91 40 78    	mov.b     [w1], w1
    4d7c:	01 48 78    	mov.b     w1, [w0]
    4d7e:	00 00 e8    	inc.w     w0, w0
    4d80:	60 ad 88    	mov.w     w0, 0x15ac
    4d82:	1e 4f e8    	inc.b     [w14], [w14]

00004d84 <.L151>:
    4d84:	00 60 21    	mov.w     #0x1600, w0
    4d86:	10 40 78    	mov.b     [w0], w0
    4d88:	9e 4f 50    	sub.b     w0, [w14], [w15]
    4d8a:	f3 ff 3e    	bra       GTU, 0x4d72 <.L152>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    4d8c:	71 ad 80    	mov.w     0x15ae, w1
    4d8e:	00 60 21    	mov.w     #0x1600, w0
    4d90:	10 40 78    	mov.b     [w0], w0
    4d92:	00 80 fb    	ze        w0, w0
    4d94:	00 80 50    	sub.w     w1, w0, w0
    4d96:	70 ad 88    	mov.w     w0, 0x15ae
    if (USB_request.bytes_left.w > 0) {
    4d98:	70 ad 80    	mov.w     0x15ae, w0
    4d9a:	00 00 e0    	cp0.w     w0
    4d9c:	0e 00 32    	bra       Z, 0x4dba <.L153>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    4d9e:	00 60 21    	mov.w     #0x1600, w0
    4da0:	01 c4 b3    	mov.b     #0x40, w1
    4da2:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    4da4:	10 60 21    	mov.w     #0x1601, w0
    4da6:	10 40 78    	mov.b     [w0], w0
    4da8:	00 c0 ea    	com.b     w0, w0
    4daa:	02 c4 b3    	mov.b     #0x40, w2
    4dac:	82 40 60    	and.b     w0, w2, w1
    4dae:	80 c8 b3    	mov.b     #0x88, w0
    4db0:	00 c0 70    	ior.b     w1, w0, w0
    4db2:	80 40 78    	mov.b     w0, w1
    4db4:	10 60 21    	mov.w     #0x1601, w0
    4db6:	01 48 78    	mov.b     w1, [w0]
    4db8:	0f 00 37    	bra       0x4dd8 <.L150>

00004dba <.L153>:
    } else {
        if (USB_request.done_callback)
    4dba:	80 ad 80    	mov.w     0x15b0, w0
    4dbc:	00 00 e0    	cp0.w     w0
    4dbe:	02 00 32    	bra       Z, 0x4dc4 <.L155>
            USB_request.done_callback();
    4dc0:	80 ad 80    	mov.w     0x15b0, w0
    4dc2:	00 00 01    	call      w0

00004dc4 <.L155>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    4dc4:	40 5a 21    	mov.w     #0x15a4, w0
    4dc6:	80 c0 eb    	setm.b    w1
    4dc8:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    4dca:	50 5a 21    	mov.w     #0x15a5, w0
    4dcc:	80 c0 eb    	setm.b    w1
    4dce:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    4dd0:	00 00 eb    	clr.w     w0
    4dd2:	80 ad 88    	mov.w     w0, 0x15b0
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    4dd4:	00 00 eb    	clr.w     w0
    4dd6:	90 ae 88    	mov.w     w0, 0x15d2

00004dd8 <.L150>:
    }
}
    4dd8:	00 80 fa    	ulnk      
    4dda:	00 00 06    	return    

00004ddc <_digout_set>:
// Initial servo pulse width is 1.5 ms
uint16_t servo_OCxRS_save[4] = { 23999, 23999, 23999, 23999 };
uint16_t servo_OCxR_save[4] = { 1, 1, 1, 1 };

void digout_set(uint16_t pin) {
    4ddc:	02 00 fa    	lnk       #0x2
    4dde:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    4de0:	1e 00 78    	mov.w     [w14], w0
    4de2:	00 00 e0    	cp0.w     w0
    4de4:	02 00 3a    	bra       NZ, 0x4dea <.L2>
        D0_LAT = 1;
    4de6:	f4 e2 a8    	bset.b    0x2f4, #0x7
    4de8:	0e 00 37    	bra       0x4e06 <.L1>

00004dea <.L2>:
    else if (pin == 1)
    4dea:	1e 00 78    	mov.w     [w14], w0
    4dec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4dee:	02 00 3a    	bra       NZ, 0x4df4 <.L4>
        D1_LAT = 1;
    4df0:	cc 82 a8    	bset.b    0x2cc, #0x4
    4df2:	09 00 37    	bra       0x4e06 <.L1>

00004df4 <.L4>:
    else if (pin == 2)
    4df4:	1e 00 78    	mov.w     [w14], w0
    4df6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4df8:	02 00 3a    	bra       NZ, 0x4dfe <.L5>
        D2_LAT = 1;
    4dfa:	cc c2 a8    	bset.b    0x2cc, #0x6
    4dfc:	04 00 37    	bra       0x4e06 <.L1>

00004dfe <.L5>:
    else if (pin == 3)
    4dfe:	1e 00 78    	mov.w     [w14], w0
    4e00:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4e02:	01 00 3a    	bra       NZ, 0x4e06 <.L1>
        D3_LAT = 1;
    4e04:	cc e2 a8    	bset.b    0x2cc, #0x7

00004e06 <.L1>:
}
    4e06:	00 80 fa    	ulnk      
    4e08:	00 00 06    	return    

00004e0a <_digout_clear>:

void digout_clear(uint16_t pin) {
    4e0a:	02 00 fa    	lnk       #0x2
    4e0c:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    4e0e:	1e 00 78    	mov.w     [w14], w0
    4e10:	00 00 e0    	cp0.w     w0
    4e12:	02 00 3a    	bra       NZ, 0x4e18 <.L7>
        D0_LAT = 0;
    4e14:	f4 e2 a9    	bclr.b    0x2f4, #0x7
    4e16:	0e 00 37    	bra       0x4e34 <.L6>

00004e18 <.L7>:
    else if (pin == 1)
    4e18:	1e 00 78    	mov.w     [w14], w0
    4e1a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4e1c:	02 00 3a    	bra       NZ, 0x4e22 <.L9>
        D1_LAT = 0;
    4e1e:	cc 82 a9    	bclr.b    0x2cc, #0x4
    4e20:	09 00 37    	bra       0x4e34 <.L6>

00004e22 <.L9>:
    else if (pin == 2)
    4e22:	1e 00 78    	mov.w     [w14], w0
    4e24:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4e26:	02 00 3a    	bra       NZ, 0x4e2c <.L10>
        D2_LAT = 0;
    4e28:	cc c2 a9    	bclr.b    0x2cc, #0x6
    4e2a:	04 00 37    	bra       0x4e34 <.L6>

00004e2c <.L10>:
    else if (pin == 3)
    4e2c:	1e 00 78    	mov.w     [w14], w0
    4e2e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4e30:	01 00 3a    	bra       NZ, 0x4e34 <.L6>
        D3_LAT = 0;
    4e32:	cc e2 a9    	bclr.b    0x2cc, #0x7

00004e34 <.L6>:
}
    4e34:	00 80 fa    	ulnk      
    4e36:	00 00 06    	return    

00004e38 <_digout_toggle>:

void digout_toggle(uint16_t pin) {
    4e38:	02 00 fa    	lnk       #0x2
    4e3a:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    4e3c:	1e 00 78    	mov.w     [w14], w0
    4e3e:	00 00 e0    	cp0.w     w0
    4e40:	10 00 3a    	bra       NZ, 0x4e62 <.L12>
        D0_LAT = !D0_LAT;
    4e42:	a1 17 80    	mov.w     0x2f4, w1
    4e44:	00 08 20    	mov.w     #0x80, w0
    4e46:	00 80 60    	and.w     w1, w0, w0
    4e48:	00 f0 a7    	btsc.w    w0, #0xf
    4e4a:	00 00 ea    	neg.w     w0, w0
    4e4c:	00 00 e9    	dec.w     w0, w0
    4e4e:	4f 00 de    	lsr.w     w0, #0xf, w0
    4e50:	00 40 78    	mov.b     w0, w0
    4e52:	00 80 fb    	ze        w0, w0
    4e54:	61 00 60    	and.w     w0, #0x1, w0
    4e56:	47 00 dd    	sl.w      w0, #0x7, w0
    4e58:	a1 17 80    	mov.w     0x2f4, w1
    4e5a:	01 70 a1    	bclr.w    w1, #0x7
    4e5c:	01 00 70    	ior.w     w0, w1, w0
    4e5e:	a0 17 88    	mov.w     w0, 0x2f4
    4e60:	37 00 37    	bra       0x4ed0 <.L11>

00004e62 <.L12>:
    else if (pin == 1)
    4e62:	1e 00 78    	mov.w     [w14], w0
    4e64:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4e66:	0f 00 3a    	bra       NZ, 0x4e86 <.L14>
        D1_LAT = !D1_LAT;
    4e68:	60 16 80    	mov.w     0x2cc, w0
    4e6a:	70 00 60    	and.w     w0, #0x10, w0
    4e6c:	00 f0 a7    	btsc.w    w0, #0xf
    4e6e:	00 00 ea    	neg.w     w0, w0
    4e70:	00 00 e9    	dec.w     w0, w0
    4e72:	4f 00 de    	lsr.w     w0, #0xf, w0
    4e74:	00 40 78    	mov.b     w0, w0
    4e76:	00 80 fb    	ze        w0, w0
    4e78:	61 00 60    	and.w     w0, #0x1, w0
    4e7a:	44 00 dd    	sl.w      w0, #0x4, w0
    4e7c:	61 16 80    	mov.w     0x2cc, w1
    4e7e:	01 40 a1    	bclr.w    w1, #0x4
    4e80:	01 00 70    	ior.w     w0, w1, w0
    4e82:	60 16 88    	mov.w     w0, 0x2cc
    4e84:	25 00 37    	bra       0x4ed0 <.L11>

00004e86 <.L14>:
    else if (pin == 2)
    4e86:	1e 00 78    	mov.w     [w14], w0
    4e88:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4e8a:	10 00 3a    	bra       NZ, 0x4eac <.L15>
        D2_LAT = !D2_LAT;
    4e8c:	61 16 80    	mov.w     0x2cc, w1
    4e8e:	00 04 20    	mov.w     #0x40, w0
    4e90:	00 80 60    	and.w     w1, w0, w0
    4e92:	00 f0 a7    	btsc.w    w0, #0xf
    4e94:	00 00 ea    	neg.w     w0, w0
    4e96:	00 00 e9    	dec.w     w0, w0
    4e98:	4f 00 de    	lsr.w     w0, #0xf, w0
    4e9a:	00 40 78    	mov.b     w0, w0
    4e9c:	00 80 fb    	ze        w0, w0
    4e9e:	61 00 60    	and.w     w0, #0x1, w0
    4ea0:	46 00 dd    	sl.w      w0, #0x6, w0
    4ea2:	61 16 80    	mov.w     0x2cc, w1
    4ea4:	01 60 a1    	bclr.w    w1, #0x6
    4ea6:	01 00 70    	ior.w     w0, w1, w0
    4ea8:	60 16 88    	mov.w     w0, 0x2cc
    4eaa:	12 00 37    	bra       0x4ed0 <.L11>

00004eac <.L15>:
    else if (pin == 3)
    4eac:	1e 00 78    	mov.w     [w14], w0
    4eae:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4eb0:	0f 00 3a    	bra       NZ, 0x4ed0 <.L11>
        D3_LAT = !D3_LAT;
    4eb2:	61 16 80    	mov.w     0x2cc, w1
    4eb4:	00 08 20    	mov.w     #0x80, w0
    4eb6:	00 80 60    	and.w     w1, w0, w0
    4eb8:	00 f0 a7    	btsc.w    w0, #0xf
    4eba:	00 00 ea    	neg.w     w0, w0
    4ebc:	00 00 e9    	dec.w     w0, w0
    4ebe:	4f 00 de    	lsr.w     w0, #0xf, w0
    4ec0:	00 40 78    	mov.b     w0, w0
    4ec2:	00 80 fb    	ze        w0, w0
    4ec4:	61 00 60    	and.w     w0, #0x1, w0
    4ec6:	47 00 dd    	sl.w      w0, #0x7, w0
    4ec8:	61 16 80    	mov.w     0x2cc, w1
    4eca:	01 70 a1    	bclr.w    w1, #0x7
    4ecc:	01 00 70    	ior.w     w0, w1, w0
    4ece:	60 16 88    	mov.w     w0, 0x2cc

00004ed0 <.L11>:
}
    4ed0:	00 80 fa    	ulnk      
    4ed2:	00 00 06    	return    

00004ed4 <_digout_write>:

void digout_write(uint16_t pin, uint16_t val) {
    4ed4:	04 00 fa    	lnk       #0x4
    4ed6:	00 0f 78    	mov.w     w0, [w14]
    4ed8:	11 07 98    	mov.w     w1, [w14+2]
    if (pin == 0)
    4eda:	1e 00 78    	mov.w     [w14], w0
    4edc:	00 00 e0    	cp0.w     w0
    4ede:	0e 00 3a    	bra       NZ, 0x4efc <.L17>
        D0_LAT = (val) ? 1 : 0;
    4ee0:	1e 00 90    	mov.w     [w14+2], w0
    4ee2:	00 f0 a7    	btsc.w    w0, #0xf
    4ee4:	00 00 ea    	neg.w     w0, w0
    4ee6:	00 00 ea    	neg.w     w0, w0
    4ee8:	4f 00 de    	lsr.w     w0, #0xf, w0
    4eea:	00 40 78    	mov.b     w0, w0
    4eec:	00 80 fb    	ze        w0, w0
    4eee:	61 00 60    	and.w     w0, #0x1, w0
    4ef0:	47 00 dd    	sl.w      w0, #0x7, w0
    4ef2:	a1 17 80    	mov.w     0x2f4, w1
    4ef4:	01 70 a1    	bclr.w    w1, #0x7
    4ef6:	01 00 70    	ior.w     w0, w1, w0
    4ef8:	a0 17 88    	mov.w     w0, 0x2f4
    4efa:	32 00 37    	bra       0x4f60 <.L16>

00004efc <.L17>:
    else if (pin == 1)
    4efc:	1e 00 78    	mov.w     [w14], w0
    4efe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4f00:	0e 00 3a    	bra       NZ, 0x4f1e <.L19>
        D1_LAT = (val) ? 1 : 0;
    4f02:	1e 00 90    	mov.w     [w14+2], w0
    4f04:	00 f0 a7    	btsc.w    w0, #0xf
    4f06:	00 00 ea    	neg.w     w0, w0
    4f08:	00 00 ea    	neg.w     w0, w0
    4f0a:	4f 00 de    	lsr.w     w0, #0xf, w0
    4f0c:	00 40 78    	mov.b     w0, w0
    4f0e:	00 80 fb    	ze        w0, w0
    4f10:	61 00 60    	and.w     w0, #0x1, w0
    4f12:	44 00 dd    	sl.w      w0, #0x4, w0
    4f14:	61 16 80    	mov.w     0x2cc, w1
    4f16:	01 40 a1    	bclr.w    w1, #0x4
    4f18:	01 00 70    	ior.w     w0, w1, w0
    4f1a:	60 16 88    	mov.w     w0, 0x2cc
    4f1c:	21 00 37    	bra       0x4f60 <.L16>

00004f1e <.L19>:
    else if (pin == 2)
    4f1e:	1e 00 78    	mov.w     [w14], w0
    4f20:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4f22:	0e 00 3a    	bra       NZ, 0x4f40 <.L20>
        D2_LAT = (val) ? 1 : 0;
    4f24:	1e 00 90    	mov.w     [w14+2], w0
    4f26:	00 f0 a7    	btsc.w    w0, #0xf
    4f28:	00 00 ea    	neg.w     w0, w0
    4f2a:	00 00 ea    	neg.w     w0, w0
    4f2c:	4f 00 de    	lsr.w     w0, #0xf, w0
    4f2e:	00 40 78    	mov.b     w0, w0
    4f30:	00 80 fb    	ze        w0, w0
    4f32:	61 00 60    	and.w     w0, #0x1, w0
    4f34:	46 00 dd    	sl.w      w0, #0x6, w0
    4f36:	61 16 80    	mov.w     0x2cc, w1
    4f38:	01 60 a1    	bclr.w    w1, #0x6
    4f3a:	01 00 70    	ior.w     w0, w1, w0
    4f3c:	60 16 88    	mov.w     w0, 0x2cc
    4f3e:	10 00 37    	bra       0x4f60 <.L16>

00004f40 <.L20>:
    else if (pin == 3)
    4f40:	1e 00 78    	mov.w     [w14], w0
    4f42:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4f44:	0d 00 3a    	bra       NZ, 0x4f60 <.L16>
        D3_LAT = (val) ? 1 : 0;
    4f46:	1e 00 90    	mov.w     [w14+2], w0
    4f48:	00 f0 a7    	btsc.w    w0, #0xf
    4f4a:	00 00 ea    	neg.w     w0, w0
    4f4c:	00 00 ea    	neg.w     w0, w0
    4f4e:	4f 00 de    	lsr.w     w0, #0xf, w0
    4f50:	00 40 78    	mov.b     w0, w0
    4f52:	00 80 fb    	ze        w0, w0
    4f54:	61 00 60    	and.w     w0, #0x1, w0
    4f56:	47 00 dd    	sl.w      w0, #0x7, w0
    4f58:	61 16 80    	mov.w     0x2cc, w1
    4f5a:	01 70 a1    	bclr.w    w1, #0x7
    4f5c:	01 00 70    	ior.w     w0, w1, w0
    4f5e:	60 16 88    	mov.w     w0, 0x2cc

00004f60 <.L16>:
}
    4f60:	00 80 fa    	ulnk      
    4f62:	00 00 06    	return    

00004f64 <_digout_read>:

uint16_t digout_read(uint16_t pin) {
    4f64:	02 00 fa    	lnk       #0x2
    4f66:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    4f68:	1e 00 78    	mov.w     [w14], w0
    4f6a:	00 00 e0    	cp0.w     w0
    4f6c:	05 00 3a    	bra       NZ, 0x4f78 <.L22>
        return D0;
    4f6e:	90 17 80    	mov.w     0x2f2, w0
    4f70:	47 00 de    	lsr.w     w0, #0x7, w0
    4f72:	61 40 60    	and.b     w0, #0x1, w0
    4f74:	00 80 fb    	ze        w0, w0
    4f76:	19 00 37    	bra       0x4faa <.L23>

00004f78 <.L22>:
    else if (pin == 1)
    4f78:	1e 00 78    	mov.w     [w14], w0
    4f7a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4f7c:	05 00 3a    	bra       NZ, 0x4f88 <.L24>
        return D1;
    4f7e:	50 16 80    	mov.w     0x2ca, w0
    4f80:	44 00 de    	lsr.w     w0, #0x4, w0
    4f82:	61 40 60    	and.b     w0, #0x1, w0
    4f84:	00 80 fb    	ze        w0, w0
    4f86:	11 00 37    	bra       0x4faa <.L23>

00004f88 <.L24>:
    else if (pin == 2)
    4f88:	1e 00 78    	mov.w     [w14], w0
    4f8a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4f8c:	05 00 3a    	bra       NZ, 0x4f98 <.L25>
        return D2;
    4f8e:	50 16 80    	mov.w     0x2ca, w0
    4f90:	46 00 de    	lsr.w     w0, #0x6, w0
    4f92:	61 40 60    	and.b     w0, #0x1, w0
    4f94:	00 80 fb    	ze        w0, w0
    4f96:	09 00 37    	bra       0x4faa <.L23>

00004f98 <.L25>:
    else if (pin == 3)
    4f98:	1e 00 78    	mov.w     [w14], w0
    4f9a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4f9c:	05 00 3a    	bra       NZ, 0x4fa8 <.L26>
        return D3;
    4f9e:	50 16 80    	mov.w     0x2ca, w0
    4fa0:	47 00 de    	lsr.w     w0, #0x7, w0
    4fa2:	61 40 60    	and.b     w0, #0x1, w0
    4fa4:	00 80 fb    	ze        w0, w0
    4fa6:	01 00 37    	bra       0x4faa <.L23>

00004fa8 <.L26>:
    else
        return 0xFFFF;
    4fa8:	00 80 eb    	setm.w    w0

00004faa <.L23>:
}
    4faa:	00 80 fa    	ulnk      
    4fac:	00 00 06    	return    

00004fae <_digout_set_od>:

void digout_set_od(uint16_t pin, uint16_t val) {
    4fae:	04 00 fa    	lnk       #0x4
    4fb0:	00 0f 78    	mov.w     w0, [w14]
    4fb2:	11 07 98    	mov.w     w1, [w14+2]
    if (pin == 0)
    4fb4:	1e 00 78    	mov.w     [w14], w0
    4fb6:	00 00 e0    	cp0.w     w0
    4fb8:	0e 00 3a    	bra       NZ, 0x4fd6 <.L28>
        D0_OD = (val) ? 1 : 0;
    4fba:	1e 00 90    	mov.w     [w14+2], w0
    4fbc:	00 f0 a7    	btsc.w    w0, #0xf
    4fbe:	00 00 ea    	neg.w     w0, w0
    4fc0:	00 00 ea    	neg.w     w0, w0
    4fc2:	4f 00 de    	lsr.w     w0, #0xf, w0
    4fc4:	00 40 78    	mov.b     w0, w0
    4fc6:	00 80 fb    	ze        w0, w0
    4fc8:	61 00 60    	and.w     w0, #0x1, w0
    4fca:	47 00 dd    	sl.w      w0, #0x7, w0
    4fcc:	b1 17 80    	mov.w     0x2f6, w1
    4fce:	01 70 a1    	bclr.w    w1, #0x7
    4fd0:	01 00 70    	ior.w     w0, w1, w0
    4fd2:	b0 17 88    	mov.w     w0, 0x2f6
    4fd4:	32 00 37    	bra       0x503a <.L27>

00004fd6 <.L28>:
    else if (pin == 1)
    4fd6:	1e 00 78    	mov.w     [w14], w0
    4fd8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4fda:	0e 00 3a    	bra       NZ, 0x4ff8 <.L30>
        D1_OD = (val) ? 1 : 0;
    4fdc:	1e 00 90    	mov.w     [w14+2], w0
    4fde:	00 f0 a7    	btsc.w    w0, #0xf
    4fe0:	00 00 ea    	neg.w     w0, w0
    4fe2:	00 00 ea    	neg.w     w0, w0
    4fe4:	4f 00 de    	lsr.w     w0, #0xf, w0
    4fe6:	00 40 78    	mov.b     w0, w0
    4fe8:	00 80 fb    	ze        w0, w0
    4fea:	61 00 60    	and.w     w0, #0x1, w0
    4fec:	44 00 dd    	sl.w      w0, #0x4, w0
    4fee:	71 16 80    	mov.w     0x2ce, w1
    4ff0:	01 40 a1    	bclr.w    w1, #0x4
    4ff2:	01 00 70    	ior.w     w0, w1, w0
    4ff4:	70 16 88    	mov.w     w0, 0x2ce
    4ff6:	21 00 37    	bra       0x503a <.L27>

00004ff8 <.L30>:
    else if (pin == 2)
    4ff8:	1e 00 78    	mov.w     [w14], w0
    4ffa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4ffc:	0e 00 3a    	bra       NZ, 0x501a <.L31>
        D2_OD = (val) ? 1 : 0;
    4ffe:	1e 00 90    	mov.w     [w14+2], w0
    5000:	00 f0 a7    	btsc.w    w0, #0xf
    5002:	00 00 ea    	neg.w     w0, w0
    5004:	00 00 ea    	neg.w     w0, w0
    5006:	4f 00 de    	lsr.w     w0, #0xf, w0
    5008:	00 40 78    	mov.b     w0, w0
    500a:	00 80 fb    	ze        w0, w0
    500c:	61 00 60    	and.w     w0, #0x1, w0
    500e:	46 00 dd    	sl.w      w0, #0x6, w0
    5010:	71 16 80    	mov.w     0x2ce, w1
    5012:	01 60 a1    	bclr.w    w1, #0x6
    5014:	01 00 70    	ior.w     w0, w1, w0
    5016:	70 16 88    	mov.w     w0, 0x2ce
    5018:	10 00 37    	bra       0x503a <.L27>

0000501a <.L31>:
    else if (pin == 3)
    501a:	1e 00 78    	mov.w     [w14], w0
    501c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    501e:	0d 00 3a    	bra       NZ, 0x503a <.L27>
        D3_OD = (val) ? 1 : 0;
    5020:	1e 00 90    	mov.w     [w14+2], w0
    5022:	00 f0 a7    	btsc.w    w0, #0xf
    5024:	00 00 ea    	neg.w     w0, w0
    5026:	00 00 ea    	neg.w     w0, w0
    5028:	4f 00 de    	lsr.w     w0, #0xf, w0
    502a:	00 40 78    	mov.b     w0, w0
    502c:	00 80 fb    	ze        w0, w0
    502e:	61 00 60    	and.w     w0, #0x1, w0
    5030:	47 00 dd    	sl.w      w0, #0x7, w0
    5032:	71 16 80    	mov.w     0x2ce, w1
    5034:	01 70 a1    	bclr.w    w1, #0x7
    5036:	01 00 70    	ior.w     w0, w1, w0
    5038:	70 16 88    	mov.w     w0, 0x2ce

0000503a <.L27>:
}
    503a:	00 80 fa    	ulnk      
    503c:	00 00 06    	return    

0000503e <_digout_get_od>:

uint16_t digout_get_od(uint16_t pin) {
    503e:	02 00 fa    	lnk       #0x2
    5040:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    5042:	1e 00 78    	mov.w     [w14], w0
    5044:	00 00 e0    	cp0.w     w0
    5046:	05 00 3a    	bra       NZ, 0x5052 <.L33>
        return D0_OD;
    5048:	b0 17 80    	mov.w     0x2f6, w0
    504a:	47 00 de    	lsr.w     w0, #0x7, w0
    504c:	61 40 60    	and.b     w0, #0x1, w0
    504e:	00 80 fb    	ze        w0, w0
    5050:	19 00 37    	bra       0x5084 <.L34>

00005052 <.L33>:
    else if (pin == 1)
    5052:	1e 00 78    	mov.w     [w14], w0
    5054:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5056:	05 00 3a    	bra       NZ, 0x5062 <.L35>
        return D1_OD;
    5058:	70 16 80    	mov.w     0x2ce, w0
    505a:	44 00 de    	lsr.w     w0, #0x4, w0
    505c:	61 40 60    	and.b     w0, #0x1, w0
    505e:	00 80 fb    	ze        w0, w0
    5060:	11 00 37    	bra       0x5084 <.L34>

00005062 <.L35>:
    else if (pin == 2)
    5062:	1e 00 78    	mov.w     [w14], w0
    5064:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5066:	05 00 3a    	bra       NZ, 0x5072 <.L36>
        return D2_OD;
    5068:	70 16 80    	mov.w     0x2ce, w0
    506a:	46 00 de    	lsr.w     w0, #0x6, w0
    506c:	61 40 60    	and.b     w0, #0x1, w0
    506e:	00 80 fb    	ze        w0, w0
    5070:	09 00 37    	bra       0x5084 <.L34>

00005072 <.L36>:
    else if (pin == 3)
    5072:	1e 00 78    	mov.w     [w14], w0
    5074:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5076:	05 00 3a    	bra       NZ, 0x5082 <.L37>
        return D3_OD;
    5078:	70 16 80    	mov.w     0x2ce, w0
    507a:	47 00 de    	lsr.w     w0, #0x7, w0
    507c:	61 40 60    	and.b     w0, #0x1, w0
    507e:	00 80 fb    	ze        w0, w0
    5080:	01 00 37    	bra       0x5084 <.L34>

00005082 <.L37>:
    else
        return 0xFFFF;
    5082:	00 80 eb    	setm.w    w0

00005084 <.L34>:
}
    5084:	00 80 fa    	ulnk      
    5086:	00 00 06    	return    

00005088 <_digout_set_duty>:

void digout_set_duty(uint16_t pin, uint16_t duty) {
    5088:	0a 00 fa    	lnk       #0xa
    508a:	30 07 98    	mov.w     w0, [w14+6]
    508c:	41 07 98    	mov.w     w1, [w14+8]
    OCx_T *oc;
    WORD32 temp;

    oc = (OCx_T *)&OC1CON1;
    508e:	00 19 20    	mov.w     #0x190, w0
    5090:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    5092:	3e 00 90    	mov.w     [w14+6], w0
    5094:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5096:	18 00 3e    	bra       GTU, 0x50c8 <.L38>
        temp.ul = (uint32_t)duty * (uint32_t)(oc[pin].OCxRS);
    5098:	4e 00 90    	mov.w     [w14+8], w0
    509a:	61 01 b8    	mul.uu    w0, #0x1, w2
    509c:	3e 00 90    	mov.w     [w14+6], w0
    509e:	6a 00 b9    	mul.su    w0, #0xa, w0
    50a0:	00 00 78    	mov.w     w0, w0
    50a2:	1e 00 40    	add.w     w0, [w14], w0
    50a4:	20 00 90    	mov.w     [w0+4], w0
    50a6:	80 00 eb    	clr.w     w1
    50a8:	00 9a b9    	mul.ss    w3, w0, w4
    50aa:	04 02 78    	mov.w     w4, w4
    50ac:	02 8b b9    	mul.ss    w1, w2, w6
    50ae:	86 02 78    	mov.w     w6, w5
    50b0:	05 02 42    	add.w     w4, w5, w4
    50b2:	00 10 b8    	mul.uu    w2, w0, w0
    50b4:	01 02 42    	add.w     w4, w1, w4
    50b6:	84 00 78    	mov.w     w4, w1
    50b8:	10 07 98    	mov.w     w0, [w14+2]
    50ba:	21 07 98    	mov.w     w1, [w14+4]
        oc[pin].OCxR = temp.w[1];
    50bc:	3e 00 90    	mov.w     [w14+6], w0
    50be:	6a 00 b9    	mul.su    w0, #0xa, w0
    50c0:	00 00 78    	mov.w     w0, w0
    50c2:	1e 00 40    	add.w     w0, [w14], w0
    50c4:	ae 00 90    	mov.w     [w14+4], w1
    50c6:	31 00 98    	mov.w     w1, [w0+6]

000050c8 <.L38>:
    }
}
    50c8:	00 80 fa    	ulnk      
    50ca:	00 00 06    	return    

000050cc <_digout_get_duty>:

uint16_t digout_get_duty(uint16_t pin) {
    50cc:	08 00 fa    	lnk       #0x8
    50ce:	30 07 98    	mov.w     w0, [w14+6]
    OCx_T *oc;
    WORD32 temp;

    oc = (OCx_T *)&OC1CON1;
    50d0:	00 19 20    	mov.w     #0x190, w0
    50d2:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    50d4:	3e 00 90    	mov.w     [w14+6], w0
    50d6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    50d8:	15 00 3e    	bra       GTU, 0x5104 <.L41>
        temp.w[0] = 0;
    50da:	00 00 eb    	clr.w     w0
    50dc:	10 07 98    	mov.w     w0, [w14+2]
        temp.w[1] = oc[pin].OCxR;
    50de:	3e 00 90    	mov.w     [w14+6], w0
    50e0:	6a 00 b9    	mul.su    w0, #0xa, w0
    50e2:	00 00 78    	mov.w     w0, w0
    50e4:	1e 00 40    	add.w     w0, [w14], w0
    50e6:	30 00 90    	mov.w     [w0+6], w0
    50e8:	20 07 98    	mov.w     w0, [w14+4]
        return (uint16_t)(temp.ul / (uint32_t)(oc[pin].OCxRS));
    50ea:	1e 02 90    	mov.w     [w14+2], w4
    50ec:	ae 02 90    	mov.w     [w14+4], w5
    50ee:	3e 00 90    	mov.w     [w14+6], w0
    50f0:	6a 00 b9    	mul.su    w0, #0xa, w0
    50f2:	00 00 78    	mov.w     w0, w0
    50f4:	1e 00 40    	add.w     w0, [w14], w0
    50f6:	20 00 90    	mov.w     [w0+4], w0
    50f8:	80 00 eb    	clr.w     w1
    50fa:	00 01 be    	mov.d     w0, w2
    50fc:	04 00 be    	mov.d     w4, w0
    50fe:	90 e1 07    	rcall     0x1420 <___udivsi3> <.L0> <.L0> <.L0>
    5100:	00 00 78    	mov.w     w0, w0
    5102:	01 00 37    	bra       0x5106 <.L42>

00005104 <.L41>:
    } else
        return 0xFFFF;
    5104:	00 80 eb    	setm.w    w0

00005106 <.L42>:
}
    5106:	00 80 fa    	ulnk      
    5108:	00 00 06    	return    

0000510a <_digout_set_period>:

void digout_set_period(uint16_t pin, uint16_t period) {
    510a:	0c 00 fa    	lnk       #0xc
    510c:	40 07 98    	mov.w     w0, [w14+8]
    510e:	51 07 98    	mov.w     w1, [w14+10]
    OCx_T *oc;
    WORD32 temp;
    uint16_t duty;

    oc = (OCx_T *)&OC1CON1;
    5110:	00 19 20    	mov.w     #0x190, w0
    5112:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    5114:	4e 00 90    	mov.w     [w14+8], w0
    5116:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5118:	34 00 3e    	bra       GTU, 0x5182 <.L43>
        temp.w[0] = 0;
    511a:	00 00 eb    	clr.w     w0
    511c:	20 07 98    	mov.w     w0, [w14+4]
        temp.w[1] = oc[pin].OCxR;
    511e:	4e 00 90    	mov.w     [w14+8], w0
    5120:	6a 00 b9    	mul.su    w0, #0xa, w0
    5122:	00 00 78    	mov.w     w0, w0
    5124:	1e 00 40    	add.w     w0, [w14], w0
    5126:	30 00 90    	mov.w     [w0+6], w0
    5128:	30 07 98    	mov.w     w0, [w14+6]
        duty = (uint16_t)(temp.ul / (uint32_t)(oc[pin].OCxRS));
    512a:	2e 02 90    	mov.w     [w14+4], w4
    512c:	be 02 90    	mov.w     [w14+6], w5
    512e:	4e 00 90    	mov.w     [w14+8], w0
    5130:	6a 00 b9    	mul.su    w0, #0xa, w0
    5132:	00 00 78    	mov.w     w0, w0
    5134:	1e 00 40    	add.w     w0, [w14], w0
    5136:	20 00 90    	mov.w     [w0+4], w0
    5138:	80 00 eb    	clr.w     w1
    513a:	00 01 be    	mov.d     w0, w2
    513c:	04 00 be    	mov.d     w4, w0
    513e:	70 e1 07    	rcall     0x1420 <___udivsi3> <.L0> <.L0> <.L0>
    5140:	10 07 98    	mov.w     w0, [w14+2]
        temp.ul = (uint32_t)duty * (uint32_t)period;
    5142:	1e 00 90    	mov.w     [w14+2], w0
    5144:	61 01 b8    	mul.uu    w0, #0x1, w2
    5146:	5e 00 90    	mov.w     [w14+10], w0
    5148:	80 00 eb    	clr.w     w1
    514a:	00 9a b9    	mul.ss    w3, w0, w4
    514c:	04 02 78    	mov.w     w4, w4
    514e:	02 8b b9    	mul.ss    w1, w2, w6
    5150:	86 02 78    	mov.w     w6, w5
    5152:	05 02 42    	add.w     w4, w5, w4
    5154:	00 10 b8    	mul.uu    w2, w0, w0
    5156:	01 02 42    	add.w     w4, w1, w4
    5158:	84 00 78    	mov.w     w4, w1
    515a:	20 07 98    	mov.w     w0, [w14+4]
    515c:	31 07 98    	mov.w     w1, [w14+6]
        oc[pin].OCxRS = period;
    515e:	4e 00 90    	mov.w     [w14+8], w0
    5160:	6a 00 b9    	mul.su    w0, #0xa, w0
    5162:	00 00 78    	mov.w     w0, w0
    5164:	1e 00 40    	add.w     w0, [w14], w0
    5166:	de 00 90    	mov.w     [w14+10], w1
    5168:	21 00 98    	mov.w     w1, [w0+4]
        oc[pin].OCxR = temp.w[1];
    516a:	4e 00 90    	mov.w     [w14+8], w0
    516c:	6a 00 b9    	mul.su    w0, #0xa, w0
    516e:	00 00 78    	mov.w     w0, w0
    5170:	1e 00 40    	add.w     w0, [w14], w0
    5172:	be 00 90    	mov.w     [w14+6], w1
    5174:	31 00 98    	mov.w     w1, [w0+6]
        oc[pin].OCxTMR = 0;
    5176:	4e 00 90    	mov.w     [w14+8], w0
    5178:	6a 00 b9    	mul.su    w0, #0xa, w0
    517a:	00 00 78    	mov.w     w0, w0
    517c:	1e 00 40    	add.w     w0, [w14], w0
    517e:	80 00 eb    	clr.w     w1
    5180:	41 00 98    	mov.w     w1, [w0+8]

00005182 <.L43>:
    }
}
    5182:	00 80 fa    	ulnk      
    5184:	00 00 06    	return    

00005186 <_digout_get_period>:

uint16_t digout_get_period(uint16_t pin) {
    5186:	04 00 fa    	lnk       #0x4
    5188:	10 07 98    	mov.w     w0, [w14+2]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    518a:	00 19 20    	mov.w     #0x190, w0
    518c:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    518e:	1e 00 90    	mov.w     [w14+2], w0
    5190:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5192:	06 00 3e    	bra       GTU, 0x51a0 <.L46>
        return oc[pin].OCxRS;
    5194:	1e 00 90    	mov.w     [w14+2], w0
    5196:	6a 00 b9    	mul.su    w0, #0xa, w0
    5198:	00 00 78    	mov.w     w0, w0
    519a:	1e 00 40    	add.w     w0, [w14], w0
    519c:	20 00 90    	mov.w     [w0+4], w0
    519e:	01 00 37    	bra       0x51a2 <.L47>

000051a0 <.L46>:
    else
        return 0xFFFF;
    51a0:	00 80 eb    	setm.w    w0

000051a2 <.L47>:
}
    51a2:	00 80 fa    	ulnk      
    51a4:	00 00 06    	return    

000051a6 <_digout_set_width>:

void digout_set_width(uint16_t pin, uint16_t width) {
    51a6:	06 00 fa    	lnk       #0x6
    51a8:	10 07 98    	mov.w     w0, [w14+2]
    51aa:	21 07 98    	mov.w     w1, [w14+4]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    51ac:	00 19 20    	mov.w     #0x190, w0
    51ae:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4){
    51b0:	1e 00 90    	mov.w     [w14+2], w0
    51b2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    51b4:	12 00 3e    	bra       GTU, 0x51da <.L48>
        oc[pin].OCxRS = width;
    51b6:	1e 00 90    	mov.w     [w14+2], w0
    51b8:	6a 00 b9    	mul.su    w0, #0xa, w0
    51ba:	00 00 78    	mov.w     w0, w0
    51bc:	1e 00 40    	add.w     w0, [w14], w0
    51be:	ae 00 90    	mov.w     [w14+4], w1
    51c0:	21 00 98    	mov.w     w1, [w0+4]
        oc[pin].OCxR = 1;
    51c2:	1e 00 90    	mov.w     [w14+2], w0
    51c4:	6a 00 b9    	mul.su    w0, #0xa, w0
    51c6:	00 00 78    	mov.w     w0, w0
    51c8:	1e 00 40    	add.w     w0, [w14], w0
    51ca:	11 00 20    	mov.w     #0x1, w1
    51cc:	31 00 98    	mov.w     w1, [w0+6]
        oc[pin].OCxTMR = 0;
    51ce:	1e 00 90    	mov.w     [w14+2], w0
    51d0:	6a 00 b9    	mul.su    w0, #0xa, w0
    51d2:	00 00 78    	mov.w     w0, w0
    51d4:	1e 00 40    	add.w     w0, [w14], w0
    51d6:	80 00 eb    	clr.w     w1
    51d8:	41 00 98    	mov.w     w1, [w0+8]

000051da <.L48>:
    }
}
    51da:	00 80 fa    	ulnk      
    51dc:	00 00 06    	return    

000051de <_digout_get_width>:

uint16_t digout_get_width(uint16_t pin) {
    51de:	04 00 fa    	lnk       #0x4
    51e0:	10 07 98    	mov.w     w0, [w14+2]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    51e2:	00 19 20    	mov.w     #0x190, w0
    51e4:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    51e6:	1e 00 90    	mov.w     [w14+2], w0
    51e8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    51ea:	06 00 3e    	bra       GTU, 0x51f8 <.L51>
        return oc[pin].OCxRS;
    51ec:	1e 00 90    	mov.w     [w14+2], w0
    51ee:	6a 00 b9    	mul.su    w0, #0xa, w0
    51f0:	00 00 78    	mov.w     w0, w0
    51f2:	1e 00 40    	add.w     w0, [w14], w0
    51f4:	20 00 90    	mov.w     [w0+4], w0
    51f6:	01 00 37    	bra       0x51fa <.L52>

000051f8 <.L51>:
    else
        return 0xFFFF;
    51f8:	00 80 eb    	setm.w    w0

000051fa <.L52>:
}
    51fa:	00 80 fa    	ulnk      
    51fc:	00 00 06    	return    

000051fe <_digout_set_timer1_period>:

void digout_set_timer1_period(uint16_t value1, uint16_t value2) {
    51fe:	08 00 fa    	lnk       #0x8
    5200:	20 07 98    	mov.w     w0, [w14+4]
    5202:	31 07 98    	mov.w     w1, [w14+6]
    uint16_t pin;
    OCx_T *oc;

    T1CONbits.TON = 0;
    5204:	05 e1 a9    	bclr.b    0x105, #0x7
    PR1 = value1;
    5206:	ae 00 90    	mov.w     [w14+4], w1
    5208:	11 08 88    	mov.w     w1, 0x102
    T1CON = value2;
    520a:	be 00 90    	mov.w     [w14+6], w1
    520c:	21 08 88    	mov.w     w1, 0x104
    TMR1 = 0;
    520e:	00 21 ef    	clr.w     0x100

    oc = (OCx_T *)&OC1CON1;
    5210:	00 19 20    	mov.w     #0x190, w0
    5212:	10 07 98    	mov.w     w0, [w14+2]
    for (pin = 0; pin < 4; pin++) {
    5214:	00 00 eb    	clr.w     w0
    5216:	00 0f 78    	mov.w     w0, [w14]
    5218:	0f 00 37    	bra       0x5238 <.L54>

0000521a <.L56>:
        if (pin_modes[pin] == DIGOUT_SERVO) {
    521a:	61 86 20    	mov.w     #0x866, w1
    521c:	1e 00 78    	mov.w     [w14], w0
    521e:	00 00 40    	add.w     w0, w0, w0
    5220:	00 80 40    	add.w     w1, w0, w0
    5222:	10 00 78    	mov.w     [w0], w0
    5224:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5226:	07 00 3a    	bra       NZ, 0x5236 <.L55>
            oc[pin].OCxTMR = 0;
    5228:	1e 00 78    	mov.w     [w14], w0
    522a:	6a 00 b9    	mul.su    w0, #0xa, w0
    522c:	00 00 78    	mov.w     w0, w0
    522e:	9e 00 90    	mov.w     [w14+2], w1
    5230:	00 80 40    	add.w     w1, w0, w0
    5232:	80 00 eb    	clr.w     w1
    5234:	41 00 98    	mov.w     w1, [w0+8]

00005236 <.L55>:
    5236:	1e 0f e8    	inc.w     [w14], [w14]

00005238 <.L54>:
    5238:	1e 00 78    	mov.w     [w14], w0
    523a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    523c:	ee ff 36    	bra       LEU, 0x521a <.L56>
        }
    }
    T1CONbits.TON = 1;
    523e:	05 e1 a8    	bset.b    0x105, #0x7
}
    5240:	00 80 fa    	ulnk      
    5242:	00 00 06    	return    

00005244 <_digout_set_mode>:

void digout_set_mode(uint16_t pin, uint16_t mode) {
    5244:	0a 00 fa    	lnk       #0xa
    5246:	30 07 98    	mov.w     w0, [w14+6]
    5248:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t *RPOR, *RPINR;
    OCx_T *oc;

    if ((pin > 3) || (mode > DIGOUT_SERVO))
    524a:	3e 00 90    	mov.w     [w14+6], w0
    524c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    524e:	7d 01 3e    	bra       GTU, 0x554a <.L86>
    5250:	4e 00 90    	mov.w     [w14+8], w0
    5252:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5254:	7c 01 3e    	bra       GTU, 0x554e <.L87>
        return;

    oc = (OCx_T *)&OC1CON1;
    5256:	00 19 20    	mov.w     #0x190, w0
    5258:	00 0f 78    	mov.w     w0, [w14]
    RPOR = (uint8_t *)&RPOR0;
    525a:	00 6c 20    	mov.w     #0x6c0, w0
    525c:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    525e:	00 68 20    	mov.w     #0x680, w0
    5260:	20 07 98    	mov.w     w0, [w14+4]

    if ((pin_modes[pin] == DIGOUT_PWM) || (pin_modes[pin] == DIGOUT_SERVO)) {
    5262:	61 86 20    	mov.w     #0x866, w1
    5264:	3e 00 90    	mov.w     [w14+6], w0
    5266:	00 00 40    	add.w     w0, w0, w0
    5268:	00 80 40    	add.w     w1, w0, w0
    526a:	10 00 78    	mov.w     [w0], w0
    526c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    526e:	07 00 32    	bra       Z, 0x527e <.L61>
    5270:	61 86 20    	mov.w     #0x866, w1
    5272:	3e 00 90    	mov.w     [w14+6], w0
    5274:	00 00 40    	add.w     w0, w0, w0
    5276:	00 80 40    	add.w     w1, w0, w0
    5278:	10 00 78    	mov.w     [w0], w0
    527a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    527c:	3d 00 3a    	bra       NZ, 0x52f8 <.L62>

0000527e <.L61>:
        oc[pin].OCxCON1 = 0;
    527e:	3e 00 90    	mov.w     [w14+6], w0
    5280:	6a 00 b9    	mul.su    w0, #0xa, w0
    5282:	00 00 78    	mov.w     w0, w0
    5284:	1e 00 40    	add.w     w0, [w14], w0
    5286:	80 00 eb    	clr.w     w1
    5288:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0;
    528a:	3e 00 90    	mov.w     [w14+6], w0
    528c:	6a 00 b9    	mul.su    w0, #0xa, w0
    528e:	00 00 78    	mov.w     w0, w0
    5290:	1e 00 40    	add.w     w0, [w14], w0
    5292:	80 00 eb    	clr.w     w1
    5294:	11 00 98    	mov.w     w1, [w0+2]
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    5296:	11 3a 80    	mov.w     0x742, w1
    5298:	f0 0b 20    	mov.w     #0xbf, w0
    529a:	00 81 60    	and.w     w1, w0, w2
    529c:	60 04 20    	mov.w     #0x46, w0
    529e:	71 05 20    	mov.w     #0x57, w1
    52a0:	23 74 20    	mov.w     #0x742, w3
    52a2:	80 49 78    	mov.b     w0, [w3]
    52a4:	81 49 78    	mov.b     w1, [w3]
    52a6:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0)
    52a8:	3e 00 90    	mov.w     [w14+6], w0
    52aa:	00 00 e0    	cp0.w     w0
    52ac:	05 00 3a    	bra       NZ, 0x52b8 <.L63>
            RPOR[D0_RP] = 0;
    52ae:	1e 00 90    	mov.w     [w14+2], w0
    52b0:	7a 00 40    	add.w     w0, #0x1a, w0
    52b2:	80 40 eb    	clr.b     w1
    52b4:	01 48 78    	mov.b     w1, [w0]
    52b6:	17 00 37    	bra       0x52e6 <.L64>

000052b8 <.L63>:
        else if (pin == 1)
    52b8:	3e 00 90    	mov.w     [w14+6], w0
    52ba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    52bc:	05 00 3a    	bra       NZ, 0x52c8 <.L65>
            RPOR[D1_RP] = 0;
    52be:	1e 00 90    	mov.w     [w14+2], w0
    52c0:	7c 00 40    	add.w     w0, #0x1c, w0
    52c2:	80 40 eb    	clr.b     w1
    52c4:	01 48 78    	mov.b     w1, [w0]
    52c6:	0f 00 37    	bra       0x52e6 <.L64>

000052c8 <.L65>:
        else if (pin == 2)
    52c8:	3e 00 90    	mov.w     [w14+6], w0
    52ca:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    52cc:	05 00 3a    	bra       NZ, 0x52d8 <.L66>
            RPOR[D2_RP] = 0;
    52ce:	1e 00 90    	mov.w     [w14+2], w0
    52d0:	66 00 40    	add.w     w0, #0x6, w0
    52d2:	80 40 eb    	clr.b     w1
    52d4:	01 48 78    	mov.b     w1, [w0]
    52d6:	07 00 37    	bra       0x52e6 <.L64>

000052d8 <.L66>:
        else if (pin == 3)
    52d8:	3e 00 90    	mov.w     [w14+6], w0
    52da:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    52dc:	04 00 3a    	bra       NZ, 0x52e6 <.L64>
            RPOR[D3_RP] = 0;
    52de:	1e 00 90    	mov.w     [w14+2], w0
    52e0:	67 00 40    	add.w     w0, #0x7, w0
    52e2:	80 40 eb    	clr.b     w1
    52e4:	01 48 78    	mov.b     w1, [w0]

000052e6 <.L64>:
        __builtin_write_OSCCONL(OSCCON | 0x40);
    52e6:	10 3a 80    	mov.w     0x742, w0
    52e8:	00 01 78    	mov.w     w0, w2
    52ea:	02 60 a0    	bset.w    w2, #0x6
    52ec:	60 04 20    	mov.w     #0x46, w0
    52ee:	71 05 20    	mov.w     #0x57, w1
    52f0:	23 74 20    	mov.w     #0x742, w3
    52f2:	80 49 78    	mov.b     w0, [w3]
    52f4:	81 49 78    	mov.b     w1, [w3]
    52f6:	82 49 78    	mov.b     w2, [w3]

000052f8 <.L62>:
    }

    if (pin_modes[pin] == DIGOUT_PWM) {
    52f8:	61 86 20    	mov.w     #0x866, w1
    52fa:	3e 00 90    	mov.w     [w14+6], w0
    52fc:	00 00 40    	add.w     w0, w0, w0
    52fe:	00 80 40    	add.w     w1, w0, w0
    5300:	10 00 78    	mov.w     [w0], w0
    5302:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5304:	15 00 3a    	bra       NZ, 0x5330 <.L67>
        pwm_OCxRS_save[pin] = oc[pin].OCxRS;
    5306:	3e 00 90    	mov.w     [w14+6], w0
    5308:	6a 00 b9    	mul.su    w0, #0xa, w0
    530a:	00 00 78    	mov.w     w0, w0
    530c:	1e 00 40    	add.w     w0, [w14], w0
    530e:	a0 00 90    	mov.w     [w0+4], w1
    5310:	02 80 20    	mov.w     #0x800, w2
    5312:	3e 00 90    	mov.w     [w14+6], w0
    5314:	00 00 40    	add.w     w0, w0, w0
    5316:	00 00 41    	add.w     w2, w0, w0
    5318:	01 08 78    	mov.w     w1, [w0]
        pwm_OCxR_save[pin] = oc[pin].OCxR;
    531a:	3e 00 90    	mov.w     [w14+6], w0
    531c:	6a 00 b9    	mul.su    w0, #0xa, w0
    531e:	00 00 78    	mov.w     w0, w0
    5320:	1e 00 40    	add.w     w0, [w14], w0
    5322:	b0 00 90    	mov.w     [w0+6], w1
    5324:	82 80 20    	mov.w     #0x808, w2
    5326:	3e 00 90    	mov.w     [w14+6], w0
    5328:	00 00 40    	add.w     w0, w0, w0
    532a:	00 00 41    	add.w     w2, w0, w0
    532c:	01 08 78    	mov.w     w1, [w0]
    532e:	1b 00 37    	bra       0x5366 <.L68>

00005330 <.L67>:
    } else if (pin_modes[pin] == DIGOUT_SERVO) {
    5330:	61 86 20    	mov.w     #0x866, w1
    5332:	3e 00 90    	mov.w     [w14+6], w0
    5334:	00 00 40    	add.w     w0, w0, w0
    5336:	00 80 40    	add.w     w1, w0, w0
    5338:	10 00 78    	mov.w     [w0], w0
    533a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    533c:	14 00 3a    	bra       NZ, 0x5366 <.L68>
        servo_OCxRS_save[pin] = oc[pin].OCxRS;
    533e:	3e 00 90    	mov.w     [w14+6], w0
    5340:	6a 00 b9    	mul.su    w0, #0xa, w0
    5342:	00 00 78    	mov.w     w0, w0
    5344:	1e 00 40    	add.w     w0, [w14], w0
    5346:	a0 00 90    	mov.w     [w0+4], w1
    5348:	02 81 20    	mov.w     #0x810, w2
    534a:	3e 00 90    	mov.w     [w14+6], w0
    534c:	00 00 40    	add.w     w0, w0, w0
    534e:	00 00 41    	add.w     w2, w0, w0
    5350:	01 08 78    	mov.w     w1, [w0]
        servo_OCxR_save[pin] = oc[pin].OCxR;
    5352:	3e 00 90    	mov.w     [w14+6], w0
    5354:	6a 00 b9    	mul.su    w0, #0xa, w0
    5356:	00 00 78    	mov.w     w0, w0
    5358:	1e 00 40    	add.w     w0, [w14], w0
    535a:	b0 00 90    	mov.w     [w0+6], w1
    535c:	82 81 20    	mov.w     #0x818, w2
    535e:	3e 00 90    	mov.w     [w14+6], w0
    5360:	00 00 40    	add.w     w0, w0, w0
    5362:	00 00 41    	add.w     w2, w0, w0
    5364:	01 08 78    	mov.w     w1, [w0]

00005366 <.L68>:
    }

    pin_modes[pin] = mode;
    5366:	61 86 20    	mov.w     #0x866, w1
    5368:	3e 00 90    	mov.w     [w14+6], w0
    536a:	00 00 40    	add.w     w0, w0, w0
    536c:	00 80 40    	add.w     w1, w0, w0
    536e:	ce 00 90    	mov.w     [w14+8], w1
    5370:	01 08 78    	mov.w     w1, [w0]
    if (mode == DIGOUT_OUT) {
    5372:	4e 00 90    	mov.w     [w14+8], w0
    5374:	00 00 e0    	cp0.w     w0
    5376:	14 00 3a    	bra       NZ, 0x53a0 <.L69>
        if (pin == 0)
    5378:	3e 00 90    	mov.w     [w14+6], w0
    537a:	00 00 e0    	cp0.w     w0
    537c:	02 00 3a    	bra       NZ, 0x5382 <.L70>
            D0_DIR = OUT;
    537e:	f0 e2 a9    	bclr.b    0x2f0, #0x7
    5380:	e7 00 37    	bra       0x5550 <.L57>

00005382 <.L70>:
        else if (pin == 1)
    5382:	3e 00 90    	mov.w     [w14+6], w0
    5384:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5386:	02 00 3a    	bra       NZ, 0x538c <.L71>
            D1_DIR = OUT;
    5388:	c8 82 a9    	bclr.b    0x2c8, #0x4
    538a:	e2 00 37    	bra       0x5550 <.L57>

0000538c <.L71>:
        else if (pin == 2)
    538c:	3e 00 90    	mov.w     [w14+6], w0
    538e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5390:	02 00 3a    	bra       NZ, 0x5396 <.L72>
            D2_DIR = OUT;
    5392:	c8 c2 a9    	bclr.b    0x2c8, #0x6
    5394:	dd 00 37    	bra       0x5550 <.L57>

00005396 <.L72>:
        else if (pin == 3)
    5396:	3e 00 90    	mov.w     [w14+6], w0
    5398:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    539a:	da 00 3a    	bra       NZ, 0x5550 <.L57>
            D3_DIR = OUT;
    539c:	c8 e2 a9    	bclr.b    0x2c8, #0x7
    539e:	d8 00 37    	bra       0x5550 <.L57>

000053a0 <.L69>:
    } else if (mode == DIGOUT_IN) {
    53a0:	4e 00 90    	mov.w     [w14+8], w0
    53a2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    53a4:	14 00 3a    	bra       NZ, 0x53ce <.L73>
        if (pin == 0)
    53a6:	3e 00 90    	mov.w     [w14+6], w0
    53a8:	00 00 e0    	cp0.w     w0
    53aa:	02 00 3a    	bra       NZ, 0x53b0 <.L74>
            D0_DIR = IN;
    53ac:	f0 e2 a8    	bset.b    0x2f0, #0x7
    53ae:	d0 00 37    	bra       0x5550 <.L57>

000053b0 <.L74>:
        else if (pin == 1)
    53b0:	3e 00 90    	mov.w     [w14+6], w0
    53b2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    53b4:	02 00 3a    	bra       NZ, 0x53ba <.L75>
            D1_DIR = IN;
    53b6:	c8 82 a8    	bset.b    0x2c8, #0x4
    53b8:	cb 00 37    	bra       0x5550 <.L57>

000053ba <.L75>:
        else if (pin == 2)
    53ba:	3e 00 90    	mov.w     [w14+6], w0
    53bc:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    53be:	02 00 3a    	bra       NZ, 0x53c4 <.L76>
            D2_DIR = IN;
    53c0:	c8 c2 a8    	bset.b    0x2c8, #0x6
    53c2:	c6 00 37    	bra       0x5550 <.L57>

000053c4 <.L76>:
        else if (pin == 3)
    53c4:	3e 00 90    	mov.w     [w14+6], w0
    53c6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    53c8:	c3 00 3a    	bra       NZ, 0x5550 <.L57>
            D3_DIR = IN;
    53ca:	c8 e2 a8    	bset.b    0x2c8, #0x7
    53cc:	c1 00 37    	bra       0x5550 <.L57>

000053ce <.L73>:
    } else if (mode == DIGOUT_PWM) {
    53ce:	4e 00 90    	mov.w     [w14+8], w0
    53d0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    53d2:	5c 00 3a    	bra       NZ, 0x548c <.L77>
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    53d4:	11 3a 80    	mov.w     0x742, w1
    53d6:	f0 0b 20    	mov.w     #0xbf, w0
    53d8:	00 81 60    	and.w     w1, w0, w2
    53da:	60 04 20    	mov.w     #0x46, w0
    53dc:	71 05 20    	mov.w     #0x57, w1
    53de:	23 74 20    	mov.w     #0x742, w3
    53e0:	80 49 78    	mov.b     w0, [w3]
    53e2:	81 49 78    	mov.b     w1, [w3]
    53e4:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0) {
    53e6:	3e 00 90    	mov.w     [w14+6], w0
    53e8:	00 00 e0    	cp0.w     w0
    53ea:	06 00 3a    	bra       NZ, 0x53f8 <.L78>
            D0_DIR = OUT;
    53ec:	f0 e2 a9    	bclr.b    0x2f0, #0x7
            RPOR[D0_RP] = OC1_RP;
    53ee:	1e 00 90    	mov.w     [w14+2], w0
    53f0:	7a 00 40    	add.w     w0, #0x1a, w0
    53f2:	21 c1 b3    	mov.b     #0x12, w1
    53f4:	01 48 78    	mov.b     w1, [w0]
    53f6:	1a 00 37    	bra       0x542c <.L79>

000053f8 <.L78>:
        } else if (pin == 1) {
    53f8:	3e 00 90    	mov.w     [w14+6], w0
    53fa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    53fc:	06 00 3a    	bra       NZ, 0x540a <.L80>
            D1_DIR = OUT;
    53fe:	c8 82 a9    	bclr.b    0x2c8, #0x4
            RPOR[D1_RP] = OC2_RP;
    5400:	1e 00 90    	mov.w     [w14+2], w0
    5402:	7c 00 40    	add.w     w0, #0x1c, w0
    5404:	31 c1 b3    	mov.b     #0x13, w1
    5406:	01 48 78    	mov.b     w1, [w0]
    5408:	11 00 37    	bra       0x542c <.L79>

0000540a <.L80>:
        } else if (pin == 2) {
    540a:	3e 00 90    	mov.w     [w14+6], w0
    540c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    540e:	06 00 3a    	bra       NZ, 0x541c <.L81>
            D2_DIR = OUT;
    5410:	c8 c2 a9    	bclr.b    0x2c8, #0x6
            RPOR[D2_RP] = OC3_RP;
    5412:	1e 00 90    	mov.w     [w14+2], w0
    5414:	66 00 40    	add.w     w0, #0x6, w0
    5416:	41 c1 b3    	mov.b     #0x14, w1
    5418:	01 48 78    	mov.b     w1, [w0]
    541a:	08 00 37    	bra       0x542c <.L79>

0000541c <.L81>:
        } else if (pin == 3) {
    541c:	3e 00 90    	mov.w     [w14+6], w0
    541e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5420:	05 00 3a    	bra       NZ, 0x542c <.L79>
            D3_DIR = OUT;
    5422:	c8 e2 a9    	bclr.b    0x2c8, #0x7
            RPOR[D3_RP] = OC4_RP;
    5424:	1e 00 90    	mov.w     [w14+2], w0
    5426:	67 00 40    	add.w     w0, #0x7, w0
    5428:	51 c1 b3    	mov.b     #0x15, w1
    542a:	01 48 78    	mov.b     w1, [w0]

0000542c <.L79>:
        }
        __builtin_write_OSCCONL(OSCCON | 0x40);
    542c:	10 3a 80    	mov.w     0x742, w0
    542e:	00 01 78    	mov.w     w0, w2
    5430:	02 60 a0    	bset.w    w2, #0x6
    5432:	60 04 20    	mov.w     #0x46, w0
    5434:	71 05 20    	mov.w     #0x57, w1
    5436:	23 74 20    	mov.w     #0x742, w3
    5438:	80 49 78    	mov.b     w0, [w3]
    543a:	81 49 78    	mov.b     w1, [w3]
    543c:	82 49 78    	mov.b     w2, [w3]
        oc[pin].OCxRS = pwm_OCxRS_save[pin];
    543e:	3e 00 90    	mov.w     [w14+6], w0
    5440:	6a 00 b9    	mul.su    w0, #0xa, w0
    5442:	00 00 78    	mov.w     w0, w0
    5444:	9e 00 40    	add.w     w0, [w14], w1
    5446:	02 80 20    	mov.w     #0x800, w2
    5448:	3e 00 90    	mov.w     [w14+6], w0
    544a:	00 00 40    	add.w     w0, w0, w0
    544c:	00 00 41    	add.w     w2, w0, w0
    544e:	10 00 78    	mov.w     [w0], w0
    5450:	a0 00 98    	mov.w     w0, [w1+4]
        oc[pin].OCxR = pwm_OCxR_save[pin];
    5452:	3e 00 90    	mov.w     [w14+6], w0
    5454:	6a 00 b9    	mul.su    w0, #0xa, w0
    5456:	00 00 78    	mov.w     w0, w0
    5458:	9e 00 40    	add.w     w0, [w14], w1
    545a:	82 80 20    	mov.w     #0x808, w2
    545c:	3e 00 90    	mov.w     [w14+6], w0
    545e:	00 00 40    	add.w     w0, w0, w0
    5460:	00 00 41    	add.w     w2, w0, w0
    5462:	10 00 78    	mov.w     [w0], w0
    5464:	b0 00 98    	mov.w     w0, [w1+6]
        oc[pin].OCxTMR = 0;
    5466:	3e 00 90    	mov.w     [w14+6], w0
    5468:	6a 00 b9    	mul.su    w0, #0xa, w0
    546a:	00 00 78    	mov.w     w0, w0
    546c:	1e 00 40    	add.w     w0, [w14], w0
    546e:	80 00 eb    	clr.w     w1
    5470:	41 00 98    	mov.w     w1, [w0+8]
        oc[pin].OCxCON1 = 0x1C06;
    5472:	3e 00 90    	mov.w     [w14+6], w0
    5474:	6a 00 b9    	mul.su    w0, #0xa, w0
    5476:	00 00 78    	mov.w     w0, w0
    5478:	1e 00 40    	add.w     w0, [w14], w0
    547a:	61 c0 21    	mov.w     #0x1c06, w1
    547c:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0x001F;
    547e:	3e 00 90    	mov.w     [w14+6], w0
    5480:	6a 00 b9    	mul.su    w0, #0xa, w0
    5482:	00 00 78    	mov.w     w0, w0
    5484:	1e 00 40    	add.w     w0, [w14], w0
    5486:	f1 01 20    	mov.w     #0x1f, w1
    5488:	11 00 98    	mov.w     w1, [w0+2]
    548a:	62 00 37    	bra       0x5550 <.L57>

0000548c <.L77>:
    } else if (mode == DIGOUT_SERVO) {
    548c:	4e 00 90    	mov.w     [w14+8], w0
    548e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5490:	5f 00 3a    	bra       NZ, 0x5550 <.L57>
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    5492:	11 3a 80    	mov.w     0x742, w1
    5494:	f0 0b 20    	mov.w     #0xbf, w0
    5496:	00 81 60    	and.w     w1, w0, w2
    5498:	60 04 20    	mov.w     #0x46, w0
    549a:	71 05 20    	mov.w     #0x57, w1
    549c:	23 74 20    	mov.w     #0x742, w3
    549e:	80 49 78    	mov.b     w0, [w3]
    54a0:	81 49 78    	mov.b     w1, [w3]
    54a2:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0) {
    54a4:	3e 00 90    	mov.w     [w14+6], w0
    54a6:	00 00 e0    	cp0.w     w0
    54a8:	06 00 3a    	bra       NZ, 0x54b6 <.L82>
            D0_DIR = OUT;
    54aa:	f0 e2 a9    	bclr.b    0x2f0, #0x7
            RPOR[D0_RP] = OC1_RP;
    54ac:	1e 00 90    	mov.w     [w14+2], w0
    54ae:	7a 00 40    	add.w     w0, #0x1a, w0
    54b0:	21 c1 b3    	mov.b     #0x12, w1
    54b2:	01 48 78    	mov.b     w1, [w0]
    54b4:	1a 00 37    	bra       0x54ea <.L83>

000054b6 <.L82>:
        } else if (pin == 1) {
    54b6:	3e 00 90    	mov.w     [w14+6], w0
    54b8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    54ba:	06 00 3a    	bra       NZ, 0x54c8 <.L84>
            D1_DIR = OUT;
    54bc:	c8 82 a9    	bclr.b    0x2c8, #0x4
            RPOR[D1_RP] = OC2_RP;
    54be:	1e 00 90    	mov.w     [w14+2], w0
    54c0:	7c 00 40    	add.w     w0, #0x1c, w0
    54c2:	31 c1 b3    	mov.b     #0x13, w1
    54c4:	01 48 78    	mov.b     w1, [w0]
    54c6:	11 00 37    	bra       0x54ea <.L83>

000054c8 <.L84>:
        } else if (pin == 2) {
    54c8:	3e 00 90    	mov.w     [w14+6], w0
    54ca:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    54cc:	06 00 3a    	bra       NZ, 0x54da <.L85>
            D2_DIR = OUT;
    54ce:	c8 c2 a9    	bclr.b    0x2c8, #0x6
            RPOR[D2_RP] = OC3_RP;
    54d0:	1e 00 90    	mov.w     [w14+2], w0
    54d2:	66 00 40    	add.w     w0, #0x6, w0
    54d4:	41 c1 b3    	mov.b     #0x14, w1
    54d6:	01 48 78    	mov.b     w1, [w0]
    54d8:	08 00 37    	bra       0x54ea <.L83>

000054da <.L85>:
        } else if (pin == 3) {
    54da:	3e 00 90    	mov.w     [w14+6], w0
    54dc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    54de:	05 00 3a    	bra       NZ, 0x54ea <.L83>
            D3_DIR = OUT;
    54e0:	c8 e2 a9    	bclr.b    0x2c8, #0x7
            RPOR[D3_RP] = OC4_RP;
    54e2:	1e 00 90    	mov.w     [w14+2], w0
    54e4:	67 00 40    	add.w     w0, #0x7, w0
    54e6:	51 c1 b3    	mov.b     #0x15, w1
    54e8:	01 48 78    	mov.b     w1, [w0]

000054ea <.L83>:
        }
        __builtin_write_OSCCONL(OSCCON | 0x40);
    54ea:	10 3a 80    	mov.w     0x742, w0
    54ec:	00 01 78    	mov.w     w0, w2
    54ee:	02 60 a0    	bset.w    w2, #0x6
    54f0:	60 04 20    	mov.w     #0x46, w0
    54f2:	71 05 20    	mov.w     #0x57, w1
    54f4:	23 74 20    	mov.w     #0x742, w3
    54f6:	80 49 78    	mov.b     w0, [w3]
    54f8:	81 49 78    	mov.b     w1, [w3]
    54fa:	82 49 78    	mov.b     w2, [w3]
        oc[pin].OCxRS = servo_OCxRS_save[pin];
    54fc:	3e 00 90    	mov.w     [w14+6], w0
    54fe:	6a 00 b9    	mul.su    w0, #0xa, w0
    5500:	00 00 78    	mov.w     w0, w0
    5502:	9e 00 40    	add.w     w0, [w14], w1
    5504:	02 81 20    	mov.w     #0x810, w2
    5506:	3e 00 90    	mov.w     [w14+6], w0
    5508:	00 00 40    	add.w     w0, w0, w0
    550a:	00 00 41    	add.w     w2, w0, w0
    550c:	10 00 78    	mov.w     [w0], w0
    550e:	a0 00 98    	mov.w     w0, [w1+4]
        oc[pin].OCxR = servo_OCxR_save[pin];
    5510:	3e 00 90    	mov.w     [w14+6], w0
    5512:	6a 00 b9    	mul.su    w0, #0xa, w0
    5514:	00 00 78    	mov.w     w0, w0
    5516:	9e 00 40    	add.w     w0, [w14], w1
    5518:	82 81 20    	mov.w     #0x818, w2
    551a:	3e 00 90    	mov.w     [w14+6], w0
    551c:	00 00 40    	add.w     w0, w0, w0
    551e:	00 00 41    	add.w     w2, w0, w0
    5520:	10 00 78    	mov.w     [w0], w0
    5522:	b0 00 98    	mov.w     w0, [w1+6]
        oc[pin].OCxTMR = 0;
    5524:	3e 00 90    	mov.w     [w14+6], w0
    5526:	6a 00 b9    	mul.su    w0, #0xa, w0
    5528:	00 00 78    	mov.w     w0, w0
    552a:	1e 00 40    	add.w     w0, [w14], w0
    552c:	80 00 eb    	clr.w     w1
    552e:	41 00 98    	mov.w     w1, [w0+8]
        oc[pin].OCxCON1 = 0x1C0F;
    5530:	3e 00 90    	mov.w     [w14+6], w0
    5532:	6a 00 b9    	mul.su    w0, #0xa, w0
    5534:	00 00 78    	mov.w     w0, w0
    5536:	1e 00 40    	add.w     w0, [w14], w0
    5538:	f1 c0 21    	mov.w     #0x1c0f, w1
    553a:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0x008B;
    553c:	3e 00 90    	mov.w     [w14+6], w0
    553e:	6a 00 b9    	mul.su    w0, #0xa, w0
    5540:	00 00 78    	mov.w     w0, w0
    5542:	1e 00 40    	add.w     w0, [w14], w0
    5544:	b1 08 20    	mov.w     #0x8b, w1
    5546:	11 00 98    	mov.w     w1, [w0+2]
    5548:	03 00 37    	bra       0x5550 <.L57>

0000554a <.L86>:
    554a:	00 00 00    	nop       
    554c:	01 00 37    	bra       0x5550 <.L57>

0000554e <.L87>:
    554e:	00 00 00    	nop       

00005550 <.L57>:
    }
}
    5550:	00 80 fa    	ulnk      
    5552:	00 00 06    	return    

00005554 <_digout_get_mode>:

uint16_t digout_get_mode(uint16_t pin) {
    5554:	02 00 fa    	lnk       #0x2
    5556:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    5558:	1e 00 78    	mov.w     [w14], w0
    555a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    555c:	06 00 3e    	bra       GTU, 0x556a <.L89>
        return pin_modes[pin];
    555e:	61 86 20    	mov.w     #0x866, w1
    5560:	1e 00 78    	mov.w     [w14], w0
    5562:	00 00 40    	add.w     w0, w0, w0
    5564:	00 80 40    	add.w     w1, w0, w0
    5566:	10 00 78    	mov.w     [w0], w0
    5568:	01 00 37    	bra       0x556c <.L90>

0000556a <.L89>:
    else
        return 0xFFFF;
    556a:	00 80 eb    	setm.w    w0

0000556c <.L90>:
}
    556c:	00 80 fa    	ulnk      
    556e:	00 00 06    	return    

00005570 <_cdc_set_line_coding_out_callback>:
} CDC_TX_buffer, CDC_RX_buffer;

uint8_t TXbuf[TX_BUFFER_SIZE], RXbuf[RX_BUFFER_SIZE];

void cdc_set_line_coding_out_callback(void) {
    5570:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.b[0] = BD[EP0OUT].address[0];
    5572:	10 b0 80    	mov.w     0x1602, w0
    5574:	90 40 78    	mov.b     [w0], w1
    5576:	c0 85 20    	mov.w     #0x85c, w0
    5578:	01 48 78    	mov.b     w1, [w0]
    CDC_line_coding.dwDTERate.b[1] = BD[EP0OUT].address[1];
    557a:	10 b0 80    	mov.w     0x1602, w0
    557c:	00 00 e8    	inc.w     w0, w0
    557e:	90 40 78    	mov.b     [w0], w1
    5580:	c0 85 20    	mov.w     #0x85c, w0
    5582:	11 40 98    	mov.b     w1, [w0+1]
    CDC_line_coding.dwDTERate.b[2] = BD[EP0OUT].address[2];
    5584:	10 b0 80    	mov.w     0x1602, w0
    5586:	00 80 e8    	inc2.w    w0, w0
    5588:	90 40 78    	mov.b     [w0], w1
    558a:	c0 85 20    	mov.w     #0x85c, w0
    558c:	21 40 98    	mov.b     w1, [w0+2]
    CDC_line_coding.dwDTERate.b[3] = BD[EP0OUT].address[3];
    558e:	10 b0 80    	mov.w     0x1602, w0
    5590:	63 00 40    	add.w     w0, #0x3, w0
    5592:	90 40 78    	mov.b     [w0], w1
    5594:	c0 85 20    	mov.w     #0x85c, w0
    5596:	31 40 98    	mov.b     w1, [w0+3]
    CDC_line_coding.bCharFormat = BD[EP0OUT].address[4];
    5598:	10 b0 80    	mov.w     0x1602, w0
    559a:	64 00 40    	add.w     w0, #0x4, w0
    559c:	90 40 78    	mov.b     [w0], w1
    559e:	c0 85 20    	mov.w     #0x85c, w0
    55a0:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = BD[EP0OUT].address[5];
    55a2:	10 b0 80    	mov.w     0x1602, w0
    55a4:	65 00 40    	add.w     w0, #0x5, w0
    55a6:	90 40 78    	mov.b     [w0], w1
    55a8:	c0 85 20    	mov.w     #0x85c, w0
    55aa:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = BD[EP0OUT].address[6];
    55ac:	10 b0 80    	mov.w     0x1602, w0
    55ae:	66 00 40    	add.w     w0, #0x6, w0
    55b0:	90 40 78    	mov.b     [w0], w1
    55b2:	c0 85 20    	mov.w     #0x85c, w0
    55b4:	61 40 98    	mov.b     w1, [w0+6]
    USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    55b6:	00 00 eb    	clr.w     w0
    55b8:	90 ae 88    	mov.w     w0, 0x15d2
}
    55ba:	00 80 fa    	ulnk      
    55bc:	00 00 06    	return    

000055be <_cdc_setup_callback>:

void cdc_setup_callback(void) {
    55be:	00 00 fa    	lnk       #0x0
    switch (USB_setup.bRequest) {
    55c0:	40 82 20    	mov.w     #0x824, w0
    55c2:	10 40 90    	mov.b     [w0+1], w0
    55c4:	00 80 fb    	ze        w0, w0
    55c6:	01 02 20    	mov.w     #0x20, w1
    55c8:	81 0f 50    	sub.w     w0, w1, [w15]
    55ca:	1d 00 32    	bra       Z, 0x5606 <.L6>
    55cc:	01 02 20    	mov.w     #0x20, w1
    55ce:	81 0f 50    	sub.w     w0, w1, [w15]
    55d0:	05 00 3c    	bra       GT, 0x55dc <.L9>
    55d2:	00 00 e0    	cp0.w     w0
    55d4:	0a 00 32    	bra       Z, 0x55ea <.L4>
    55d6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    55d8:	0f 00 32    	bra       Z, 0x55f8 <.L5>
    55da:	5c 00 37    	bra       0x5694 <.L3>

000055dc <.L9>:
    55dc:	11 02 20    	mov.w     #0x21, w1
    55de:	81 0f 50    	sub.w     w0, w1, [w15]
    55e0:	26 00 32    	bra       Z, 0x562e <.L7>
    55e2:	21 02 20    	mov.w     #0x22, w1
    55e4:	81 0f 50    	sub.w     w0, w1, [w15]
    55e6:	4c 00 32    	bra       Z, 0x5680 <.L8>
    55e8:	55 00 37    	bra       0x5694 <.L3>

000055ea <.L4>:
        case SEND_ENCAPSULATED_COMMAND:
            BD[EP0IN].bytecount = 0;
    55ea:	40 60 21    	mov.w     #0x1604, w0
    55ec:	80 40 eb    	clr.b     w1
    55ee:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    55f0:	50 60 21    	mov.w     #0x1605, w0
    55f2:	81 cc b3    	mov.b     #0xc8, w1
    55f4:	01 48 78    	mov.b     w1, [w0]
            break;
    55f6:	51 00 37    	bra       0x569a <.L2>

000055f8 <.L5>:
        case GET_ENCAPSULATED_RESPONSE:
            BD[EP0IN].bytecount = 0;
    55f8:	40 60 21    	mov.w     #0x1604, w0
    55fa:	80 40 eb    	clr.b     w1
    55fc:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    55fe:	50 60 21    	mov.w     #0x1605, w0
    5600:	81 cc b3    	mov.b     #0xc8, w1
    5602:	01 48 78    	mov.b     w1, [w0]
            break;
    5604:	4a 00 37    	bra       0x569a <.L2>

00005606 <.L6>:
        case SET_LINE_CODING:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // save setup packet to continue processing 
    5606:	40 82 20    	mov.w     #0x824, w0
    5608:	90 40 78    	mov.b     [w0], w1
    560a:	40 5a 21    	mov.w     #0x15a4, w0
    560c:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;            // a SET_LINE_CODING request when the OUT 
    560e:	40 82 20    	mov.w     #0x824, w0
    5610:	90 40 90    	mov.b     [w0+1], w1
    5612:	50 5a 21    	mov.w     #0x15a5, w0
    5614:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;            // request arrives
    5616:	40 82 20    	mov.w     #0x824, w0
    5618:	10 00 90    	mov.w     [w0+2], w0
    561a:	30 ad 88    	mov.w     w0, 0x15a6
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    561c:	40 82 20    	mov.w     #0x824, w0
    561e:	20 00 90    	mov.w     [w0+4], w0
    5620:	40 ad 88    	mov.w     w0, 0x15a8
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    5622:	40 82 20    	mov.w     #0x824, w0
    5624:	30 00 90    	mov.w     [w0+6], w0
    5626:	50 ad 88    	mov.w     w0, 0x15aa
            USB_out_callbacks[0] = cdc_set_line_coding_out_callback;
    5628:	00 57 25    	mov.w     #0x5570, w0
    562a:	90 ae 88    	mov.w     w0, 0x15d2
            break;
    562c:	36 00 37    	bra       0x569a <.L2>

0000562e <.L7>:
        case GET_LINE_CODING:
            BD[EP0IN].address[0] = CDC_line_coding.dwDTERate.b[0];
    562e:	30 b0 80    	mov.w     0x1606, w0
    5630:	c1 85 20    	mov.w     #0x85c, w1
    5632:	91 40 78    	mov.b     [w1], w1
    5634:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = CDC_line_coding.dwDTERate.b[1];
    5636:	30 b0 80    	mov.w     0x1606, w0
    5638:	00 00 e8    	inc.w     w0, w0
    563a:	c1 85 20    	mov.w     #0x85c, w1
    563c:	91 40 90    	mov.b     [w1+1], w1
    563e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[2] = CDC_line_coding.dwDTERate.b[2];
    5640:	30 b0 80    	mov.w     0x1606, w0
    5642:	00 80 e8    	inc2.w    w0, w0
    5644:	c1 85 20    	mov.w     #0x85c, w1
    5646:	a1 40 90    	mov.b     [w1+2], w1
    5648:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[3] = CDC_line_coding.dwDTERate.b[3];
    564a:	30 b0 80    	mov.w     0x1606, w0
    564c:	63 00 40    	add.w     w0, #0x3, w0
    564e:	c1 85 20    	mov.w     #0x85c, w1
    5650:	b1 40 90    	mov.b     [w1+3], w1
    5652:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[4] = CDC_line_coding.bCharFormat;
    5654:	30 b0 80    	mov.w     0x1606, w0
    5656:	64 00 40    	add.w     w0, #0x4, w0
    5658:	c1 85 20    	mov.w     #0x85c, w1
    565a:	c1 40 90    	mov.b     [w1+4], w1
    565c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[5] = CDC_line_coding.bParityType;
    565e:	30 b0 80    	mov.w     0x1606, w0
    5660:	65 00 40    	add.w     w0, #0x5, w0
    5662:	c1 85 20    	mov.w     #0x85c, w1
    5664:	d1 40 90    	mov.b     [w1+5], w1
    5666:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[6] = CDC_line_coding.bDataBits;
    5668:	30 b0 80    	mov.w     0x1606, w0
    566a:	66 00 40    	add.w     w0, #0x6, w0
    566c:	c1 85 20    	mov.w     #0x85c, w1
    566e:	e1 40 90    	mov.b     [w1+6], w1
    5670:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 7;
    5672:	40 60 21    	mov.w     #0x1604, w0
    5674:	71 c0 b3    	mov.b     #0x7, w1
    5676:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5678:	50 60 21    	mov.w     #0x1605, w0
    567a:	81 cc b3    	mov.b     #0xc8, w1
    567c:	01 48 78    	mov.b     w1, [w0]
            break;
    567e:	0d 00 37    	bra       0x569a <.L2>

00005680 <.L8>:
        case SET_CONTROL_LINE_STATE:
            CDC_control_signal_bitmap = USB_setup.wValue.w;
    5680:	40 82 20    	mov.w     #0x824, w0
    5682:	10 00 90    	mov.w     [w0+2], w0
    5684:	20 43 88    	mov.w     w0, 0x864
            BD[EP0IN].bytecount = 0;
    5686:	40 60 21    	mov.w     #0x1604, w0
    5688:	80 40 eb    	clr.b     w1
    568a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    568c:	50 60 21    	mov.w     #0x1605, w0
    568e:	81 cc b3    	mov.b     #0xc8, w1
    5690:	01 48 78    	mov.b     w1, [w0]
            break;
    5692:	03 00 37    	bra       0x569a <.L2>

00005694 <.L3>:
        case SET_COMM_FEATURE:
        case GET_COMM_FEATURE:
        case CLEAR_COMM_FEATURE:
        case SEND_BREAK:
        default:
            USB_error_flags |= REQUEST_ERROR;
    5694:	2c c8 bf    	mov.b     0x82c, WREG
    5696:	00 04 a0    	bset.b    w0, #0x0
    5698:	2c e8 b7    	mov.b     WREG, 0x82c

0000569a <.L2>:
    }
}
    569a:	00 80 fa    	ulnk      
    569c:	00 00 06    	return    

0000569e <_init_cdc>:

void init_cdc(void) {
    569e:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.ul = 115200;  // set initial line coding paramters to 115,200 baud
    56a0:	c2 85 20    	mov.w     #0x85c, w2
    56a2:	00 20 2c    	mov.w     #0xc200, w0
    56a4:	11 00 20    	mov.w     #0x1, w1
    56a6:	00 89 be    	mov.d     w0, [w2]
    CDC_line_coding.bCharFormat = 0;        // ...1 stop bit,
    56a8:	c0 85 20    	mov.w     #0x85c, w0
    56aa:	80 40 eb    	clr.b     w1
    56ac:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = 0;        // ...no parity,
    56ae:	c0 85 20    	mov.w     #0x85c, w0
    56b0:	80 40 eb    	clr.b     w1
    56b2:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = 8;          // ...and 8 data bits
    56b4:	c0 85 20    	mov.w     #0x85c, w0
    56b6:	81 c0 b3    	mov.b     #0x8, w1
    56b8:	61 40 98    	mov.b     w1, [w0+6]

    CDC_control_signal_bitmap = 0;
    56ba:	64 28 ef    	clr.w     0x864

    CDC_TX_buffer.data = TXbuf;
    56bc:	00 12 21    	mov.w     #0x1120, w0
    56be:	60 88 88    	mov.w     w0, 0x110c
    CDC_TX_buffer.length = TX_BUFFER_SIZE;
    56c0:	00 10 20    	mov.w     #0x100, w0
    56c2:	70 88 88    	mov.w     w0, 0x110e
    CDC_TX_buffer.head = 0;
    56c4:	00 00 eb    	clr.w     w0
    56c6:	80 88 88    	mov.w     w0, 0x1110
    CDC_TX_buffer.tail = 0;
    56c8:	00 00 eb    	clr.w     w0
    56ca:	90 88 88    	mov.w     w0, 0x1112
    CDC_TX_buffer.count = 0;
    56cc:	00 00 eb    	clr.w     w0
    56ce:	a0 88 88    	mov.w     w0, 0x1114

    CDC_RX_buffer.data = RXbuf;
    56d0:	00 22 21    	mov.w     #0x1220, w0
    56d2:	b0 88 88    	mov.w     w0, 0x1116
    CDC_RX_buffer.length = RX_BUFFER_SIZE;
    56d4:	00 10 20    	mov.w     #0x100, w0
    56d6:	c0 88 88    	mov.w     w0, 0x1118
    CDC_RX_buffer.head = 0;
    56d8:	00 00 eb    	clr.w     w0
    56da:	d0 88 88    	mov.w     w0, 0x111a
    CDC_RX_buffer.tail = 0;
    56dc:	00 00 eb    	clr.w     w0
    56de:	e0 88 88    	mov.w     w0, 0x111c
    CDC_RX_buffer.count = 0;
    56e0:	00 00 eb    	clr.w     w0
    56e2:	f0 88 88    	mov.w     w0, 0x111e
}
    56e4:	00 80 fa    	ulnk      
    56e6:	00 00 06    	return    

000056e8 <_cdc_tx_service>:

void cdc_tx_service(void) {
    56e8:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (!(BD[EP2IN].status & UOWN)) {   // see if UOWN bit of EP2 IN status register is clear (i.e., PIC owns EP2 IN buffer)
    56ea:	50 61 21    	mov.w     #0x1615, w0
    56ec:	10 40 78    	mov.b     [w0], w0
    56ee:	00 04 e0    	cp0.b     w0
    56f0:	34 00 35    	bra       LT, 0x575a <.L12>
        if (CDC_TX_buffer.count < MAX_PACKET_SIZE) 
    56f2:	a1 88 80    	mov.w     0x1114, w1
    56f4:	f0 03 20    	mov.w     #0x3f, w0
    56f6:	80 8f 50    	sub.w     w1, w0, [w15]
    56f8:	03 00 3e    	bra       GTU, 0x5700 <.L14>
            packet_length = CDC_TX_buffer.count;
    56fa:	a0 88 80    	mov.w     0x1114, w0
    56fc:	00 4f 78    	mov.b     w0, [w14]
    56fe:	02 00 37    	bra       0x5704 <.L15>

00005700 <.L14>:
        else
            packet_length = MAX_PACKET_SIZE;
    5700:	00 c4 b3    	mov.b     #0x40, w0
    5702:	00 4f 78    	mov.b     w0, [w14]

00005704 <.L15>:
        for (i = 0; i < packet_length; i++) {
    5704:	00 40 eb    	clr.b     w0
    5706:	10 47 98    	mov.b     w0, [w14+1]
    5708:	15 00 37    	bra       0x5734 <.L16>

0000570a <.L18>:
            BD[EP2IN].address[i] = CDC_TX_buffer.data[CDC_TX_buffer.head];
    570a:	b1 b0 80    	mov.w     0x1616, w1
    570c:	1e 40 90    	mov.b     [w14+1], w0
    570e:	00 80 fb    	ze        w0, w0
    5710:	00 80 40    	add.w     w1, w0, w0
    5712:	62 88 80    	mov.w     0x110c, w2
    5714:	81 88 80    	mov.w     0x1110, w1
    5716:	81 00 41    	add.w     w2, w1, w1
    5718:	91 40 78    	mov.b     [w1], w1
    571a:	01 48 78    	mov.b     w1, [w0]
            CDC_TX_buffer.head++;
    571c:	80 88 80    	mov.w     0x1110, w0
    571e:	00 00 e8    	inc.w     w0, w0
    5720:	80 88 88    	mov.w     w0, 0x1110
            if (CDC_TX_buffer.head == CDC_TX_buffer.length)
    5722:	81 88 80    	mov.w     0x1110, w1
    5724:	70 88 80    	mov.w     0x110e, w0
    5726:	80 8f 50    	sub.w     w1, w0, [w15]
    5728:	02 00 3a    	bra       NZ, 0x572e <.L17>
                CDC_TX_buffer.head = 0;
    572a:	00 00 eb    	clr.w     w0
    572c:	80 88 88    	mov.w     w0, 0x1110

0000572e <.L17>:
    572e:	1e 40 90    	mov.b     [w14+1], w0
    5730:	00 40 e8    	inc.b     w0, w0
    5732:	10 47 98    	mov.b     w0, [w14+1]

00005734 <.L16>:
    5734:	1e 40 90    	mov.b     [w14+1], w0
    5736:	9e 4f 50    	sub.b     w0, [w14], [w15]
    5738:	e8 ff 39    	bra       NC, 0x570a <.L18>
        }
        CDC_TX_buffer.count -= packet_length;
    573a:	a1 88 80    	mov.w     0x1114, w1
    573c:	1e 80 fb    	ze        [w14], w0
    573e:	00 80 50    	sub.w     w1, w0, w0
    5740:	a0 88 88    	mov.w     w0, 0x1114
        BD[EP2IN].bytecount = packet_length;
    5742:	40 61 21    	mov.w     #0x1614, w0
    5744:	1e 48 78    	mov.b     [w14], [w0]
        BD[EP2IN].status = ((BD[EP2IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    5746:	50 61 21    	mov.w     #0x1615, w0
    5748:	10 40 78    	mov.b     [w0], w0
    574a:	00 c0 ea    	com.b     w0, w0
    574c:	02 c4 b3    	mov.b     #0x40, w2
    574e:	82 40 60    	and.b     w0, w2, w1
    5750:	80 c8 b3    	mov.b     #0x88, w0
    5752:	00 c0 70    	ior.b     w1, w0, w0
    5754:	80 40 78    	mov.b     w0, w1
    5756:	50 61 21    	mov.w     #0x1615, w0
    5758:	01 48 78    	mov.b     w1, [w0]

0000575a <.L12>:
    }
}
    575a:	00 80 fa    	ulnk      
    575c:	00 00 06    	return    

0000575e <_cdc_rx_service>:

void cdc_rx_service(void) {
    575e:	02 00 fa    	lnk       #0x2
    uint8_t i;

    if (!(BD[EP2OUT].status & UOWN)) {  // see if UOWN bit of EP2 OUT status register is clear (i.e., PIC owns EP2 OUT buffer)
    5760:	10 61 21    	mov.w     #0x1611, w0
    5762:	10 40 78    	mov.b     [w0], w0
    5764:	00 04 e0    	cp0.b     w0
    5766:	38 00 35    	bra       LT, 0x57d8 <.L19>
        if ((BD[EP2OUT].bytecount + CDC_RX_buffer.count) <= CDC_RX_buffer.length) {
    5768:	00 61 21    	mov.w     #0x1610, w0
    576a:	10 40 78    	mov.b     [w0], w0
    576c:	80 80 fb    	ze        w0, w1
    576e:	f0 88 80    	mov.w     0x111e, w0
    5770:	80 80 40    	add.w     w1, w0, w1
    5772:	c0 88 80    	mov.w     0x1118, w0
    5774:	80 8f 50    	sub.w     w1, w0, [w15]
    5776:	2d 00 3e    	bra       GTU, 0x57d2 <.L21>
            for (i = 0; i < BD[EP2OUT].bytecount; i++) {
    5778:	00 40 eb    	clr.b     w0
    577a:	00 4f 78    	mov.b     w0, [w14]
    577c:	12 00 37    	bra       0x57a2 <.L22>

0000577e <.L24>:
                CDC_RX_buffer.data[CDC_RX_buffer.tail] = BD[EP2OUT].address[i];
    577e:	b1 88 80    	mov.w     0x1116, w1
    5780:	e0 88 80    	mov.w     0x111c, w0
    5782:	00 80 40    	add.w     w1, w0, w0
    5784:	92 b0 80    	mov.w     0x1612, w2
    5786:	9e 80 fb    	ze        [w14], w1
    5788:	81 00 41    	add.w     w2, w1, w1
    578a:	91 40 78    	mov.b     [w1], w1
    578c:	01 48 78    	mov.b     w1, [w0]
                CDC_RX_buffer.tail++;
    578e:	e0 88 80    	mov.w     0x111c, w0
    5790:	00 00 e8    	inc.w     w0, w0
    5792:	e0 88 88    	mov.w     w0, 0x111c
                if (CDC_RX_buffer.tail == CDC_RX_buffer.length)
    5794:	e1 88 80    	mov.w     0x111c, w1
    5796:	c0 88 80    	mov.w     0x1118, w0
    5798:	80 8f 50    	sub.w     w1, w0, [w15]
    579a:	02 00 3a    	bra       NZ, 0x57a0 <.L23>
                    CDC_RX_buffer.tail = 0;
    579c:	00 00 eb    	clr.w     w0
    579e:	e0 88 88    	mov.w     w0, 0x111c

000057a0 <.L23>:
    57a0:	1e 4f e8    	inc.b     [w14], [w14]

000057a2 <.L22>:
    57a2:	00 61 21    	mov.w     #0x1610, w0
    57a4:	10 40 78    	mov.b     [w0], w0
    57a6:	9e 4f 50    	sub.b     w0, [w14], [w15]
    57a8:	ea ff 3e    	bra       GTU, 0x577e <.L24>
            }
            CDC_RX_buffer.count += BD[EP2OUT].bytecount;
    57aa:	f1 88 80    	mov.w     0x111e, w1
    57ac:	00 61 21    	mov.w     #0x1610, w0
    57ae:	10 40 78    	mov.b     [w0], w0
    57b0:	00 80 fb    	ze        w0, w0
    57b2:	00 80 40    	add.w     w1, w0, w0
    57b4:	f0 88 88    	mov.w     w0, 0x111e
            BD[EP2OUT].bytecount = 64;
    57b6:	00 61 21    	mov.w     #0x1610, w0
    57b8:	01 c4 b3    	mov.b     #0x40, w1
    57ba:	01 48 78    	mov.b     w1, [w0]
            BD[EP2OUT].status = ((BD[EP2OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    57bc:	10 61 21    	mov.w     #0x1611, w0
    57be:	10 40 78    	mov.b     [w0], w0
    57c0:	00 c0 ea    	com.b     w0, w0
    57c2:	02 c4 b3    	mov.b     #0x40, w2
    57c4:	82 40 60    	and.b     w0, w2, w1
    57c6:	80 c8 b3    	mov.b     #0x88, w0
    57c8:	00 c0 70    	ior.b     w1, w0, w0
    57ca:	80 40 78    	mov.b     w0, w1
    57cc:	10 61 21    	mov.w     #0x1611, w0
    57ce:	01 48 78    	mov.b     w1, [w0]
    57d0:	03 00 37    	bra       0x57d8 <.L19>

000057d2 <.L21>:
        } else
            USB_error_flags |= REQUEST_ERROR;
    57d2:	2c c8 bf    	mov.b     0x82c, WREG
    57d4:	00 04 a0    	bset.b    w0, #0x0
    57d6:	2c e8 b7    	mov.b     WREG, 0x82c

000057d8 <.L19>:
    }
}
    57d8:	00 80 fa    	ulnk      
    57da:	00 00 06    	return    

000057dc <_cdc_in_waiting>:

uint16_t cdc_in_waiting(void) {
    57dc:	00 00 fa    	lnk       #0x0
    return CDC_RX_buffer.count;
    57de:	f0 88 80    	mov.w     0x111e, w0
}
    57e0:	00 80 fa    	ulnk      
    57e2:	00 00 06    	return    

000057e4 <_cdc_tx_buffer_space>:

uint16_t cdc_tx_buffer_space(void) {
    57e4:	00 00 fa    	lnk       #0x0
    return CDC_TX_buffer.length - CDC_TX_buffer.count;
    57e6:	71 88 80    	mov.w     0x110e, w1
    57e8:	a0 88 80    	mov.w     0x1114, w0
    57ea:	00 80 50    	sub.w     w1, w0, w0
}
    57ec:	00 80 fa    	ulnk      
    57ee:	00 00 06    	return    

000057f0 <_cdc_putc>:

void cdc_putc(uint8_t ch) {
    57f0:	02 00 fa    	lnk       #0x2
    57f2:	00 4f 78    	mov.b     w0, [w14]
    while (CDC_TX_buffer.count == CDC_TX_buffer.length) {
    57f4:	01 00 37    	bra       0x57f8 <.L28>

000057f6 <.L29>:
#ifndef USB_INTERRUPT
        usb_service();
    57f6:	e2 f6 07    	rcall     0x45bc <_usb_service> <.LFB3> <.LFE2>

000057f8 <.L28>:
    57f8:	a1 88 80    	mov.w     0x1114, w1
    57fa:	70 88 80    	mov.w     0x110e, w0
    57fc:	80 8f 50    	sub.w     w1, w0, [w15]
    57fe:	fb ff 32    	bra       Z, 0x57f6 <.L29>
#endif
    }
    disable_interrupts();
    5800:	ff 3f fc    	disi      #0x3fff
    CDC_TX_buffer.data[CDC_TX_buffer.tail] = ch;
    5802:	61 88 80    	mov.w     0x110c, w1
    5804:	90 88 80    	mov.w     0x1112, w0
    5806:	00 80 40    	add.w     w1, w0, w0
    5808:	1e 48 78    	mov.b     [w14], [w0]
    CDC_TX_buffer.tail++;
    580a:	90 88 80    	mov.w     0x1112, w0
    580c:	00 00 e8    	inc.w     w0, w0
    580e:	90 88 88    	mov.w     w0, 0x1112
    if (CDC_TX_buffer.tail == CDC_TX_buffer.length)
    5810:	91 88 80    	mov.w     0x1112, w1
    5812:	70 88 80    	mov.w     0x110e, w0
    5814:	80 8f 50    	sub.w     w1, w0, [w15]
    5816:	02 00 3a    	bra       NZ, 0x581c <.L30>
        CDC_TX_buffer.tail = 0;
    5818:	00 00 eb    	clr.w     w0
    581a:	90 88 88    	mov.w     w0, 0x1112

0000581c <.L30>:
    CDC_TX_buffer.count++;
    581c:	a0 88 80    	mov.w     0x1114, w0
    581e:	00 00 e8    	inc.w     w0, w0
    5820:	a0 88 88    	mov.w     w0, 0x1114
    enable_interrupts();
    5822:	52 20 ef    	clr.w     0x52
}
    5824:	00 80 fa    	ulnk      
    5826:	00 00 06    	return    

00005828 <_cdc_getc>:

uint8_t cdc_getc(void) {
    5828:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (CDC_RX_buffer.count == 0) {
    582a:	01 00 37    	bra       0x582e <.L32>

0000582c <.L33>:
#ifndef USB_INTERRUPT
        usb_service();
    582c:	c7 f6 07    	rcall     0x45bc <_usb_service> <.LFB3> <.LFE2>

0000582e <.L32>:
    582e:	f0 88 80    	mov.w     0x111e, w0
    5830:	00 00 e0    	cp0.w     w0
    5832:	fc ff 32    	bra       Z, 0x582c <.L33>
#endif
    }
    disable_interrupts();
    5834:	ff 3f fc    	disi      #0x3fff
    ch = CDC_RX_buffer.data[CDC_RX_buffer.head];
    5836:	b1 88 80    	mov.w     0x1116, w1
    5838:	d0 88 80    	mov.w     0x111a, w0
    583a:	00 80 40    	add.w     w1, w0, w0
    583c:	10 4f 78    	mov.b     [w0], [w14]
    CDC_RX_buffer.head++;
    583e:	d0 88 80    	mov.w     0x111a, w0
    5840:	00 00 e8    	inc.w     w0, w0
    5842:	d0 88 88    	mov.w     w0, 0x111a
    if (CDC_RX_buffer.head == CDC_RX_buffer.length)
    5844:	d1 88 80    	mov.w     0x111a, w1
    5846:	c0 88 80    	mov.w     0x1118, w0
    5848:	80 8f 50    	sub.w     w1, w0, [w15]
    584a:	02 00 3a    	bra       NZ, 0x5850 <.L34>
        CDC_RX_buffer.head = 0;
    584c:	00 00 eb    	clr.w     w0
    584e:	d0 88 88    	mov.w     w0, 0x111a

00005850 <.L34>:
    CDC_RX_buffer.count--;
    5850:	f0 88 80    	mov.w     0x111e, w0
    5852:	00 00 e9    	dec.w     w0, w0
    5854:	f0 88 88    	mov.w     w0, 0x111e
    enable_interrupts();
    5856:	52 20 ef    	clr.w     0x52
    return ch;
    5858:	1e 40 78    	mov.b     [w14], w0
}
    585a:	00 80 fa    	ulnk      
    585c:	00 00 06    	return    

0000585e <_cdc_puts>:

void cdc_puts(uint8_t *str) {
    585e:	02 00 fa    	lnk       #0x2
    5860:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    5862:	04 00 37    	bra       0x586c <.L36>

00005864 <.L37>:
        cdc_putc(*str++);
    5864:	1e 00 78    	mov.w     [w14], w0
    5866:	10 40 78    	mov.b     [w0], w0
    5868:	1e 0f e8    	inc.w     [w14], [w14]
    586a:	c2 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>

0000586c <.L36>:
    586c:	1e 00 78    	mov.w     [w14], w0
    586e:	10 40 78    	mov.b     [w0], w0
    5870:	00 04 e0    	cp0.b     w0
    5872:	f8 ff 3a    	bra       NZ, 0x5864 <.L37>
}
    5874:	00 80 fa    	ulnk      
    5876:	00 00 06    	return    

00005878 <_cdc_gets>:

void cdc_gets(uint8_t *str, uint16_t len) {
    5878:	04 00 fa    	lnk       #0x4
    587a:	00 0f 78    	mov.w     w0, [w14]
    587c:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    587e:	1e 00 90    	mov.w     [w14+2], w0
    5880:	00 00 e0    	cp0.w     w0
    5882:	1a 00 32    	bra       Z, 0x58b8 <.L43>
        return;

    if (len == 1) {
    5884:	1e 00 90    	mov.w     [w14+2], w0
    5886:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5888:	04 00 3a    	bra       NZ, 0x5892 <.L41>
        *str = '\0';
    588a:	1e 00 78    	mov.w     [w14], w0
    588c:	80 40 eb    	clr.b     w1
    588e:	01 48 78    	mov.b     w1, [w0]
        return;
    5890:	14 00 37    	bra       0x58ba <.L38>

00005892 <.L41>:
    }

    while (1) {
        *str = cdc_getc();
    5892:	ca ff 07    	rcall     0x5828 <_cdc_getc> <.LFB8> <.LFE7>
    5894:	9e 00 78    	mov.w     [w14], w1
    5896:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    5898:	1e 00 78    	mov.w     [w14], w0
    589a:	10 40 78    	mov.b     [w0], w0
    589c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    589e:	08 00 32    	bra       Z, 0x58b0 <.L42>
    58a0:	1e 00 90    	mov.w     [w14+2], w0
    58a2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    58a4:	05 00 32    	bra       Z, 0x58b0 <.L42>
            break;
        str++;
    58a6:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    58a8:	1e 00 90    	mov.w     [w14+2], w0
    58aa:	00 00 e9    	dec.w     w0, w0
    58ac:	10 07 98    	mov.w     w0, [w14+2]
    }
    58ae:	f1 ff 37    	bra       0x5892 <.L41>

000058b0 <.L42>:
    *str = '\0';
    58b0:	1e 00 78    	mov.w     [w14], w0
    58b2:	80 40 eb    	clr.b     w1
    58b4:	01 48 78    	mov.b     w1, [w0]
    58b6:	01 00 37    	bra       0x58ba <.L38>

000058b8 <.L43>:
    58b8:	00 00 00    	nop       

000058ba <.L38>:
}
    58ba:	00 80 fa    	ulnk      
    58bc:	00 00 06    	return    

000058be <_cdc_gets_term>:

void cdc_gets_term(uint8_t *str, uint16_t len) {
    58be:	08 00 fa    	lnk       #0x8
    58c0:	20 07 98    	mov.w     w0, [w14+4]
    58c2:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    58c4:	3e 00 90    	mov.w     [w14+6], w0
    58c6:	00 00 e0    	cp0.w     w0
    58c8:	68 00 32    	bra       Z, 0x599a <.L57>
        return;

    if (len == 1) {
    58ca:	3e 00 90    	mov.w     [w14+6], w0
    58cc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    58ce:	04 00 3a    	bra       NZ, 0x58d8 <.L47>
        *str = '\0';
    58d0:	2e 00 90    	mov.w     [w14+4], w0
    58d2:	80 40 eb    	clr.b     w1
    58d4:	01 48 78    	mov.b     w1, [w0]
        return;
    58d6:	62 00 37    	bra       0x599c <.L44>

000058d8 <.L47>:
    }

    cdc_putc(0x1B);                        // Save current cursor position
    58d8:	b0 c1 b3    	mov.b     #0x1b, w0
    58da:	8a ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('7');
    58dc:	70 c3 b3    	mov.b     #0x37, w0
    58de:	88 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    start = str;
    58e0:	ae 00 90    	mov.w     [w14+4], w1
    58e2:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    58e4:	be 00 90    	mov.w     [w14+6], w1
    58e6:	01 0f 78    	mov.w     w1, [w14]
    58e8:	03 00 37    	bra       0x58f0 <.L56>

000058ea <.L58>:
    while (1) {
        *str = cdc_getc();                 // Get a character
        if (*str == '\r')                  // If character is return,
            break;                         //   end the loop.
        if (*str == 0x1B) {                // If character is escape,
            cdc_putc(0x1B);                //   restore cursor position,
            cdc_putc('8');
            cdc_putc(0x1B);                //   clear to end of line, and
            cdc_putc('[');
            cdc_putc('K');
            str = start;                   //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str == '\b') ||              // If character is backspace
            (*str == 0x7F)) {              //   or delete, 
            if (str > start) {             //   and we are not at the start, 
                cdc_putc('\b');            //   erase the last character and
                cdc_putc(' ');
                cdc_putc('\b');
                str--;                     //   back up the pointer,
                left++;
            } else                         //   otherwise
                cdc_putc('\a');            //   send alert/bell character.
            continue;
        }
        if (left == 1) {                   // If string buffer is full,
            cdc_putc('\a');                //   send alert/bell character
            continue;
        }
        if ((*str >= 32) && (*str < 127)) {// If character is printable,
            cdc_putc(*str);                //   echo the received character
            str++;                         //   and advance the pointer.
            left--;
        }
    }
    58ea:	00 00 00    	nop       
    58ec:	01 00 37    	bra       0x58f0 <.L56>

000058ee <.L59>:
    58ee:	00 00 00    	nop       

000058f0 <.L56>:
    58f0:	9b ff 07    	rcall     0x5828 <_cdc_getc> <.LFB8> <.LFE7>
    58f2:	ae 00 90    	mov.w     [w14+4], w1
    58f4:	80 48 78    	mov.b     w0, [w1]
    58f6:	2e 00 90    	mov.w     [w14+4], w0
    58f8:	10 40 78    	mov.b     [w0], w0
    58fa:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    58fc:	08 00 3a    	bra       NZ, 0x590e <.L48>
    *str = '\0';                           // Terminarte the string with null
    58fe:	2e 00 90    	mov.w     [w14+4], w0
    5900:	80 40 eb    	clr.b     w1
    5902:	01 48 78    	mov.b     w1, [w0]
    cdc_putc('\n');                        // Send newline and
    5904:	a0 c0 b3    	mov.b     #0xa, w0
    5906:	74 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('\r');                        //   carriage return
    5908:	d0 c0 b3    	mov.b     #0xd, w0
    590a:	72 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    590c:	47 00 37    	bra       0x599c <.L44>

0000590e <.L48>:
    590e:	2e 00 90    	mov.w     [w14+4], w0
    5910:	10 40 78    	mov.b     [w0], w0
    5912:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    5914:	0f 00 3a    	bra       NZ, 0x5934 <.L49>
    5916:	b0 c1 b3    	mov.b     #0x1b, w0
    5918:	6b ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    591a:	80 c3 b3    	mov.b     #0x38, w0
    591c:	69 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    591e:	b0 c1 b3    	mov.b     #0x1b, w0
    5920:	67 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    5922:	b0 c5 b3    	mov.b     #0x5b, w0
    5924:	65 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    5926:	b0 c4 b3    	mov.b     #0x4b, w0
    5928:	63 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    592a:	9e 00 90    	mov.w     [w14+2], w1
    592c:	21 07 98    	mov.w     w1, [w14+4]
    592e:	be 00 90    	mov.w     [w14+6], w1
    5930:	01 0f 78    	mov.w     w1, [w14]
    5932:	32 00 37    	bra       0x5998 <.L50>

00005934 <.L49>:
    5934:	2e 00 90    	mov.w     [w14+4], w0
    5936:	10 40 78    	mov.b     [w0], w0
    5938:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    593a:	05 00 32    	bra       Z, 0x5946 <.L51>
    593c:	2e 00 90    	mov.w     [w14+4], w0
    593e:	90 40 78    	mov.b     [w0], w1
    5940:	f0 c7 b3    	mov.b     #0x7f, w0
    5942:	80 cf 50    	sub.b     w1, w0, [w15]
    5944:	12 00 3a    	bra       NZ, 0x596a <.L52>

00005946 <.L51>:
    5946:	ae 00 90    	mov.w     [w14+4], w1
    5948:	1e 00 90    	mov.w     [w14+2], w0
    594a:	80 8f 50    	sub.w     w1, w0, [w15]
    594c:	0b 00 36    	bra       LEU, 0x5964 <.L53>
    594e:	80 c0 b3    	mov.b     #0x8, w0
    5950:	4f ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    5952:	00 c2 b3    	mov.b     #0x20, w0
    5954:	4d ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    5956:	80 c0 b3    	mov.b     #0x8, w0
    5958:	4b ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    595a:	2e 00 90    	mov.w     [w14+4], w0
    595c:	00 00 e9    	dec.w     w0, w0
    595e:	20 07 98    	mov.w     w0, [w14+4]
    5960:	1e 0f e8    	inc.w     [w14], [w14]
    5962:	02 00 37    	bra       0x5968 <.L54>

00005964 <.L53>:
    5964:	70 c0 b3    	mov.b     #0x7, w0
    5966:	44 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>

00005968 <.L54>:
    5968:	17 00 37    	bra       0x5998 <.L50>

0000596a <.L52>:
    596a:	1e 00 78    	mov.w     [w14], w0
    596c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    596e:	03 00 3a    	bra       NZ, 0x5976 <.L55>
    5970:	70 c0 b3    	mov.b     #0x7, w0
    5972:	3e ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    5974:	11 00 37    	bra       0x5998 <.L50>

00005976 <.L55>:
    5976:	2e 00 90    	mov.w     [w14+4], w0
    5978:	10 40 78    	mov.b     [w0], w0
    597a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    597c:	b6 ff 36    	bra       LEU, 0x58ea <.L58>
    597e:	2e 00 90    	mov.w     [w14+4], w0
    5980:	90 40 78    	mov.b     [w0], w1
    5982:	e0 c7 b3    	mov.b     #0x7e, w0
    5984:	80 cf 50    	sub.b     w1, w0, [w15]
    5986:	b3 ff 3e    	bra       GTU, 0x58ee <.L59>
    5988:	2e 00 90    	mov.w     [w14+4], w0
    598a:	10 40 78    	mov.b     [w0], w0
    598c:	31 ff 07    	rcall     0x57f0 <_cdc_putc> <.LFB7> <.LFE6>
    598e:	2e 00 90    	mov.w     [w14+4], w0
    5990:	00 00 e8    	inc.w     w0, w0
    5992:	20 07 98    	mov.w     w0, [w14+4]
    5994:	1e 0f e9    	dec.w     [w14], [w14]
    5996:	ac ff 37    	bra       0x58f0 <.L56>

00005998 <.L50>:
    5998:	ab ff 37    	bra       0x58f0 <.L56>

0000599a <.L57>:
    599a:	00 00 00    	nop       

0000599c <.L44>:
}
    599c:	00 80 fa    	ulnk      
    599e:	00 00 06    	return    
Disassembly of section .dinit:

000059a0 <.dinit>:
    59a0:	6e 08 00    	nop       
    59a2:	14 08 00    	nop       
    59a4:	80 00 00    	nop       
    59a6:	4e 08 00    	nop       
    59a8:	0e 00 00    	nop       
    59aa:	80 00 00    	nop       
    59ac:	66 08 00    	nop       
    59ae:	08 00 00    	nop       
    59b0:	80 00 00    	nop       
    59b2:	00 08 00    	nop       
    59b4:	20 00 00    	nop       
    59b6:	82 00 00    	nop       
    59b8:	7f 3e 7f    	.pword 0x7f3e7f
    59ba:	3e 7f 3e    	bra       GTU, 0x15838
    59bc:	7f 3e 3f    	bra       0xd6bc
    59be:	1f 3f 1f    	.pword 0x1f3f1f
    59c0:	3f 1f 3f    	bra       0x9840
    59c2:	1f bf 5d    	.pword 0x5dbf1f
    59c4:	bf 5d bf    	.pword 0xbf5dbf
    59c6:	5d bf 5d    	.pword 0x5dbf5d
    59c8:	01 00 01    	call      w1
    59ca:	00 01 00    	nop       
    59cc:	01 00 00    	nop       
    59ce:	20 13 00    	nop       
    59d0:	84 01 00    	nop       
    59d2:	82 00 00    	nop       
    59d4:	40 94 98    	mov.w     w0, [w8+168]
    59d6:	1a 43 94    	mov.b     [w10-511], w6
    59d8:	fe 1c 47    	add.w     w14, #0x1e, [w9++]
    59da:	94 fa 1d    	.pword 0x1dfa94
    59dc:	4d 94 58    	subb.w    w1, [--w13], [w8--]
    59de:	1f 53 94    	mov.b     [w15-495], w6
    59e0:	a2 21 59    	subb.w    w2, [w2--], [--w3]
    59e2:	94 94 23    	mov.w     #0x3949, w4
    59e4:	5e 94 b2    	xor.w     #0x145, w14
    59e6:	2d 65 94    	mov.b     [w13-478], w10
    59e8:	2c 31 69    	.pword 0x69312c
    59ea:	94 3c 32    	bra       Z, 0xd314
    59ec:	6f 94 ea    	.pword 0xea946f
    59ee:	1a 74 94    	mov.b     [w10-463], w8
    59f0:	74 1b 7a    	.pword 0x7a1b74
    59f2:	94 94 1b    	subbr.w   w7, [w4], [w9--]
    59f4:	7f 94 18    	subbr.w   w1, #0x1f, [w8--]
    59f6:	1c 85 94    	mov.w     [w12-894], w10
    59f8:	36 1c 8a    	mov.w     w6, 0x4386
    59fa:	94 be 1c    	.pword 0x1cbe94
    59fc:	90 94 dc    	.pword 0xdc9490
    59fe:	1c 95 94    	mov.w     [w12-862], w10
    5a00:	50 1d 9c    	mov.w     w0, [w10-966]
    5a02:	94 da 1d    	subbr.b   w11, [w4], [w5++]
    5a04:	a4 94 4c    	addc.w    w9, [w4--], [w9--]
    5a06:	1e a9 94    	mov.w     [w14-814], w2
    5a08:	7e 1e af    	btsc.b    0x1e7e, #0x0
    5a0a:	94 98 1e    	subbr.w   w13, [w4], [w1++]
    5a0c:	b4 94 ca    	lac       [w4++], #0x9, B
    5a0e:	1e ba 94    	mov.w     [w14-782], w4
    5a10:	e4 1e bf    	.pword 0xbf1ee4
    5a12:	94 38 1f    	.pword 0x1f3894
    5a14:	c5 94 aa    	btg.b     0x14c5, #0x4
    5a16:	1f ca 94    	mov.b     [w15-439], w4
    5a18:	d8 1f a4    	.pword 0xa41fd8
    5a1a:	94 f2 1f    	.pword 0x1ff294
    5a1c:	a9 94 20    	mov.w     #0x94a, w9
    5a1e:	20 af 94    	mov.w     [w0-812], w14
    5a20:	3a 20 b4    	add.w     0x3a
    5a22:	94 68 20    	mov.w     #0x689, w4
    5a24:	d0 94 82    	mov.w     0x529a, w0
    5a26:	20 d5 94    	mov.b     [w0-430], w10
    5a28:	b0 20 db    	.pword 0xdb20b0
    5a2a:	94 ca 20    	mov.w     #0xca9, w4
    5a2c:	df 94 0a    	.pword 0x0a94df
    5a2e:	21 e4 94    	mov.b     [w1-414], w8
    5a30:	36 21 e8    	inc.w     [w6++], [--w2]
    5a32:	94 76 21    	mov.w     #0x1769, w4
    5a34:	df 94 f4    	.pword 0xf494df
    5a36:	21 e8 94    	mov.b     [w1-406], w0
    5a38:	28 22 ed    	dec.w     0x228
    5a3a:	94 5c 22    	mov.w     #0x25c9, w4
    5a3c:	f5 94 90    	mov.w     [w5+174], w9
    5a3e:	22 fd 94    	mov.b     [w2-390], w10
    5a40:	c4 22 03    	.pword 0x0322c4
    5a42:	95 2c 23    	mov.w     #0x32c9, w5
    5a44:	0c 95 e6    	.pword 0xe6950c
    5a46:	23 12 95    	mov.w     [w3-732], w4
    5a48:	20 24 19    	subbr.w   w2, [w0--], [--w8]
    5a4a:	95 3e 24    	mov.w     #0x43e9, w5
    5a4c:	1d 95 c2    	mac       w4 * w7, B, [w10]-=2, w5, [w13]+=2
    5a4e:	24 22 95    	mov.w     [w4-700], w4
    5a50:	e0 24 26    	mov.w     #0x624e, w0
    5a52:	95 68 25    	mov.w     #0x5689, w5
    5a54:	2b 95 86    	mov.w     0xd2a4, w11
    5a56:	25 2f 95    	mov.w     [w5-684], w14
    5a58:	0e 26 34    	bra       LE, 0xa676
    5a5a:	95 2c 26    	mov.w     #0x62c9, w5
    5a5c:	38 95 b4    	addc.w    0x1538, WREG
    5a5e:	26 3d 95    	mov.w     [w6-652], w10
    5a60:	d2 26 41    	add.w     w2, [++w2], [--w13]
    5a62:	95 5a 27    	mov.w     #0x75a9, w5
    5a64:	46 95 78    	mov.w     [--w6], [w10--]
    5a66:	27 4a 95    	mov.b     [w7-374], w4
    5a68:	02 28 4f    	addc.w    w14, w2, [++w0]
    5a6a:	95 22 28    	mov.w     #0x8229, w5
    5a6c:	53 95 ac    	btsts.b   0x1553, #0x4
    5a6e:	28 58 95    	mov.b     [w8-358], w0
    5a70:	cc 28 5e    	subb.w    w12, [--w12], [++w1]
    5a72:	95 06 29    	mov.w     #0x9069, w5
    5a74:	65 95 24    	mov.w     #0x4956, w5
    5a76:	29 69 95    	mov.b     [w9-342], w2
    5a78:	a8 29 6e    	xor.w     w12, [w8--], [++w3]
    5a7a:	95 c6 29    	mov.w     #0x9c69, w5
    5a7c:	72 95 4e    	addc.w    w13, #0x12, [w10--]
    5a7e:	2a 77 95    	mov.b     [w10-334], w14
    5a80:	6c 2a 7b    	mov.w     [w12+w6], [++w4]
    5a82:	95 f4 2a    	mov.w     #0xaf49, w5
    5a84:	80 95 12    	subr.w    w5, w0, [w11--]
    5a86:	2b 84 95    	mov.w     [w11-636], w8
    5a88:	9a 2b 89    	mov.w     w10, 0x2572
    5a8a:	95 b8 2b    	mov.w     #0xbb89, w5
    5a8c:	8d 95 40    	add.w     w1, w13, [w11--]
    5a8e:	2c 92 95    	mov.w     [w12-604], w4
    5a90:	5e 2c 96    	mov.w     [w14-422], w8
    5a92:	95 e8 2c    	mov.w     #0xce89, w5
    5a94:	9b 95 08    	.pword 0x08959b
    5a96:	2d 9f 95    	mov.w     [w13-588], w14
    5a98:	92 2d a4    	.pword 0xa42d92
    5a9a:	95 04 2e    	mov.w     #0xe049, w5
    5a9c:	a8 95 20    	mov.w     #0x95a, w8
    5a9e:	2e ae 95    	mov.w     [w14-556], w12
    5aa0:	3c 2e b5    	sub.w     0xe3c
    5aa2:	95 58 2e    	mov.w     #0xe589, w5
    5aa4:	bb 95 98    	mov.w     w11, [w11+166]
    5aa6:	2e c0 95    	mov.b     [w14-318], w0
    5aa8:	c0 2e c3    	clr       A, [w9]+=6, w6, [w10], w7, w13
    5aaa:	95 00 2f    	mov.w     #0xf009, w5
    5aac:	59 94 28    	mov.w     #0x8945, w9
    5aae:	2f c7 95    	mov.b     [w15-318], w14
    5ab0:	68 2f cd    	sac.r     A, #0xe, [w8+w5]
    5ab2:	95 90 2f    	mov.w     #0xf909, w5
    5ab4:	d4 95 d0    	.pword 0xd095d4
    5ab6:	2f dc 95    	mov.b     [w15-294], w8
    5ab8:	f8 2f e1    	.pword 0xe12ff8
    5aba:	95 38 30    	bra       OV, 0xcbe6
    5abc:	e7 95 60    	and.w     w1, #0x7, [w11--]
    5abe:	30 ed 95    	mov.b     [w0-277], w10
    5ac0:	a0 30 f4    	.pword 0xf430a0
    5ac2:	95 c8 30    	bra       OV, 0xffffffffffffebee
    5ac4:	fd 95 08    	.pword 0x0895fd
    5ac6:	31 07 96    	mov.w     [w1-506], w14
    5ac8:	7e 31 0d    	bra       OB, 0xbdc6
    5aca:	96 08 32    	bra       Z, 0x6bf8
    5acc:	14 96 28    	mov.w     #0x8961, w4
    5ace:	32 1c 96    	mov.w     [w2-458], w8
    5ad0:	8e 32 bb    	.pword 0xbb328e
    5ad2:	95 f8 32    	bra       Z, 0x4bfe
    5ad4:	b5 95 e6    	.pword 0xe695b5
    5ad6:	33 00 00    	nop       
    5ad8:	a4 14 00    	nop       
    5ada:	00 01 00    	nop       
    5adc:	80 00 00    	nop       
    5ade:	3a 08 00    	nop       
    5ae0:	14 00 00    	nop       
    5ae2:	80 00 00    	nop       
    5ae4:	82 10 00    	nop       
    5ae6:	9e 02 00    	nop       
    5ae8:	80 00 00    	nop       
    5aea:	5c 08 00    	nop       
    5aec:	0a 00 00    	nop       
    5aee:	80 00 00    	nop       
    5af0:	a4 15 00    	nop       
    5af2:	4e 00 00    	nop       
    5af4:	80 00 00    	nop       
    5af6:	00 16 00    	nop       
    5af8:	80 00 00    	nop       
    5afa:	80 00 00    	nop       
    5afc:	80 16 00    	nop       
    5afe:	40 00 00    	nop       
    5b00:	80 00 00    	nop       
    5b02:	c0 16 00    	nop       
    5b04:	40 00 00    	nop       
    5b06:	80 00 00    	nop       
    5b08:	20 08 00    	nop       
    5b0a:	1a 00 00    	nop       
    5b0c:	80 00 00    	nop       
    5b0e:	00 00 00    	nop       
Disassembly of section .isr.text:

00005b10 <__U1TXInterrupt>:
void dummy_puts(uint8_t *str) {
    // Do nothing...
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    5b10:	80 9f be    	mov.d     w0, [w15++]
    5b12:	32 00 f8    	push      0x32
    5b14:	34 00 f8    	push      0x34
    5b16:	10 00 20    	mov.w     #0x1, w0
    5b18:	a0 01 88    	mov.w     w0, 0x34
    5b1a:	00 20 20    	mov.w     #0x200, w0
    5b1c:	90 01 88    	mov.w     w0, 0x32
    5b1e:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    5b20:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1TXbuffer.count == 0)      // if nothing left in UART1 TX buffer, 
    5b22:	b0 43 80    	mov.w     0x876, w0
    5b24:	00 00 e0    	cp0.w     w0
    5b26:	17 00 3a    	bra       NZ, 0x5b56 <.L70>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    5b28:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1TXbuffer.count != 0)) {
    5b2a:	16 00 37    	bra       0x5b58 <.L66>

00005b2c <.L69>:
        disable_interrupts();
    5b2c:	ff 3f fc    	disi      #0x3fff
        ch = U1TXbuffer.data[U1TXbuffer.head];
    5b2e:	71 43 80    	mov.w     0x86e, w1
    5b30:	90 43 80    	mov.w     0x872, w0
    5b32:	00 80 40    	add.w     w1, w0, w0
    5b34:	10 4f 78    	mov.b     [w0], [w14]
        U1TXbuffer.head++;
    5b36:	90 43 80    	mov.w     0x872, w0
    5b38:	00 00 e8    	inc.w     w0, w0
    5b3a:	90 43 88    	mov.w     w0, 0x872
        if (U1TXbuffer.head == U1TXbuffer.length)
    5b3c:	91 43 80    	mov.w     0x872, w1
    5b3e:	80 43 80    	mov.w     0x870, w0
    5b40:	80 8f 50    	sub.w     w1, w0, [w15]
    5b42:	02 00 3a    	bra       NZ, 0x5b48 <.L67>
            U1TXbuffer.head = 0;
    5b44:	00 00 eb    	clr.w     w0
    5b46:	90 43 88    	mov.w     w0, 0x872

00005b48 <.L67>:
        U1TXbuffer.count--;
    5b48:	b0 43 80    	mov.w     0x876, w0
    5b4a:	00 00 e9    	dec.w     w0, w0
    5b4c:	b0 43 88    	mov.w     w0, 0x876
        enable_interrupts();
    5b4e:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    5b50:	1e 80 fb    	ze        [w14], w0
    5b52:	20 11 88    	mov.w     w0, 0x224
    5b54:	01 00 37    	bra       0x5b58 <.L66>

00005b56 <.L70>:
    5b56:	00 00 00    	nop       

00005b58 <.L66>:
    5b58:	11 11 80    	mov.w     0x222, w1
    5b5a:	00 20 20    	mov.w     #0x200, w0
    5b5c:	00 80 60    	and.w     w1, w0, w0
    5b5e:	00 00 e0    	cp0.w     w0
    5b60:	03 00 3a    	bra       NZ, 0x5b68 <.L64>
    5b62:	b0 43 80    	mov.w     0x876, w0
    5b64:	00 00 e0    	cp0.w     w0
    5b66:	e2 ff 3a    	bra       NZ, 0x5b2c <.L69>

00005b68 <.L64>:
    }
}
    5b68:	00 80 fa    	ulnk      
    5b6a:	34 00 f9    	pop       0x34
    5b6c:	32 00 f9    	pop       0x32
    5b6e:	4f 00 be    	mov.d     [--w15], w0
    5b70:	00 40 06    	retfie    

00005b72 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    5b72:	80 9f be    	mov.d     w0, [w15++]
    5b74:	32 00 f8    	push      0x32
    5b76:	34 00 f8    	push      0x34
    5b78:	10 00 20    	mov.w     #0x1, w0
    5b7a:	a0 01 88    	mov.w     w0, 0x34
    5b7c:	00 20 20    	mov.w     #0x200, w0
    5b7e:	90 01 88    	mov.w     w0, 0x32
    5b80:	00 00 fa    	lnk       #0x0
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    5b82:	85 60 a9    	bclr.b    0x85, #0x3

    while ((U1STAbits.URXDA == 1) && (U1RXbuffer.count != U1RXbuffer.length)) {
    5b84:	14 00 37    	bra       0x5bae <.L72>

00005b86 <.L75>:
        disable_interrupts();
    5b86:	ff 3f fc    	disi      #0x3fff
        U1RXbuffer.data[U1RXbuffer.tail] = (uint8_t)U1RXREG;
    5b88:	c1 43 80    	mov.w     0x878, w1
    5b8a:	f0 43 80    	mov.w     0x87e, w0
    5b8c:	00 80 40    	add.w     w1, w0, w0
    5b8e:	31 11 80    	mov.w     0x226, w1
    5b90:	81 40 78    	mov.b     w1, w1
    5b92:	01 48 78    	mov.b     w1, [w0]
        U1RXbuffer.tail++;
    5b94:	f0 43 80    	mov.w     0x87e, w0
    5b96:	00 00 e8    	inc.w     w0, w0
    5b98:	f0 43 88    	mov.w     w0, 0x87e
        if (U1RXbuffer.tail == U1RXbuffer.length)
    5b9a:	f1 43 80    	mov.w     0x87e, w1
    5b9c:	d0 43 80    	mov.w     0x87a, w0
    5b9e:	80 8f 50    	sub.w     w1, w0, [w15]
    5ba0:	02 00 3a    	bra       NZ, 0x5ba6 <.L73>
            U1RXbuffer.tail = 0;
    5ba2:	00 00 eb    	clr.w     w0
    5ba4:	f0 43 88    	mov.w     w0, 0x87e

00005ba6 <.L73>:
        U1RXbuffer.count++;
    5ba6:	00 44 80    	mov.w     0x880, w0
    5ba8:	00 00 e8    	inc.w     w0, w0
    5baa:	00 44 88    	mov.w     w0, 0x880
        enable_interrupts();
    5bac:	52 20 ef    	clr.w     0x52

00005bae <.L72>:
    5bae:	10 11 80    	mov.w     0x222, w0
    5bb0:	61 00 60    	and.w     w0, #0x1, w0
    5bb2:	00 00 e0    	cp0.w     w0
    5bb4:	04 00 32    	bra       Z, 0x5bbe <.L71>
    5bb6:	01 44 80    	mov.w     0x880, w1
    5bb8:	d0 43 80    	mov.w     0x87a, w0
    5bba:	80 8f 50    	sub.w     w1, w0, [w15]
    5bbc:	e4 ff 3a    	bra       NZ, 0x5b86 <.L75>

00005bbe <.L71>:
    }
}
    5bbe:	00 80 fa    	ulnk      
    5bc0:	34 00 f9    	pop       0x34
    5bc2:	32 00 f9    	pop       0x32
    5bc4:	4f 00 be    	mov.d     [--w15], w0
    5bc6:	00 40 06    	retfie    
Disassembly of section .text:

00005bc8 <_set_config_callback>:
#include "parser.h"
#include "usb.h"
#include "cdc.h"

void set_config_callback(void) {
    5bc8:	00 00 fa    	lnk       #0x0
    USB_setup_class_callback = cdc_setup_callback;
    5bca:	e0 5b 25    	mov.w     #0x55be, w0
    5bcc:	b0 41 88    	mov.w     w0, 0x836

    BD[EP1IN].bytecount = 0;
    5bce:	c0 60 21    	mov.w     #0x160c, w0
    5bd0:	80 40 eb    	clr.b     w1
    5bd2:	01 48 78    	mov.b     w1, [w0]
    BD[EP1IN].address = EP1_IN_buffer;
    5bd4:	20 08 21    	mov.w     #0x1082, w0
    5bd6:	70 b0 88    	mov.w     w0, 0x160e
    BD[EP1IN].status = UOWN | DTS | DTSEN;
    5bd8:	d0 60 21    	mov.w     #0x160d, w0
    5bda:	81 cc b3    	mov.b     #0xc8, w1
    5bdc:	01 48 78    	mov.b     w1, [w0]
    U1EP1 = ENDPT_IN_ONLY;
    5bde:	50 00 20    	mov.w     #0x5, w0
    5be0:	60 25 88    	mov.w     w0, 0x4ac

    BD[EP2OUT].bytecount = 64;
    5be2:	00 61 21    	mov.w     #0x1610, w0
    5be4:	01 c4 b3    	mov.b     #0x40, w1
    5be6:	01 48 78    	mov.b     w1, [w0]
    BD[EP2OUT].address = EP2_OUT_buffer;
    5be8:	c0 08 21    	mov.w     #0x108c, w0
    5bea:	90 b0 88    	mov.w     w0, 0x1612
    BD[EP2OUT].status = UOWN | DTSEN;
    5bec:	10 61 21    	mov.w     #0x1611, w0
    5bee:	81 c8 b3    	mov.b     #0x88, w1
    5bf0:	01 48 78    	mov.b     w1, [w0]
    USB_out_callbacks[2] = cdc_rx_service;
    5bf2:	e0 75 25    	mov.w     #0x575e, w0
    5bf4:	b0 ae 88    	mov.w     w0, 0x15d6

    BD[EP2IN].bytecount = 0;
    5bf6:	40 61 21    	mov.w     #0x1614, w0
    5bf8:	80 40 eb    	clr.b     w1
    5bfa:	01 48 78    	mov.b     w1, [w0]
    BD[EP2IN].address = EP2_IN_buffer;
    5bfc:	c0 0c 21    	mov.w     #0x10cc, w0
    5bfe:	b0 b0 88    	mov.w     w0, 0x1616
    BD[EP2IN].status = UOWN | DTS | DTSEN;
    5c00:	50 61 21    	mov.w     #0x1615, w0
    5c02:	81 cc b3    	mov.b     #0xc8, w1
    5c04:	01 48 78    	mov.b     w1, [w0]
    U1EP2 = ENDPT_NON_CONTROL;
    5c06:	d0 01 20    	mov.w     #0x1d, w0
    5c08:	70 25 88    	mov.w     w0, 0x4ae
    USB_in_callbacks[2] = cdc_tx_service;
    5c0a:	80 6e 25    	mov.w     #0x56e8, w0
    5c0c:	b0 ad 88    	mov.w     w0, 0x15b6
}
    5c0e:	00 80 fa    	ulnk      
    5c10:	00 00 06    	return    

00005c12 <_main>:

int16_t main(void) {
    5c12:	00 00 fa    	lnk       #0x0
    uint16_t i;

    init_smu_base();
    5c14:	8a ee 07    	rcall     0x392a <_init_smu_base> <.L0> <.LFB0> <.LFE107> <.Letext0> <.Ltext0>

    init_parser();
    5c16:	94 ec 07    	rcall     0x3540 <_init_parser> <.LFB104> <.LFE103>

    init_cdc();
    5c18:	42 fd 07    	rcall     0x569e <_init_cdc> <.LFB2> <.LFE1>
    USB_set_config_callback = set_config_callback;
    5c1a:	80 bc 25    	mov.w     #0x5bc8, w0
    5c1c:	90 41 88    	mov.w     w0, 0x832

    init_usb();
    5c1e:	97 f4 07    	rcall     0x454e <_init_usb> <.LFB2> <.LFE1>

00005c20 <.L3>:

//    while (USB_USWSTAT != CONFIG_STATE) {
//#ifndef USB_INTERRUPT
//        usb_service();
//#endif
//    }

    while (1) {
        parser_state();
    5c20:	d0 41 80    	mov.w     0x83a, w0
    5c22:	00 00 01    	call      w0

#ifndef USB_INTERRUPT
        usb_service();
    5c24:	cb f4 07    	rcall     0x45bc <_usb_service> <.LFB3> <.LFE2>
#endif
    }
    5c26:	fc ff 37    	bra       0x5c20 <.L3>
Disassembly of section .isr:

00005c28 <__DefaultInterrupt>:
    5c28:	00 40 da    	break     
    5c2a:	00 00 fe    	reset     
